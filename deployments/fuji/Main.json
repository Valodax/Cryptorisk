{
  "address": "0x84715eA6F04F3B8dCdd7cabb0E079BcAD8EB4Fa7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "controls",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "data",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Transfer___Failed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "GameSetupComplete",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "GameStarting",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "MainReset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "PlayerJoinedLobby",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "ReceivedRandomWords",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedTerritoryRandomness",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedTroopRandomness",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "WinnerSentFunds",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "territoryOwned",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "territoryAttacking",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "troopQuantity",
          "type": "uint256"
        }
      ],
      "name": "attack",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "amountToDeploy",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "location",
          "type": "uint8"
        }
      ],
      "name": "deploy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "duplicateAddresses",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterLobby",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finishAttack",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "territoryMovingFrom",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "territoryMovingTo",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "troopsMoving",
          "type": "uint256"
        }
      ],
      "name": "fortify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCallbackGasLimit",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGasLane",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLobbyState",
      "outputs": [
        {
          "internalType": "enum Main.LobbyState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRandomWordsArray",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRandomWordsArrayIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSubscriptionId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTerritoryState",
      "outputs": [
        {
          "internalType": "enum Main.TerritoryState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "payWinner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "player_turn",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_gameState",
      "outputs": [
        {
          "internalType": "enum Main.GameState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_lobbyEntrants",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_lobbyState",
      "outputs": [
        {
          "internalType": "enum Main.LobbyState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_mainSet",
      "outputs": [
        {
          "internalType": "enum Main.mainAddressSent",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_players",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_territoryState",
      "outputs": [
        {
          "internalType": "enum Main.TerritoryState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setMainAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x37875290fde7d66aad43a6798ca2145d6e9000c2a7b67eaf35c36c5906683d5c",
  "receipt": {
    "to": null,
    "from": "0x8a2B4d7512a0EeaA7AA4E32666b60146a5162786",
    "contractAddress": "0x84715eA6F04F3B8dCdd7cabb0E079BcAD8EB4Fa7",
    "transactionIndex": 0,
    "gasUsed": "3164114",
    "logsBloom": "0x
    "blockHash": "0xb01f12e70767de99bd0bf61d41eed2d347173ea2edee8827642bda99619a2dad",
    "transactionHash": "0x37875290fde7d66aad43a6798ca2145d6e9000c2a7b67eaf35c36c5906683d5c",
    "logs": [],
    "blockNumber": 15725782,
    "cumulativeGasUsed": "3164114",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2eD832Ba664535e5886b75D64C46EB9a228C2610",
    "479",
    "0x354d2f95da55398f44b7cff77da56283d9c6c829a4bdf1bbcaf2ad6a4d081f61",
    "3000000",
    "100000000000000000",
    "0x47A5Ffd0267c67A037fc10C231b91bF42b6DeF44",
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 4,
  "solcInputHash": "f66c1b8a29c110a89d111a72982e08d4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"controls\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Transfer___Failed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"GameSetupComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"GameStarting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MainReset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"PlayerJoinedLobby\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ReceivedRandomWords\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedTerritoryRandomness\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedTroopRandomness\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"WinnerSentFunds\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"territoryOwned\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"territoryAttacking\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"troopQuantity\",\"type\":\"uint256\"}],\"name\":\"attack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"amountToDeploy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"location\",\"type\":\"uint8\"}],\"name\":\"deploy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"duplicateAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterLobby\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishAttack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"territoryMovingFrom\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"territoryMovingTo\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"troopsMoving\",\"type\":\"uint256\"}],\"name\":\"fortify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCallbackGasLimit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGasLane\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLobbyState\",\"outputs\":[{\"internalType\":\"enum Main.LobbyState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRandomWordsArray\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRandomWordsArrayIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSubscriptionId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTerritoryState\",\"outputs\":[{\"internalType\":\"enum Main.TerritoryState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"payWinner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"player_turn\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_gameState\",\"outputs\":[{\"internalType\":\"enum Main.GameState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_lobbyEntrants\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_lobbyState\",\"outputs\":[{\"internalType\":\"enum Main.LobbyState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_mainSet\",\"outputs\":[{\"internalType\":\"enum Main.mainAddressSent\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_players\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_territoryState\",\"outputs\":[{\"internalType\":\"enum Main.TerritoryState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setMainAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getRandomWordsArray()\":{\"notice\":\"Getter Functions \"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Main.sol\":\"Main\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"contracts/Main.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\n\\n/**@title Cryptorisk Main Contract\\n * @author Michael King and Mitchell Spencer\\n * @dev Implements the Chainlink VRF V2\\n */\\n\\ninterface IControls {\\n    function set_players(address payable[] memory) external;\\n\\n    function push_to_territories(uint8 playerAwarded) external;\\n\\n    function get_territory_owner(uint256) external returns (uint256);\\n\\n    function add_troop_to_territory(uint256) external;\\n\\n    function set_main_address(address main) external;\\n\\n    function deploy_control(uint8 amountToDeploy, uint8 location) external returns (bool);\\n\\n    function attack_control(\\n        uint8 territoryOwned,\\n        uint8 territoryAttacking,\\n        uint256 troopQuantity\\n    ) external;\\n\\n    function fortify_control(\\n        uint8 territoryMovingFrom,\\n        uint8 territoryMovingTo,\\n        uint256 troopsMoving\\n    ) external returns (bool);\\n\\n    function get_troops_to_deploy() external view returns (uint8);\\n\\n    function getPlayerTurn() external view returns (address);\\n\\n    function getAttackStatus() external view returns (bool);\\n}\\n\\ncontract Main is VRFConsumerBaseV2 {\\n    /* Type declarations */\\n    enum TerritoryState {\\n        INCOMPLETE,\\n        COMPLETE\\n    }\\n    enum LobbyState {\\n        OPEN,\\n        CLOSED\\n    }\\n    enum GameState {\\n        DEPLOY,\\n        ATTACK,\\n        FORTIFY,\\n        INACTIVE\\n    }\\n\\n    enum mainAddressSent {\\n        TRUE,\\n        FALSE\\n    }\\n\\n    /* Variables */\\n    // Chainlink VRF Variables\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    uint64 private immutable i_subscriptionId;\\n    bytes32 private immutable i_gasLane;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n\\n    // Setup Variables\\n    uint256 private immutable i_entranceFee;\\n    address private immutable controls_address;\\n    address private immutable data_address;\\n\\n    uint8[4] private territoriesAssigned = [0, 0, 0, 0]; // Used to track if player receives enough territory.\\n    uint256[] s_randomWordsArray;\\n    TerritoryState public s_territoryState;\\n    GameState public s_gameState;\\n    LobbyState public s_lobbyState;\\n    address payable[] public s_players;\\n    address public player_turn;\\n    mainAddressSent public s_mainSet;\\n    mapping(address => bool) public duplicateAddresses;\\n    address payable[] public s_lobbyEntrants;\\n\\n    /* Events */\\n    event RequestedTerritoryRandomness(uint256 indexed requestId);\\n    event RequestedTroopRandomness(uint256 indexed requestId);\\n    event ReceivedRandomWords();\\n    event GameSetupComplete();\\n    event PlayerJoinedLobby(address indexed player);\\n    event GameStarting();\\n    event WinnerSentFunds(address indexed player);\\n    event MainReset();\\n\\n    /* Errors */\\n    error Transfer___Failed();\\n\\n    constructor(\\n        address vrfCoordinatorV2,\\n        uint64 subscriptionId,\\n        bytes32 gasLane, // keyHash\\n        uint32 callbackGasLimit,\\n        uint256 entranceFee,\\n        address controls,\\n        address data\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_subscriptionId = subscriptionId;\\n        i_gasLane = gasLane;\\n        i_callbackGasLimit = callbackGasLimit;\\n        i_entranceFee = entranceFee;\\n        s_lobbyState = LobbyState.OPEN;\\n        s_gameState = GameState.INACTIVE;\\n        s_mainSet = mainAddressSent.FALSE;\\n        controls_address = controls;\\n        data_address = data;\\n    }\\n\\n    /* Modifiers */\\n\\n    modifier onlyPlayer() {\\n        require(msg.sender == IControls(controls_address).getPlayerTurn());\\n        _;\\n    }\\n\\n    modifier onlyControls() {\\n        require(msg.sender == controls_address);\\n        _;\\n        //testttt\\n    }\\n\\n    /* Functions */\\n\\n    function enterLobby() public payable {\\n        require(msg.value >= i_entranceFee, \\\"Send More to Enter Lobby\\\");\\n        require(s_lobbyState == LobbyState.OPEN, \\\"Lobby is full\\\"); // require or if statement?\\n        require(duplicateAddresses[msg.sender] == false, \\\"You've already entered the game!\\\");\\n        s_players.push(payable(msg.sender));\\n        s_lobbyEntrants.push(payable(msg.sender));\\n        emit PlayerJoinedLobby(msg.sender);\\n        duplicateAddresses[msg.sender] = true;\\n        if (s_players.length == 4) {\\n            s_lobbyState = LobbyState.CLOSED;\\n            emit GameStarting();\\n            requestRandomness(42);\\n        }\\n    }\\n\\n    // call this function as soon as contract is deployed\\n    function setMainAddress() public {\\n        require(s_mainSet == mainAddressSent.FALSE, \\\"Controls contract has already received Main address\\\");\\n        IControls(controls_address).set_main_address(address(this));\\n        s_mainSet = mainAddressSent.TRUE;\\n    }\\n\\n    function requestRandomness(uint32 num_words) private {\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            num_words\\n        );\\n        if (s_territoryState == TerritoryState.COMPLETE) {\\n            emit RequestedTroopRandomness(requestId);\\n        } else {\\n            emit RequestedTerritoryRandomness(requestId);\\n        }\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256, /* requestId */\\n        uint256[] memory randomWords\\n    ) internal override {\\n        s_randomWordsArray = randomWords;\\n        emit ReceivedRandomWords();\\n        if (s_territoryState == TerritoryState.INCOMPLETE) {\\n            assignTerritory(randomWords);\\n        } else {\\n            assignTroops(randomWords);\\n        }\\n    }\\n\\n    /**\\n     * Function receives array of 42 random words which are then used to assign each territory (0-41) an owner (0-3).\\n     * Mutates a globally declared array s_territories.\\n     */\\n    function assignTerritory(uint256[] memory randomWords) private {\\n        uint8[4] memory playerSelection = [0, 1, 2, 3]; // Eligible players to be assigned territory, each is popped until no players left to receive.\\n        uint8 territoryCap = 10; // Initial cap is 10, moves up to 11 after two players assigned 10.\\n        uint8 remainingPlayers = 4; // Ticks down as players hit their territory cap\\n        uint256 indexAssignedTerritory; // Index of playerSelection that contains a list of eligible players to receive territory.\\n        uint8 playerAwarded; // Stores the player to be awarded territory, for pushing into the s_territories array.'\\n        for (uint256 i = 0; i < randomWords.length; i++) {\\n            indexAssignedTerritory = randomWords[i] % remainingPlayers; // Calculates which index from playerSelection will receive the territory\\n            playerAwarded = playerSelection[indexAssignedTerritory]; // Player to be awarded territory\\n            IControls(controls_address).push_to_territories(playerAwarded);\\n            territoriesAssigned[playerAwarded]++;\\n            if (territoriesAssigned[playerAwarded] == territoryCap) {\\n                delete playerSelection[playerAwarded]; // Removes awarded player from the array upon hitting territory cap.\\n                remainingPlayers--;\\n                if (remainingPlayers == 2) {\\n                    territoryCap = 11; // Moves up instead of down, to remove situation where the cap goes down and we have players already on the cap then receiving too much territory.\\n                }\\n            }\\n        }\\n        s_territoryState = TerritoryState.COMPLETE;\\n        requestRandomness(78);\\n    }\\n\\n    function assignTroops(uint256[] memory randomWords) private {\\n        uint256 randomWordsIndex = 0;\\n        // s_territories.length == 42\\n        // playerTerritoryIndexes.length == 10 or 11\\n        for (uint256 i = 0; i < 4; i++) {\\n            uint256[] memory playerTerritoryIndexes = new uint256[](territoriesAssigned[i]); // Initializes array of indexes for territories owned by player i\\n            uint256 index = 0;\\n            for (uint256 j = 0; j < 42; j++) {\\n                if (IControls(controls_address).get_territory_owner(j) == i) {\\n                    playerTerritoryIndexes[index++] = j;\\n                }\\n            }\\n\\n            for (uint256 j = 0; j < 30 - territoriesAssigned[i]; j++) {\\n                uint256 territoryAssignedTroop = randomWords[randomWordsIndex++] % territoriesAssigned[i];\\n                IControls(controls_address).add_troop_to_territory(playerTerritoryIndexes[territoryAssignedTroop]);\\n            }\\n        }\\n        emit GameSetupComplete();\\n        s_gameState = GameState.DEPLOY;\\n        IControls(controls_address).set_players(s_players);\\n    }\\n\\n    function deploy(uint8 amountToDeploy, uint8 location) public onlyPlayer {\\n        require(s_gameState == GameState.DEPLOY, \\\"It is currently not deploy phase!\\\");\\n        require(\\n            amountToDeploy <= IControls(controls_address).get_troops_to_deploy(),\\n            \\\"You do not have that many troops to deploy!\\\"\\n        );\\n        bool troopsLeft = IControls(controls_address).deploy_control(amountToDeploy, location);\\n        if (troopsLeft == false) {\\n            s_gameState = GameState.ATTACK;\\n        }\\n    }\\n\\n    function attack(\\n        uint8 territoryOwned,\\n        uint8 territoryAttacking,\\n        uint256 troopQuantity\\n    ) public onlyPlayer {\\n        require(IControls(controls_address).getAttackStatus() == false);\\n        require(s_gameState == GameState.ATTACK, \\\"It is currently not attack phase!\\\");\\n        IControls(controls_address).attack_control(territoryOwned, territoryAttacking, troopQuantity);\\n    }\\n\\n    // player clicks this button when they have finished attacking\\n    function finishAttack() public onlyPlayer {\\n        require(IControls(controls_address).getAttackStatus() == false);\\n        s_gameState = GameState.FORTIFY;\\n    }\\n\\n    function fortify(\\n        uint8 territoryMovingFrom,\\n        uint8 territoryMovingTo,\\n        uint256 troopsMoving\\n    ) public onlyPlayer {\\n        require(s_gameState == GameState.FORTIFY, \\\"It is currently not fortify phase!\\\");\\n        require(\\n            IControls(controls_address).fortify_control(territoryMovingFrom, territoryMovingTo, troopsMoving) == true,\\n            \\\"Your fortification attempt failed\\\"\\n        );\\n        s_gameState = GameState.DEPLOY;\\n    }\\n\\n    function payWinner(address winner) public onlyControls returns (bool) {\\n        (bool success, ) = winner.call{value: address(this).balance}(\\\"\\\");\\n        if (!success) {\\n            revert Transfer___Failed();\\n        }\\n        emit WinnerSentFunds(winner);\\n        resetMain();\\n        return success;\\n    }\\n\\n    /** Getter Functions */\\n\\n    function getRandomWordsArray() public view returns (uint256[] memory) {\\n        return s_randomWordsArray;\\n    }\\n\\n    function getRandomWordsArrayIndex(uint256 index) public view returns (uint256) {\\n        return s_randomWordsArray[index];\\n    }\\n\\n    function getSubscriptionId() public view returns (uint64) {\\n        return i_subscriptionId;\\n    }\\n\\n    function getGasLane() public view returns (bytes32) {\\n        return i_gasLane;\\n    }\\n\\n    function getCallbackGasLimit() public view returns (uint32) {\\n        return i_callbackGasLimit;\\n    }\\n\\n    function getTerritoryState() public view returns (TerritoryState) {\\n        return s_territoryState;\\n    }\\n\\n    function getRequestConfirmations() public pure returns (uint256) {\\n        return REQUEST_CONFIRMATIONS;\\n    }\\n\\n    function getPlayer(uint256 index) public view returns (address) {\\n        return s_players[index];\\n    }\\n\\n    function getNumberOfPlayers() public view returns (uint256) {\\n        return s_players.length;\\n    }\\n\\n    function getEntranceFee() public view returns (uint256) {\\n        return i_entranceFee;\\n    }\\n\\n    function getLobbyState() public view returns (LobbyState) {\\n        return s_lobbyState;\\n    }\\n\\n    // Resets everything\\n    function resetMain() internal {\\n        s_lobbyState = LobbyState.OPEN;\\n        s_players = new address payable[](0);\\n        s_gameState = GameState.INACTIVE;\\n        territoriesAssigned = [0, 0, 0, 0];\\n        for (uint256 i = 0; i < s_lobbyEntrants.length; i++) {\\n            duplicateAddresses[s_lobbyEntrants[i]] = false;\\n        }\\n        emit MainReset();\\n    }\\n}\\n\",\"keccak256\":\"0x1f8e7113286aefd4a7d6ad542d76f3a232270f2032f030f2e43c815602da08c3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061019c5760003560e01c80635f1b0fd8116100ec578063d9eb8a441161008a578063de8be8e711610064578063de8be8e714610575578063e55ae4e8146105a0578063e83463eb146105dd578063fd6673f51461061a5761019c565b8063d9eb8a4414610515578063da4701cd1461051f578063de3d9fb71461054a5761019c565b8063a6ac3b10116100c6578063a6ac3b1014610445578063ae771f6b14610470578063c19dd76b146104ad578063d4e94c46146104d85761019c565b80635f1b0fd8146103d85780638d2ed9971461040357806399c914fb1461042e5761019c565b80631fe543e3116101595780633d777d95116101335780633d777d9514610342578063505e53ab1461036b5780635229134a146103825780635ad964ae146103ad5761019c565b80631fe543e3146102c55780633691770a146102ee5780633b63601e146103175761019c565b806304889afb146101a157806309bc33a7146101cc5780630fb081df146101f757806314b1f907146102225780631664bb631461024b57806319b09f9b14610288575b600080fd5b3480156101ad57600080fd5b506101b6610645565b6040516101c3919061259f565b60405180910390f35b3480156101d857600080fd5b506101e1610656565b6040516101ee91906125d3565b60405180910390f35b34801561020357600080fd5b5061020c61067e565b604051610219919061259f565b60405180910390f35b34801561022e57600080fd5b5061024960048036038101906102449190612667565b610693565b005b34801561025757600080fd5b50610272600480360381019061026d9190612718565b610920565b60405161027f9190612760565b60405180910390f35b34801561029457600080fd5b506102af60048036038101906102aa9190612718565b610940565b6040516102bc9190612760565b60405180910390f35b3480156102d157600080fd5b506102ec60048036038101906102e791906128d4565b610a91565b005b3480156102fa57600080fd5b5061031560048036038101906103109190612667565b610b51565b005b34801561032357600080fd5b5061032c610dc1565b604051610339919061293f565b60405180910390f35b34801561034e57600080fd5b506103696004803603810190610364919061295a565b610de7565b005b34801561037757600080fd5b50610380611107565b005b34801561038e57600080fd5b506103976112b6565b6040516103a49190612a58565b60405180910390f35b3480156103b957600080fd5b506103c261130e565b6040516103cf9190612ac2565b60405180910390f35b3480156103e457600080fd5b506103ed611325565b6040516103fa91906125d3565b60405180910390f35b34801561040f57600080fd5b50610418611332565b6040516104259190612b25565b60405180910390f35b34801561043a57600080fd5b50610443611345565b005b34801561045157600080fd5b5061045a611472565b6040516104679190612b88565b60405180910390f35b34801561047c57600080fd5b5061049760048036038101906104929190612ba3565b611485565b6040516104a49190612bf1565b60405180910390f35b3480156104b957600080fd5b506104c26114c4565b6040516104cf9190612c25565b60405180910390f35b3480156104e457600080fd5b506104ff60048036038101906104fa9190612ba3565b6114ec565b60405161050c9190612bf1565b60405180910390f35b61051d61152b565b005b34801561052b57600080fd5b50610534611867565b6040516105419190612ac2565b60405180910390f35b34801561055657600080fd5b5061055f61187a565b60405161056c9190612c63565b60405180910390f35b34801561058157600080fd5b5061058a6118a2565b6040516105979190612c9d565b60405180910390f35b3480156105ac57600080fd5b506105c760048036038101906105c29190612ba3565b6118ca565b6040516105d4919061293f565b60405180910390f35b3480156105e957600080fd5b5061060460048036038101906105ff9190612ba3565b611912565b60405161061191906125d3565b60405180910390f35b34801561062657600080fd5b5061062f61193a565b60405161063c91906125d3565b60405180910390f35b60028054906101000a900460ff1681565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600060028054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632572cd6e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156106f957600080fd5b505afa15801561070d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107319190612ccd565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461076857600080fd5b600015157f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663af0b94d46040518163ffffffff1660e01b815260040160206040518083038186803b1580156107d257600080fd5b505afa1580156107e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080a9190612d26565b15151461081657600080fd5b6001600381111561082a57610829612528565b5b600260019054906101000a900460ff16600381111561084c5761084b612528565b5b1461088c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088390612dd6565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663be85fc768484846040518463ffffffff1660e01b81526004016108e993929190612e05565b600060405180830381600087803b15801561090357600080fd5b505af1158015610917573d6000803e3d6000fd5b50505050505050565b60056020528060005260406000206000915054906101000a900460ff1681565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461099a57600080fd5b60008273ffffffffffffffffffffffffffffffffffffffff16476040516109c090612e6d565b60006040518083038185875af1925050503d80600081146109fd576040519150601f19603f3d011682016040523d82523d6000602084013e610a02565b606091505b5050905080610a3d576040517faad40e9700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff167f6484268da2aca55c67beef4127a9a4f83ec74ff7fa3d896a9b23c86e12427e7b60405160405180910390a2610a88611947565b80915050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b4357337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610b3a929190612e82565b60405180910390fd5b610b4d8282611b26565b5050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632572cd6e6040518163ffffffff1660e01b815260040160206040518083038186803b158015610bb757600080fd5b505afa158015610bcb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bef9190612ccd565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c2657600080fd5b60026003811115610c3a57610c39612528565b5b600260019054906101000a900460ff166003811115610c5c57610c5b612528565b5b14610c9c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9390612f1d565b60405180910390fd5b600115157f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ada2c7a88585856040518463ffffffff1660e01b8152600401610cfd93929190612e05565b602060405180830381600087803b158015610d1757600080fd5b505af1158015610d2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4f9190612d26565b151514610d91576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8890612faf565b60405180910390fd5b6000600260016101000a81548160ff02191690836003811115610db757610db6612528565b5b0217905550505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632572cd6e6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e4d57600080fd5b505afa158015610e61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e859190612ccd565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ebc57600080fd5b60006003811115610ed057610ecf612528565b5b600260019054906101000a900460ff166003811115610ef257610ef1612528565b5b14610f32576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2990613041565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b6d5bc6f6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f9857600080fd5b505afa158015610fac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd09190613076565b60ff168260ff161115611018576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100f90613115565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663041dcfcc84846040518363ffffffff1660e01b8152600401611075929190613135565b602060405180830381600087803b15801561108f57600080fd5b505af11580156110a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c79190612d26565b9050600015158115151415611102576001600260016101000a81548160ff021916908360038111156110fc576110fb612528565b5b02179055505b505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632572cd6e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561116d57600080fd5b505afa158015611181573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a59190612ccd565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146111dc57600080fd5b600015157f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663af0b94d46040518163ffffffff1660e01b815260040160206040518083038186803b15801561124657600080fd5b505afa15801561125a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061127e9190612d26565b15151461128a57600080fd5b60028060016101000a81548160ff021916908360038111156112af576112ae612528565b5b0217905550565b6060600180548060200260200160405190810160405280929190818152602001828054801561130457602002820191906000526020600020905b8154815260200190600101908083116112f0575b5050505050905090565b6000600260009054906101000a900460ff16905090565b6000600361ffff16905090565b600460149054906101000a900460ff1681565b60018081111561135857611357612528565b5b600460149054906101000a900460ff16600181111561137a57611379612528565b5b146113ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113b1906131d0565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166305ca49b0306040518263ffffffff1660e01b8152600401611413919061293f565b600060405180830381600087803b15801561142d57600080fd5b505af1158015611441573d6000803e3d6000fd5b505050506000600460146101000a81548160ff0219169083600181111561146b5761146a612528565b5b0217905550565b600260019054906101000a900460ff1681565b6003818154811061149557600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600681815481106114fc57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000034101561158e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115859061323c565b60405180910390fd5b600060018111156115a2576115a1612528565b5b60028054906101000a900460ff1660018111156115c2576115c1612528565b5b14611602576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115f9906132a8565b60405180910390fd5b60001515600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514611695576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161168c90613314565b60405180910390fd5b6003339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506006339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167fa0df676a3a1d8a4dc693c144ac79c01945b4464a07bccdbf66c068127c32cfd760405160405180910390a26001600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600460038054905014156118655760016002806101000a81548160ff0219169083600181111561182957611828612528565b5b02179055507f095744e432dd463fbf0fa4a256e21ddb462dbc9cc4e27248ebd5a28d759cc9e560405160405180910390a1611864602a611bc1565b5b565b600260009054906101000a900460ff1681565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600382815481106118e0576118df613334565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006001828154811061192857611927613334565b5b90600052602060002001549050919050565b6000600380549050905090565b60006002806101000a81548160ff0219169083600181111561196c5761196b612528565b5b0217905550600067ffffffffffffffff81111561198c5761198b612791565b5b6040519080825280602002602001820160405280156119ba5781602001602082028036833780820191505090505b50600390805190602001906119d092919061239a565b506003600260016101000a81548160ff021916908360038111156119f7576119f6612528565b5b02179055506040518060800160405280600060ff168152602001600060ff168152602001600060ff168152602001600060ff168152506000906004611a3d929190612424565b5060005b600680549050811015611af75760006005600060068481548110611a6857611a67613334565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080611aef90613392565b915050611a41565b507fddf25b659ac34302a47d8558d65f7af2579a28dd349a418009a1754bd599928460405160405180910390a1565b8060019080519060200190611b3c9291906124be565b507f1d8f6997ec77a160b10f1131c09af88a6a895ea5f542c5fbca36ce69a9f5424860405160405180910390a160006001811115611b7d57611b7c612528565b5b600260009054906101000a900460ff166001811115611b9f57611b9e612528565b5b1415611bb357611bae81611d78565b611bbd565b611bbc81611fba565b5b5050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f0000000000000000000000000000000000000000000000000000000000000000876040518663ffffffff1660e01b8152600401611c859594939291906133f8565b602060405180830381600087803b158015611c9f57600080fd5b505af1158015611cb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd79190613460565b9050600180811115611cec57611ceb612528565b5b600260009054906101000a900460ff166001811115611d0e57611d0d612528565b5b1415611d4657807f6dd9490da71258343c2f0b9c99ec9c283c04748dc6f9ca43c8b9c88ebef7640060405160405180910390a2611d74565b807f14811023daed30f0f57d7f3d94dc3026647731787a9dec5abe13aa62f4a2f0dd60405160405180910390a25b5050565b60006040518060800160405280600060ff168152602001600160ff168152602001600260ff168152602001600360ff1681525090506000600a905060006004905060008060005b8651811015611f7c578360ff16878281518110611ddf57611dde613334565b5b6020026020010151611df191906134bc565b9250858360048110611e0657611e05613334565b5b602002015191507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663aa181e85836040518263ffffffff1660e01b8152600401611e6691906134ed565b600060405180830381600087803b158015611e8057600080fd5b505af1158015611e94573d6000803e3d6000fd5b5050505060008260ff1660048110611eaf57611eae613334565b5b6020918282040191900681819054906101000a900460ff1680929190611ed490613508565b91906101000a81548160ff021916908360ff160217905550508460ff1660008360ff1660048110611f0857611f07613334565b5b602091828204019190069054906101000a900460ff1660ff161415611f6957858260ff1660048110611f3d57611f3c613334565b5b60200201600060ff168152508380611f5490613532565b94505060028460ff161415611f6857600b94505b5b8080611f7490613392565b915050611dbf565b506001600260006101000a81548160ff02191690836001811115611fa357611fa2612528565b5b0217905550611fb2604e611bc1565b505050505050565b6000805b60048110156122b2576000808260048110611fdc57611fdb613334565b5b602091828204019190069054906101000a900460ff1660ff1667ffffffffffffffff81111561200e5761200d612791565b5b60405190808252806020026020018201604052801561203c5781602001602082028036833780820191505090505b5090506000805b602a81101561213e57837f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663780b5bf9836040518263ffffffff1660e01b81526004016120a691906125d3565b602060405180830381600087803b1580156120c057600080fd5b505af11580156120d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120f89190613460565b141561212b578083838061210b90613392565b94508151811061211e5761211d613334565b5b6020026020010181815250505b808061213690613392565b915050612043565b5060005b6000846004811061215657612155613334565b5b602091828204019190069054906101000a900460ff16601e612178919061355c565b60ff1681101561229c57600080856004811061219757612196613334565b5b602091828204019190069054906101000a900460ff1660ff168787806121bc90613392565b9850815181106121cf576121ce613334565b5b60200260200101516121e191906134bc565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635a1095f385838151811061223257612231613334565b5b60200260200101516040518263ffffffff1660e01b815260040161225691906125d3565b600060405180830381600087803b15801561227057600080fd5b505af1158015612284573d6000803e3d6000fd5b5050505050808061229490613392565b915050612142565b50505080806122aa90613392565b915050611fbe565b507fcda6b16767f05ec2f16325d372b235b450091ed813db76d6c3d98a26e52078a560405160405180910390a16000600260016101000a81548160ff0219169083600381111561230557612304612528565b5b02179055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c758c12660036040518263ffffffff1660e01b815260040161236491906136b4565b600060405180830381600087803b15801561237e57600080fd5b505af1158015612392573d6000803e3d6000fd5b505050505050565b828054828255906000526020600020908101928215612413579160200282015b828111156124125782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906123ba565b5b509050612420919061250b565b5090565b826004601f016020900481019282156124ad5791602002820160005b8382111561247e57835183826101000a81548160ff021916908360ff1602179055509260200192600101602081600001049283019260010302612440565b80156124ab5782816101000a81549060ff021916905560010160208160000104928301926001030261247e565b505b5090506124ba919061250b565b5090565b8280548282559060005260206000209081019282156124fa579160200282015b828111156124f95782518255916020019190600101906124de565b5b509050612507919061250b565b5090565b5b8082111561252457600081600090555060010161250c565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6002811061256857612567612528565b5b50565b600081905061257982612557565b919050565b60006125898261256b565b9050919050565b6125998161257e565b82525050565b60006020820190506125b46000830184612590565b92915050565b6000819050919050565b6125cd816125ba565b82525050565b60006020820190506125e860008301846125c4565b92915050565b6000604051905090565b600080fd5b600080fd5b600060ff82169050919050565b61261881612602565b811461262357600080fd5b50565b6000813590506126358161260f565b92915050565b612644816125ba565b811461264f57600080fd5b50565b6000813590506126618161263b565b92915050565b6000806000606084860312156126805761267f6125f8565b5b600061268e86828701612626565b935050602061269f86828701612626565b92505060406126b086828701612652565b9150509250925092565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006126e5826126ba565b9050919050565b6126f5816126da565b811461270057600080fd5b50565b600081359050612712816126ec565b92915050565b60006020828403121561272e5761272d6125f8565b5b600061273c84828501612703565b91505092915050565b60008115159050919050565b61275a81612745565b82525050565b60006020820190506127756000830184612751565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6127c982612780565b810181811067ffffffffffffffff821117156127e8576127e7612791565b5b80604052505050565b60006127fb6125ee565b905061280782826127c0565b919050565b600067ffffffffffffffff82111561282757612826612791565b5b602082029050602081019050919050565b600080fd5b600061285061284b8461280c565b6127f1565b9050808382526020820190506020840283018581111561287357612872612838565b5b835b8181101561289c57806128888882612652565b845260208401935050602081019050612875565b5050509392505050565b600082601f8301126128bb576128ba61277b565b5b81356128cb84826020860161283d565b91505092915050565b600080604083850312156128eb576128ea6125f8565b5b60006128f985828601612652565b925050602083013567ffffffffffffffff81111561291a576129196125fd565b5b612926858286016128a6565b9150509250929050565b612939816126da565b82525050565b60006020820190506129546000830184612930565b92915050565b60008060408385031215612971576129706125f8565b5b600061297f85828601612626565b925050602061299085828601612626565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6129cf816125ba565b82525050565b60006129e183836129c6565b60208301905092915050565b6000602082019050919050565b6000612a058261299a565b612a0f81856129a5565b9350612a1a836129b6565b8060005b83811015612a4b578151612a3288826129d5565b9750612a3d836129ed565b925050600181019050612a1e565b5085935050505092915050565b60006020820190508181036000830152612a7281846129fa565b905092915050565b60028110612a8b57612a8a612528565b5b50565b6000819050612a9c82612a7a565b919050565b6000612aac82612a8e565b9050919050565b612abc81612aa1565b82525050565b6000602082019050612ad76000830184612ab3565b92915050565b60028110612aee57612aed612528565b5b50565b6000819050612aff82612add565b919050565b6000612b0f82612af1565b9050919050565b612b1f81612b04565b82525050565b6000602082019050612b3a6000830184612b16565b92915050565b60048110612b5157612b50612528565b5b50565b6000819050612b6282612b40565b919050565b6000612b7282612b54565b9050919050565b612b8281612b67565b82525050565b6000602082019050612b9d6000830184612b79565b92915050565b600060208284031215612bb957612bb86125f8565b5b6000612bc784828501612652565b91505092915050565b6000612bdb826126ba565b9050919050565b612beb81612bd0565b82525050565b6000602082019050612c066000830184612be2565b92915050565b6000819050919050565b612c1f81612c0c565b82525050565b6000602082019050612c3a6000830184612c16565b92915050565b600067ffffffffffffffff82169050919050565b612c5d81612c40565b82525050565b6000602082019050612c786000830184612c54565b92915050565b600063ffffffff82169050919050565b612c9781612c7e565b82525050565b6000602082019050612cb26000830184612c8e565b92915050565b600081519050612cc7816126ec565b92915050565b600060208284031215612ce357612ce26125f8565b5b6000612cf184828501612cb8565b91505092915050565b612d0381612745565b8114612d0e57600080fd5b50565b600081519050612d2081612cfa565b92915050565b600060208284031215612d3c57612d3b6125f8565b5b6000612d4a84828501612d11565b91505092915050565b600082825260208201905092915050565b7f49742069732063757272656e746c79206e6f742061747461636b20706861736560008201527f2100000000000000000000000000000000000000000000000000000000000000602082015250565b6000612dc0602183612d53565b9150612dcb82612d64565b604082019050919050565b60006020820190508181036000830152612def81612db3565b9050919050565b612dff81612602565b82525050565b6000606082019050612e1a6000830186612df6565b612e276020830185612df6565b612e3460408301846125c4565b949350505050565b600081905092915050565b50565b6000612e57600083612e3c565b9150612e6282612e47565b600082019050919050565b6000612e7882612e4a565b9150819050919050565b6000604082019050612e976000830185612930565b612ea46020830184612930565b9392505050565b7f49742069732063757272656e746c79206e6f7420666f7274696679207068617360008201527f6521000000000000000000000000000000000000000000000000000000000000602082015250565b6000612f07602283612d53565b9150612f1282612eab565b604082019050919050565b60006020820190508181036000830152612f3681612efa565b9050919050565b7f596f757220666f7274696669636174696f6e20617474656d7074206661696c6560008201527f6400000000000000000000000000000000000000000000000000000000000000602082015250565b6000612f99602183612d53565b9150612fa482612f3d565b604082019050919050565b60006020820190508181036000830152612fc881612f8c565b9050919050565b7f49742069732063757272656e746c79206e6f74206465706c6f7920706861736560008201527f2100000000000000000000000000000000000000000000000000000000000000602082015250565b600061302b602183612d53565b915061303682612fcf565b604082019050919050565b6000602082019050818103600083015261305a8161301e565b9050919050565b6000815190506130708161260f565b92915050565b60006020828403121561308c5761308b6125f8565b5b600061309a84828501613061565b91505092915050565b7f596f7520646f206e6f7420686176652074686174206d616e792074726f6f707360008201527f20746f206465706c6f7921000000000000000000000000000000000000000000602082015250565b60006130ff602b83612d53565b915061310a826130a3565b604082019050919050565b6000602082019050818103600083015261312e816130f2565b9050919050565b600060408201905061314a6000830185612df6565b6131576020830184612df6565b9392505050565b7f436f6e74726f6c7320636f6e74726163742068617320616c726561647920726560008201527f636569766564204d61696e206164647265737300000000000000000000000000602082015250565b60006131ba603383612d53565b91506131c58261315e565b604082019050919050565b600060208201905081810360008301526131e9816131ad565b9050919050565b7f53656e64204d6f726520746f20456e746572204c6f6262790000000000000000600082015250565b6000613226601883612d53565b9150613231826131f0565b602082019050919050565b6000602082019050818103600083015261325581613219565b9050919050565b7f4c6f6262792069732066756c6c00000000000000000000000000000000000000600082015250565b6000613292600d83612d53565b915061329d8261325c565b602082019050919050565b600060208201905081810360008301526132c181613285565b9050919050565b7f596f7527766520616c726561647920656e7465726564207468652067616d6521600082015250565b60006132fe602083612d53565b9150613309826132c8565b602082019050919050565b6000602082019050818103600083015261332d816132f1565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061339d826125ba565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156133d0576133cf613363565b5b600182019050919050565b600061ffff82169050919050565b6133f2816133db565b82525050565b600060a08201905061340d6000830188612c16565b61341a6020830187612c54565b61342760408301866133e9565b6134346060830185612c8e565b6134416080830184612c8e565b9695505050505050565b60008151905061345a8161263b565b92915050565b600060208284031215613476576134756125f8565b5b60006134848482850161344b565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006134c7826125ba565b91506134d2836125ba565b9250826134e2576134e161348d565b5b828206905092915050565b60006020820190506135026000830184612df6565b92915050565b600061351382612602565b915060ff82141561352757613526613363565b5b600182019050919050565b600061353d82612602565b9150600082141561355157613550613363565b5b600182039050919050565b600061356782612602565b915061357283612602565b92508282101561358557613584613363565b5b828203905092915050565b600081549050919050565b600082825260208201905092915050565b60008190508160005260206000209050919050565b6135ca81612bd0565b82525050565b60006135dc83836135c1565b60208301905092915050565b60008160001c9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613628613623836135e8565b6135f5565b9050919050565b600061363b8254613615565b9050919050565b6000600182019050919050565b600061365a82613590565b613664818561359b565b935061366f836135ac565b8060005b838110156136a7576136848261362f565b61368e88826135d0565b975061369983613642565b925050600181019050613673565b5085935050505092915050565b600060208201905081810360008301526136ce818461364f565b90509291505056fea2646970667358221220fcefd959a1b2b7d93fec3287bd1e3135a8e2bd5d1f3975528539f6ec6b05425964736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getRandomWordsArray()": {
        "notice": "Getter Functions "
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2556,
        "contract": "contracts/Main.sol:Main",
        "label": "territoriesAssigned",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_uint8)4_storage"
      },
      {
        "astId": 2559,
        "contract": "contracts/Main.sol:Main",
        "label": "s_randomWordsArray",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2562,
        "contract": "contracts/Main.sol:Main",
        "label": "s_territoryState",
        "offset": 0,
        "slot": "2",
        "type": "t_enum(TerritoryState)2518"
      },
      {
        "astId": 2565,
        "contract": "contracts/Main.sol:Main",
        "label": "s_gameState",
        "offset": 1,
        "slot": "2",
        "type": "t_enum(GameState)2526"
      },
      {
        "astId": 2568,
        "contract": "contracts/Main.sol:Main",
        "label": "s_lobbyState",
        "offset": 2,
        "slot": "2",
        "type": "t_enum(LobbyState)2521"
      },
      {
        "astId": 2571,
        "contract": "contracts/Main.sol:Main",
        "label": "s_players",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 2573,
        "contract": "contracts/Main.sol:Main",
        "label": "player_turn",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 2576,
        "contract": "contracts/Main.sol:Main",
        "label": "s_mainSet",
        "offset": 20,
        "slot": "4",
        "type": "t_enum(mainAddressSent)2529"
      },
      {
        "astId": 2580,
        "contract": "contracts/Main.sol:Main",
        "label": "duplicateAddresses",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2583,
        "contract": "contracts/Main.sol:Main",
        "label": "s_lobbyEntrants",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_address_payable)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint8)4_storage": {
        "base": "t_uint8",
        "encoding": "inplace",
        "label": "uint8[4]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(GameState)2526": {
        "encoding": "inplace",
        "label": "enum Main.GameState",
        "numberOfBytes": "1"
      },
      "t_enum(LobbyState)2521": {
        "encoding": "inplace",
        "label": "enum Main.LobbyState",
        "numberOfBytes": "1"
      },
      "t_enum(TerritoryState)2518": {
        "encoding": "inplace",
        "label": "enum Main.TerritoryState",
        "numberOfBytes": "1"
      },
      "t_enum(mainAddressSent)2529": {
        "encoding": "inplace",
        "label": "enum Main.mainAddressSent",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}