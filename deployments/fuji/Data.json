{
  "address": "0x38Fea5914DF09bA507CE3cca097Da0B0eDE59090",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "controls",
          "type": "address"
        }
      ],
      "name": "ReceivedControls",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "addTroopToTerritory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "territory",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "newOwner",
          "type": "uint8"
        }
      ],
      "name": "changeOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllTerritories",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "owner",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "troops",
              "type": "uint256"
            }
          ],
          "internalType": "struct Data.Territory_Info[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "continent",
          "type": "uint256"
        }
      ],
      "name": "getContinentBonus",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContinentInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "owner",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "troopBonus",
              "type": "uint8"
            }
          ],
          "internalType": "struct Data.Continent_Info[6]",
          "name": "",
          "type": "tuple[6]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "continent",
          "type": "uint256"
        }
      ],
      "name": "getContinentOwner",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "territory",
          "type": "uint256"
        }
      ],
      "name": "getNeighbours",
      "outputs": [
        {
          "internalType": "uint8[]",
          "name": "",
          "type": "uint8[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "territoryId",
          "type": "uint256"
        }
      ],
      "name": "getTerritories",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "owner",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "troops",
              "type": "uint256"
            }
          ],
          "internalType": "struct Data.Territory_Info",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "j",
          "type": "uint256"
        }
      ],
      "name": "getTerritoryOwner",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "owner",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "territory",
          "type": "uint256"
        }
      ],
      "name": "getTroopCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initializeContinents",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "playerAwarded",
          "type": "uint8"
        }
      ],
      "name": "pushToTerritories",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "removeTroopFromTerritory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resetData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_continents",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "owner",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "troopBonus",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_controlsSet",
      "outputs": [
        {
          "internalType": "enum Data.controlsAddressSent",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_neighbours",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_territories",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "owner",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "troops",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "controls",
          "type": "address"
        }
      ],
      "name": "setControlsAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateContinents",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb21cc29346cc87da2d38dc45a09b965e9bbac19198255428728708fed8b596a0",
  "receipt": {
    "to": null,
    "from": "0x8a2B4d7512a0EeaA7AA4E32666b60146a5162786",
    "contractAddress": "0x38Fea5914DF09bA507CE3cca097Da0B0eDE59090",
    "transactionIndex": 0,
    "gasUsed": "3886887",
    "logsBloom": "0x
    "blockHash": "0x3596d407952164f9607c8a77d638e645473948e2f50038a996094b2860b3cc15",
    "transactionHash": "0xb21cc29346cc87da2d38dc45a09b965e9bbac19198255428728708fed8b596a0",
    "logs": [],
    "blockNumber": 15724231,
    "cumulativeGasUsed": "3886887",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "f66c1b8a29c110a89d111a72982e08d4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controls\",\"type\":\"address\"}],\"name\":\"ReceivedControls\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"addTroopToTerritory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"territory\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"newOwner\",\"type\":\"uint8\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllTerritories\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"owner\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"troops\",\"type\":\"uint256\"}],\"internalType\":\"struct Data.Territory_Info[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"continent\",\"type\":\"uint256\"}],\"name\":\"getContinentBonus\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContinentInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"owner\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"troopBonus\",\"type\":\"uint8\"}],\"internalType\":\"struct Data.Continent_Info[6]\",\"name\":\"\",\"type\":\"tuple[6]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"continent\",\"type\":\"uint256\"}],\"name\":\"getContinentOwner\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"territory\",\"type\":\"uint256\"}],\"name\":\"getNeighbours\",\"outputs\":[{\"internalType\":\"uint8[]\",\"name\":\"\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"territoryId\",\"type\":\"uint256\"}],\"name\":\"getTerritories\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"owner\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"troops\",\"type\":\"uint256\"}],\"internalType\":\"struct Data.Territory_Info\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"j\",\"type\":\"uint256\"}],\"name\":\"getTerritoryOwner\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"owner\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"territory\",\"type\":\"uint256\"}],\"name\":\"getTroopCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeContinents\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"playerAwarded\",\"type\":\"uint8\"}],\"name\":\"pushToTerritories\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"removeTroopFromTerritory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_continents\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"owner\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"troopBonus\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_controlsSet\",\"outputs\":[{\"internalType\":\"enum Data.controlsAddressSent\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_neighbours\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_territories\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"owner\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"troops\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controls\",\"type\":\"address\"}],\"name\":\"setControlsAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateContinents\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Data.sol\":\"Data\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"contracts/Controls.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"./Main.sol\\\";\\n\\ninterface IData {\\n    function initializeContinents() external;\\n\\n    function getContinentOwner(uint256 continent) external view returns (uint8);\\n\\n    function getContinentBonus(uint256 continent) external view returns (uint8);\\n\\n    function pushToTerritories(uint8) external;\\n\\n    function addTroopToTerritory(uint256 index) external;\\n\\n    function updateContinents() external;\\n\\n    function setControlsAddress(address controls) external;\\n\\n    function getNeighbours(uint256 territory) external view returns (uint8[] memory);\\n\\n    function getTerritoryOwner(uint256) external returns (uint8);\\n\\n    function getTroopCount(uint256 territory) external view returns (uint256);\\n\\n    function removeTroopFromTerritory(uint256 index) external;\\n\\n    function changeOwner(uint256 territory, uint8 newOwner) external;\\n\\n    function resetData() external;\\n}\\n\\ncontract Controls is IControls, VRFConsumerBaseV2 {\\n    event CurrentPlayer(address indexed player);\\n    event ReceivedMain(address indexed main);\\n    event PlayerDeploying(address indexed player);\\n    event PlayerAttacking(address indexed player);\\n    event PlayerFortifying(address indexed player);\\n    event DiceRolled();\\n    event RollingDice(uint256 indexed s_requestId);\\n    event GameOver(address indexed winner);\\n    event TransferTroopsAvailable(uint256 indexed territoryBeingAttacked);\\n\\n    // enums\\n\\n    enum mainAddressSent {\\n        TRUE,\\n        FALSE\\n    }\\n\\n    // Chainlink VRF Variables\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    uint64 private immutable i_subscriptionId;\\n    bytes32 private immutable i_gasLane;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n\\n    // variables\\n    uint256 s_recentAttackingArmies;\\n    uint256 s_recentDefendingArmies;\\n    uint8 s_recentTerritoryAttacking;\\n    uint8 s_recentTerritoryBeingAttacked;\\n\\n    address private main_address;\\n    address private data_address;\\n\\n    mainAddressSent public s_mainSet;\\n    uint256 public s_requestId;\\n    uint8 public s_troopsToDeploy;\\n    uint8 public s_playerTurn;\\n\\n    address payable[] s_playersArray;\\n    uint256[] s_diceWords;\\n\\n    bool s_attackSuccess;\\n    bool s_gameIsOver;\\n\\n    constructor(\\n        address vrfCoordinatorV2,\\n        uint64 subscriptionId,\\n        bytes32 gasLane,\\n        uint32 callbackGasLimit,\\n        address data\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_subscriptionId = subscriptionId;\\n        i_gasLane = gasLane;\\n        i_callbackGasLimit = callbackGasLimit;\\n        data_address = data;\\n        s_mainSet = mainAddressSent.FALSE;\\n        s_playerTurn = 3;\\n        s_troopsToDeploy = 0;\\n        s_attackSuccess = false;\\n        s_gameIsOver = false;\\n    }\\n\\n    modifier onlyMain() {\\n        require(msg.sender == main_address);\\n        _;\\n    }\\n\\n    modifier gameIsOver() {\\n        require(s_gameIsOver == true);\\n        _;\\n    }\\n\\n    function set_main_address(address main) external {\\n        require(s_mainSet == mainAddressSent.FALSE);\\n        emit ReceivedMain(main);\\n        main_address = main;\\n        s_mainSet = mainAddressSent.TRUE;\\n        IData(data_address).setControlsAddress(address(this));\\n    }\\n\\n    function set_players(address payable[] memory players) external onlyMain {\\n        s_playersArray = players;\\n        IData(data_address).initializeContinents();\\n        next_player();\\n    }\\n\\n    function next_player() private {\\n        s_playerTurn++;\\n        if (s_playerTurn == s_playersArray.length) {\\n            s_playerTurn = 0;\\n        }\\n        IData(data_address).updateContinents();\\n        s_troopsToDeploy = 0;\\n        for (uint256 c = 0; c < 6; c++) {\\n            if (IData(data_address).getContinentOwner(c) == s_playerTurn) {\\n                s_troopsToDeploy += IData(data_address).getContinentBonus(c);\\n            }\\n        }\\n\\n        uint8 totalTerritories = 0;\\n        for (uint256 i = 0; i < 42; i++) {\\n            if (IData(data_address).getTerritoryOwner(i) == s_playerTurn) {\\n                totalTerritories++;\\n            }\\n        }\\n        if (totalTerritories < 9) {\\n            s_troopsToDeploy += 3;\\n        } else {\\n            s_troopsToDeploy += totalTerritories / 3;\\n        }\\n    }\\n\\n    function deploy_control(uint8 amountToDeploy, uint8 location) external onlyMain returns (bool) {\\n        require(IData(data_address).getTerritoryOwner(location) == s_playerTurn, \\\"You do not own this territory\\\");\\n        emit PlayerDeploying(s_playersArray[s_playerTurn]);\\n        for (uint256 i = 0; i < amountToDeploy; i++) {\\n            IData(data_address).addTroopToTerritory(location);\\n        }\\n        s_troopsToDeploy -= amountToDeploy;\\n        if (s_troopsToDeploy == 0) {\\n            return false; // returns false if all troops have not been deployed\\n        }\\n        return true;\\n    }\\n\\n    function attack_control(\\n        uint8 territoryOwned,\\n        uint8 territoryAttacking,\\n        uint256 attackingArmies // could\\n    ) external onlyMain {\\n        require(\\n            validate_attackable(territoryOwned, territoryAttacking),\\n            \\\"Territory you are trying to attack is not a neighbour!\\\"\\n        );\\n        require(\\n            (attackingArmies < IData(data_address).getTroopCount(territoryOwned)) && (attackingArmies > 0),\\n            \\\"You cannot attack with that many troops!\\\"\\n        );\\n        emit PlayerAttacking(s_playersArray[s_playerTurn]);\\n\\n        uint256 defendingArmies = IData(data_address).getTroopCount(territoryAttacking);\\n        if (defendingArmies >= 2) {\\n            defendingArmies = 2;\\n        } else {\\n            defendingArmies = 1;\\n        }\\n        uint8 num_words = getArmies(attackingArmies, defendingArmies); // attackingArmies, defendingArmies not returning correct numbers\\n        s_recentTerritoryAttacking = territoryOwned;\\n        s_recentTerritoryBeingAttacked = territoryAttacking;\\n        s_recentAttackingArmies = attackingArmies;\\n        s_recentDefendingArmies = defendingArmies;\\n        diceRoller(num_words);\\n\\n        // 1. Player clicks on their own territory\\n        // 2. Player clicks on enemy territory.\\n        // 3. Player chooses how many troops to attack with.\\n        // 4. Player attacks\\n    }\\n\\n    function battle(\\n        uint256 attackingArmies,\\n        uint256 defendingArmies,\\n        uint256 territoryAttacking,\\n        uint256 territoryBeingAttacked,\\n        uint256[] memory randomWords\\n    ) private {\\n        uint256[] memory attackerRolls = new uint256[](attackingArmies);\\n        uint256[] memory defenderRolls = new uint256[](defendingArmies);\\n        for (uint256 i = 0; i < (attackingArmies + defendingArmies); i++) {\\n            if (i < attackingArmies) {\\n                attackerRolls[i] = randomWords[i] % 6;\\n            } else {\\n                defenderRolls[i - attackingArmies] = randomWords[i] % 6;\\n            }\\n        }\\n\\n        // Sorting the two rolls arrays\\n        insertionSort(attackerRolls);\\n        insertionSort(defenderRolls);\\n\\n        for (uint256 i = 0; i < attackerRolls.length; i++) {}\\n        for (uint256 i = 0; i < defenderRolls.length; i++) {}\\n\\n        uint256 attacks; // either 1 or 2\\n        if (attackingArmies > defendingArmies) {\\n            attacks = defendingArmies;\\n        } else {\\n            attacks = attackingArmies;\\n        }\\n        for (uint256 i = 0; i < attacks; i++) {\\n            if (attackerRolls[i] > defenderRolls[i]) {\\n                // 3 v 1 , 2 v 1 , 1 v 1, 2 v 2, 2 v 1, 1 v 1 //\\n                // attacker wins, defender dies\\n                IData(data_address).removeTroopFromTerritory(territoryBeingAttacked);\\n                if (\\n                    // Attacker has killed all troops in the defending territory\\n                    IData(data_address).getTroopCount(territoryBeingAttacked) == 0\\n                ) {\\n                    // Territory now becomes Attackers\\n                    IData(data_address).changeOwner(territoryBeingAttacked, s_playerTurn);\\n                    IData(data_address).removeTroopFromTerritory(territoryAttacking);\\n                    IData(data_address).addTroopToTerritory(territoryBeingAttacked);\\n                    // Attacker can select how many troops he wants to deploy to territory\\n                    s_attackSuccess = true;\\n                    uint256 defeatedPlayer = IData(data_address).getTerritoryOwner(territoryBeingAttacked);\\n                    if (getTotalTroops(defeatedPlayer) == 0) {\\n                        // if that was the last armies of the player\\n                        killPlayer(defeatedPlayer); // player is removed from the game\\n                    }\\n                    if (s_playersArray.length == 1) {\\n                        gameOver();\\n                        s_gameIsOver = true;\\n                    } else {\\n                        emit TransferTroopsAvailable(territoryBeingAttacked);\\n                    }\\n                }\\n            } else {\\n                // defender wins\\n                IData(data_address).removeTroopFromTerritory(territoryAttacking);\\n            }\\n        }\\n    }\\n\\n    // This is a function that is executed when a button is clicked.\\n    function troopTransferAfterAttack(uint256 amountOfTroops) public {\\n        require(s_attackSuccess);\\n        require(s_playersArray[s_playerTurn] == msg.sender);\\n        require(\\n            amountOfTroops < IData(data_address).getTroopCount(s_recentTerritoryAttacking) && (amountOfTroops > 0),\\n            \\\"You cannot move that amount of troops!\\\"\\n        );\\n\\n        for (uint256 i = 0; i < amountOfTroops; i++) {\\n            IData(data_address).addTroopToTerritory(s_recentTerritoryBeingAttacked);\\n            IData(data_address).removeTroopFromTerritory(s_recentTerritoryAttacking);\\n        }\\n        s_attackSuccess = false;\\n    }\\n\\n    function diceRoller(uint32 num_words) private {\\n        s_requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            num_words\\n        );\\n        emit RollingDice(s_requestId);\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256, /* requestId */\\n        uint256[] memory randomWords\\n    ) internal override {\\n        s_diceWords = randomWords;\\n        emit DiceRolled();\\n        battle(\\n            s_recentAttackingArmies,\\n            s_recentDefendingArmies,\\n            s_recentTerritoryAttacking,\\n            s_recentTerritoryBeingAttacked,\\n            randomWords\\n        );\\n    }\\n\\n    function transferTroops(\\n        uint8 territoryMovingFrom,\\n        uint8 territoryMovingTo,\\n        uint256 troopsMoving\\n    ) public {\\n        require(\\n            (troopsMoving < IData(data_address).getTroopCount(territoryMovingFrom)) && (troopsMoving > 0),\\n            \\\"You cannot move that amount of troops!\\\"\\n        );\\n\\n        for (uint256 i = 0; i < troopsMoving; i++) {\\n            IData(data_address).addTroopToTerritory(territoryMovingTo);\\n            IData(data_address).removeTroopFromTerritory(territoryMovingFrom);\\n        }\\n    }\\n\\n    function fortify_control(\\n        uint8 territoryMovingFrom,\\n        uint8 territoryMovingTo,\\n        uint256 troopsMoving\\n    ) external onlyMain returns (bool) {\\n        //need to add parameters\\n        emit PlayerFortifying(s_playersArray[s_playerTurn]);\\n        require(\\n            validateFortifiable(territoryMovingFrom, territoryMovingTo),\\n            \\\"Territory you are trying move troops to is not one of your neighbours!\\\"\\n        );\\n        transferTroops(territoryMovingFrom, territoryMovingTo, troopsMoving);\\n\\n        next_player();\\n        return true;\\n    }\\n\\n    function validate_owner(uint8 territory_clicked) internal returns (bool) {\\n        uint8 territory_owner = IData(data_address).getTerritoryOwner(territory_clicked);\\n        if (territory_owner == s_playerTurn) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function validateFortifiable(uint8 territoryMovingFrom, uint8 territoryMovingTo) internal returns (bool) {\\n        require(IData(data_address).getTroopCount(territoryMovingFrom) > 1, \\\"You must have more than 1 troop to move!\\\");\\n        require(\\n            validate_owner(territoryMovingFrom) && validate_owner(territoryMovingTo),\\n            \\\"You must own both territories to move troops!\\\"\\n        );\\n        uint8[] memory neighbours = IData(data_address).getNeighbours(territoryMovingFrom);\\n        for (uint256 i = 0; i < 6; i++) {\\n            if ((territoryMovingTo == neighbours[i])) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function validate_attackable(uint8 territoryOwned, uint8 territoryAttacking) internal returns (bool) {\\n        require(\\n            IData(data_address).getTroopCount(territoryOwned) > 1,\\n            \\\"You must have at least 1 troop remaining in your territory to attack!\\\"\\n        );\\n        require(!validate_owner(territoryAttacking), \\\"You cannot attack your own territory!\\\"); //checks if the player owns the territory they are trying to attack\\n        uint8[] memory neighbours = IData(data_address).getNeighbours(territoryOwned);\\n        for (uint256 i = 0; i < 6; i++) {\\n            if ((territoryAttacking == neighbours[i])) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function getArmies(uint256 attackingArmies, uint256 defendingArmies) private pure returns (uint8) {\\n        uint8 num_words = 0;\\n        if (attackingArmies == 3) {\\n            num_words = 3;\\n        } else if (attackingArmies == 2) {\\n            num_words = 2;\\n        } else {\\n            num_words = 1;\\n        }\\n        if (defendingArmies == 2) {\\n            num_words += 2;\\n        } else {\\n            num_words += 1;\\n        }\\n        return num_words;\\n    }\\n\\n    function gameOver() public gameIsOver {\\n        address winner = s_playersArray[s_playerTurn];\\n        emit GameOver(winner);\\n        (bool success, ) = main_address.call(abi.encodeWithSignature(\\\"payWinner(address)\\\", winner));\\n        require(success, \\\"call to main failed\\\");\\n        IData(data_address).resetData();\\n        resetControls();\\n    }\\n\\n    function resetControls() private {\\n        s_playerTurn = 3;\\n        s_troopsToDeploy = 0;\\n        s_attackSuccess = false;\\n        s_gameIsOver = false;\\n        s_playersArray = new address payable[](0);\\n    }\\n\\n    function add_troop_to_territory(uint256 index) external onlyMain {\\n        IData(data_address).addTroopToTerritory(index);\\n    }\\n\\n    function killPlayer(uint256 deadPlayer) private {\\n        delete s_playersArray[deadPlayer];\\n    }\\n\\n    function getTotalTroops(uint256 player) public returns (uint256) {\\n        uint256 totalTroops = 0;\\n        for (uint256 i = 0; i < 42; i++) {\\n            if (IData(data_address).getTerritoryOwner(i) == player) {\\n                totalTroops += IData(data_address).getTroopCount(i);\\n            }\\n        }\\n        return totalTroops;\\n    }\\n\\n    function get_territory_owner(uint256 j) external onlyMain returns (uint256) {\\n        return IData(data_address).getTerritoryOwner(j);\\n    }\\n\\n    function get_troops_to_deploy() public view returns (uint8) {\\n        return s_troopsToDeploy;\\n    }\\n\\n    function getPlayerTurn() public view returns (address) {\\n        return s_playersArray[s_playerTurn];\\n    }\\n\\n    function getRequestId() public view returns (uint256) {\\n        return s_requestId;\\n    }\\n\\n    function push_to_territories(uint8 playerAwarded) external onlyMain {\\n        IData(data_address).pushToTerritories(playerAwarded);\\n    }\\n\\n    function getAttackStatus() public view returns (bool) {\\n        return s_attackSuccess;\\n    }\\n\\n    function insertionSort(uint256[] memory arr) private pure {\\n        uint256 i;\\n        uint256 key;\\n        int256 j;\\n        for (i = 1; i < arr.length; i++) {\\n            key = arr[i];\\n            j = int256(i - 1);\\n            while (j >= 0 && arr[uint256(j)] < key) {\\n                arr[uint256(j + 1)] = arr[uint256(j)];\\n                j = j - 1;\\n            }\\n            arr[uint256(j + 1)] = key;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x517c41b3bc1ca0de0ab058c5fe1b29dfe2f186dd7814c5c659f62dd385cec69c\",\"license\":\"MIT\"},\"contracts/Data.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"./Controls.sol\\\";\\n\\ncontract Data is IData {\\n    event ReceivedControls(address indexed controls);\\n\\n    struct Continent_Info {\\n        uint8 owner;\\n        uint8 troopBonus;\\n    }\\n    struct Territory_Info {\\n        uint8 owner;\\n        uint256 troops;\\n    }\\n\\n    enum controlsAddressSent {\\n        TRUE,\\n        FALSE\\n    }\\n    Continent_Info[6] public s_continents;\\n    Territory_Info[] public s_territories;\\n    address private controls_address;\\n    controlsAddressSent public s_controlsSet;\\n\\n    // Array containing territories that are neighbours of the territory of the index. 99 is a filler.\\n    uint8[][] public s_neighbours = [\\n        [1, 3, 29, 99, 99, 99], //0\\n        [0, 3, 4, 2, 99, 99],\\n        [1, 4, 5, 13, 99, 99],\\n        [0, 1, 4, 6, 99, 99],\\n        [1, 2, 3, 5, 6, 7],\\n        [2, 4, 7, 99, 99, 99],\\n        [3, 4, 7, 8, 99, 99],\\n        [4, 5, 6, 8, 99, 99],\\n        [6, 7, 9, 99, 99, 99],\\n        [8, 10, 11, 99, 99, 99],\\n        [9, 11, 12, 99, 99, 99], //10\\n        [9, 10, 12, 20, 99, 99],\\n        [10, 11, 99, 99, 99, 99],\\n        [2, 14, 15, 99, 99, 99],\\n        [13, 15, 16, 17, 99, 99],\\n        [13, 14, 16, 18, 99, 99],\\n        [14, 15, 17, 18, 19, 99],\\n        [14, 16, 19, 26, 33, 35],\\n        [15, 16, 19, 20, 99, 99],\\n        [16, 17, 18, 20, 21, 35],\\n        [11, 18, 19, 21, 22, 23], //20\\n        [19, 20, 23, 35, 99, 99],\\n        [20, 21, 23, 24, 99, 99],\\n        [20, 21, 22, 24, 25, 35],\\n        [22, 23, 25, 99, 99, 99],\\n        [23, 24, 99, 99, 99, 99],\\n        [17, 27, 33, 34, 99, 99],\\n        [26, 28, 30, 31, 34, 99],\\n        [27, 30, 29, 99, 99, 99],\\n        [28, 30, 31, 32, 0, 99],\\n        [27, 28, 29, 31, 99, 99],\\n        [29, 30, 27, 34, 32, 99],\\n        [29, 31, 99, 99, 99, 99],\\n        [17, 26, 34, 36, 35, 99],\\n        [31, 27, 26, 33, 36, 37],\\n        [19, 17, 33, 36, 23, 21],\\n        [35, 33, 34, 37, 99, 99],\\n        [34, 36, 38, 99, 99, 99],\\n        [37, 39, 40, 99, 99, 99],\\n        [38, 41, 44, 99, 99, 99],\\n        [38, 39, 41, 99, 99, 99],\\n        [40, 39, 99, 99, 99, 99]\\n    ];\\n\\n    modifier onlyControls() {\\n        require(msg.sender == controls_address);\\n        _;\\n    }\\n\\n    constructor() {\\n        s_controlsSet = controlsAddressSent.FALSE;\\n    }\\n\\n    function setControlsAddress(address controls) external {\\n        require(s_controlsSet == controlsAddressSent.FALSE);\\n        emit ReceivedControls(controls);\\n        controls_address = controls;\\n        s_controlsSet = controlsAddressSent.TRUE;\\n    }\\n\\n    // Initializes continents array with owner -1 (indicates no owner), and the troop bonuses of each continent.\\n    // As player comes to own a contient, owner will be changed to the player.\\n    function initializeContinents() external onlyControls {\\n        for (uint8 i = 0; i < 6; i++) {\\n            s_continents[i].owner = 4; //@dev 0=p1, 1=p2, 2=p3, 3=p4, 4=available\\n            if (i == 0) {\\n                // North America\\n                s_continents[i].troopBonus = 5;\\n            } else if (i == 1) {\\n                // South America\\n                s_continents[i].troopBonus = 2;\\n            } else if (i == 2) {\\n                // Europe\\n                s_continents[i].troopBonus = 5;\\n            } else if (i == 3) {\\n                // Africa\\n                s_continents[i].troopBonus = 3;\\n            } else if (i == 4) {\\n                // Asia\\n                s_continents[i].troopBonus = 7;\\n            } else if (i == 5) {\\n                // Oceania\\n                s_continents[i].troopBonus = 2;\\n            }\\n        }\\n    }\\n\\n    function updateContinentsLoop(\\n        uint256 loopStart,\\n        uint256 loopEnd,\\n        uint8 continent\\n    ) internal {\\n        uint8 owner;\\n        uint8 prevOwner;\\n        for (uint256 i = loopStart; i < loopEnd; i++) {\\n            owner = s_territories[i].owner;\\n            // if continent owner is not previous owner, the loop will break since owner doesn't own continent\\n            if (i != loopEnd && owner != prevOwner) {\\n                s_continents[continent].owner = 4;\\n                break;\\n                // if prevOwner == currentOwner, then the owner owns the continent\\n            } else if (i == loopEnd - 1 && owner == prevOwner) {\\n                s_continents[continent].owner = owner;\\n            }\\n            prevOwner = s_territories[i].owner;\\n        }\\n    }\\n\\n    function updateContinents() external onlyControls {\\n        // North America\\n        updateContinentsLoop(0, 9, 0);\\n        // South America\\n        updateContinentsLoop(9, 13, 1);\\n        // Europe\\n        updateContinentsLoop(13, 20, 2);\\n        // Africa\\n        updateContinentsLoop(20, 26, 3);\\n        // Asia\\n        updateContinentsLoop(26, 38, 4);\\n        // Australia\\n        updateContinentsLoop(38, 42, 5);\\n    }\\n\\n    function getAllTerritories() public view returns (Territory_Info[] memory) {\\n        return s_territories;\\n    }\\n\\n    function getTerritories(uint256 territoryId) public view returns (Territory_Info memory) {\\n        return s_territories[territoryId];\\n    }\\n\\n    /* Controls Functions */\\n    function getContinentBonus(uint256 continent) external view returns (uint8) {\\n        return s_continents[continent].troopBonus;\\n    }\\n\\n    function getContinentOwner(uint256 continent) external view returns (uint8) {\\n        return s_continents[continent].owner;\\n    }\\n\\n    function getContinentInfo() public view returns (Continent_Info[6] memory) {\\n        return s_continents;\\n    }\\n\\n    function pushToTerritories(uint8 playerAwarded) external onlyControls {\\n        s_territories.push(Territory_Info(playerAwarded, 1));\\n    }\\n\\n    function addTroopToTerritory(uint256 index) external onlyControls {\\n        s_territories[index].troops++;\\n    }\\n\\n    function removeTroopFromTerritory(uint256 index) external onlyControls {\\n        s_territories[index].troops--;\\n    }\\n\\n    function getNeighbours(uint256 territory) external view onlyControls returns (uint8[] memory) {\\n        return s_neighbours[territory];\\n    }\\n\\n    function getTerritoryOwner(uint256 j) public view returns (uint8 owner) {\\n        return s_territories[j].owner;\\n    }\\n\\n    function getTroopCount(uint256 territory) public view returns (uint256) {\\n        return s_territories[territory].troops;\\n    }\\n\\n    function changeOwner(uint256 territory, uint8 newOwner) external onlyControls {\\n        s_territories[territory].owner = newOwner;\\n    }\\n\\n    function resetData() external onlyControls {\\n        delete s_territories;\\n    }\\n}\\n\",\"keccak256\":\"0x53b2eea5bbd5a9d714ff282f7aec346c017de5c8924fb916e03689c7a2561397\",\"license\":\"MIT\"},\"contracts/Main.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\n\\n/**@title Cryptorisk Main Contract\\n * @author Michael King and Mitchell Spencer\\n * @dev Implements the Chainlink VRF V2\\n */\\n\\ninterface IControls {\\n    function set_players(address payable[] memory) external;\\n\\n    function push_to_territories(uint8 playerAwarded) external;\\n\\n    function get_territory_owner(uint256) external returns (uint256);\\n\\n    function add_troop_to_territory(uint256) external;\\n\\n    function set_main_address(address main) external;\\n\\n    function deploy_control(uint8 amountToDeploy, uint8 location) external returns (bool);\\n\\n    function attack_control(\\n        uint8 territoryOwned,\\n        uint8 territoryAttacking,\\n        uint256 troopQuantity\\n    ) external;\\n\\n    function fortify_control(\\n        uint8 territoryMovingFrom,\\n        uint8 territoryMovingTo,\\n        uint256 troopsMoving\\n    ) external returns (bool);\\n\\n    function get_troops_to_deploy() external view returns (uint8);\\n\\n    function getPlayerTurn() external view returns (address);\\n\\n    function getAttackStatus() external view returns (bool);\\n}\\n\\ncontract Main is VRFConsumerBaseV2 {\\n    /* Type declarations */\\n    enum TerritoryState {\\n        INCOMPLETE,\\n        COMPLETE\\n    }\\n    enum LobbyState {\\n        OPEN,\\n        CLOSED\\n    }\\n    enum GameState {\\n        DEPLOY,\\n        ATTACK,\\n        FORTIFY,\\n        INACTIVE\\n    }\\n\\n    enum mainAddressSent {\\n        TRUE,\\n        FALSE\\n    }\\n\\n    /* Variables */\\n    // Chainlink VRF Variables\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    uint64 private immutable i_subscriptionId;\\n    bytes32 private immutable i_gasLane;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n\\n    // Setup Variables\\n    uint256 private immutable i_entranceFee;\\n    address private immutable controls_address;\\n    address private immutable data_address;\\n\\n    uint8[4] private territoriesAssigned = [0, 0, 0, 0]; // Used to track if player receives enough territory.\\n    uint256[] s_randomWordsArray;\\n    TerritoryState public s_territoryState;\\n    GameState public s_gameState;\\n    LobbyState public s_lobbyState;\\n    address payable[] public s_players;\\n    address public player_turn;\\n    mainAddressSent public s_mainSet;\\n    mapping(address => bool) public duplicateAddresses;\\n    address payable[] public s_lobbyEntrants;\\n\\n    /* Events */\\n    event RequestedTerritoryRandomness(uint256 indexed requestId);\\n    event RequestedTroopRandomness(uint256 indexed requestId);\\n    event ReceivedRandomWords();\\n    event GameSetupComplete();\\n    event PlayerJoinedLobby(address indexed player);\\n    event GameStarting();\\n    event WinnerSentFunds(address indexed player);\\n    event MainReset();\\n\\n    /* Errors */\\n    error Transfer___Failed();\\n\\n    constructor(\\n        address vrfCoordinatorV2,\\n        uint64 subscriptionId,\\n        bytes32 gasLane, // keyHash\\n        uint32 callbackGasLimit,\\n        uint256 entranceFee,\\n        address controls,\\n        address data\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_subscriptionId = subscriptionId;\\n        i_gasLane = gasLane;\\n        i_callbackGasLimit = callbackGasLimit;\\n        i_entranceFee = entranceFee;\\n        s_lobbyState = LobbyState.OPEN;\\n        s_gameState = GameState.INACTIVE;\\n        s_mainSet = mainAddressSent.FALSE;\\n        controls_address = controls;\\n        data_address = data;\\n    }\\n\\n    /* Modifiers */\\n\\n    modifier onlyPlayer() {\\n        require(msg.sender == IControls(controls_address).getPlayerTurn());\\n        _;\\n    }\\n\\n    modifier onlyControls() {\\n        require(msg.sender == controls_address);\\n        _;\\n        //testttt\\n    }\\n\\n    /* Functions */\\n\\n    function enterLobby() public payable {\\n        require(msg.value >= i_entranceFee, \\\"Send More to Enter Lobby\\\");\\n        require(s_lobbyState == LobbyState.OPEN, \\\"Lobby is full\\\"); // require or if statement?\\n        require(duplicateAddresses[msg.sender] == false, \\\"You've already entered the game!\\\");\\n        s_players.push(payable(msg.sender));\\n        s_lobbyEntrants.push(payable(msg.sender));\\n        emit PlayerJoinedLobby(msg.sender);\\n        duplicateAddresses[msg.sender] = true;\\n        if (s_players.length == 4) {\\n            s_lobbyState = LobbyState.CLOSED;\\n            emit GameStarting();\\n            requestRandomness(42);\\n        }\\n    }\\n\\n    // call this function as soon as contract is deployed\\n    function setMainAddress() public {\\n        require(s_mainSet == mainAddressSent.FALSE, \\\"Controls contract has already received Main address\\\");\\n        IControls(controls_address).set_main_address(address(this));\\n        s_mainSet = mainAddressSent.TRUE;\\n    }\\n\\n    function requestRandomness(uint32 num_words) private {\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            num_words\\n        );\\n        if (s_territoryState == TerritoryState.COMPLETE) {\\n            emit RequestedTroopRandomness(requestId);\\n        } else {\\n            emit RequestedTerritoryRandomness(requestId);\\n        }\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256, /* requestId */\\n        uint256[] memory randomWords\\n    ) internal override {\\n        s_randomWordsArray = randomWords;\\n        emit ReceivedRandomWords();\\n        if (s_territoryState == TerritoryState.INCOMPLETE) {\\n            assignTerritory(randomWords);\\n        } else {\\n            assignTroops(randomWords);\\n        }\\n    }\\n\\n    /**\\n     * Function receives array of 42 random words which are then used to assign each territory (0-41) an owner (0-3).\\n     * Mutates a globally declared array s_territories.\\n     */\\n    function assignTerritory(uint256[] memory randomWords) private {\\n        uint8[4] memory playerSelection = [0, 1, 2, 3]; // Eligible players to be assigned territory, each is popped until no players left to receive.\\n        uint8 territoryCap = 10; // Initial cap is 10, moves up to 11 after two players assigned 10.\\n        uint8 remainingPlayers = 4; // Ticks down as players hit their territory cap\\n        uint256 indexAssignedTerritory; // Index of playerSelection that contains a list of eligible players to receive territory.\\n        uint8 playerAwarded; // Stores the player to be awarded territory, for pushing into the s_territories array.'\\n        for (uint256 i = 0; i < randomWords.length; i++) {\\n            indexAssignedTerritory = randomWords[i] % remainingPlayers; // Calculates which index from playerSelection will receive the territory\\n            playerAwarded = playerSelection[indexAssignedTerritory]; // Player to be awarded territory\\n            IControls(controls_address).push_to_territories(playerAwarded);\\n            territoriesAssigned[playerAwarded]++;\\n            if (territoriesAssigned[playerAwarded] == territoryCap) {\\n                delete playerSelection[playerAwarded]; // Removes awarded player from the array upon hitting territory cap.\\n                remainingPlayers--;\\n                if (remainingPlayers == 2) {\\n                    territoryCap = 11; // Moves up instead of down, to remove situation where the cap goes down and we have players already on the cap then receiving too much territory.\\n                }\\n            }\\n        }\\n        s_territoryState = TerritoryState.COMPLETE;\\n        requestRandomness(78);\\n    }\\n\\n    function assignTroops(uint256[] memory randomWords) private {\\n        uint256 randomWordsIndex = 0;\\n        // s_territories.length == 42\\n        // playerTerritoryIndexes.length == 10 or 11\\n        for (uint256 i = 0; i < 4; i++) {\\n            uint256[] memory playerTerritoryIndexes = new uint256[](territoriesAssigned[i]); // Initializes array of indexes for territories owned by player i\\n            uint256 index = 0;\\n            for (uint256 j = 0; j < 42; j++) {\\n                if (IControls(controls_address).get_territory_owner(j) == i) {\\n                    playerTerritoryIndexes[index++] = j;\\n                }\\n            }\\n\\n            for (uint256 j = 0; j < 30 - territoriesAssigned[i]; j++) {\\n                uint256 territoryAssignedTroop = randomWords[randomWordsIndex++] % territoriesAssigned[i];\\n                IControls(controls_address).add_troop_to_territory(playerTerritoryIndexes[territoryAssignedTroop]);\\n            }\\n        }\\n        emit GameSetupComplete();\\n        s_gameState = GameState.DEPLOY;\\n        IControls(controls_address).set_players(s_players);\\n    }\\n\\n    function deploy(uint8 amountToDeploy, uint8 location) public onlyPlayer {\\n        require(s_gameState == GameState.DEPLOY, \\\"It is currently not deploy phase!\\\");\\n        require(\\n            amountToDeploy <= IControls(controls_address).get_troops_to_deploy(),\\n            \\\"You do not have that many troops to deploy!\\\"\\n        );\\n        bool troopsLeft = IControls(controls_address).deploy_control(amountToDeploy, location);\\n        if (troopsLeft == false) {\\n            s_gameState = GameState.ATTACK;\\n        }\\n    }\\n\\n    function attack(\\n        uint8 territoryOwned,\\n        uint8 territoryAttacking,\\n        uint256 troopQuantity\\n    ) public onlyPlayer {\\n        require(IControls(controls_address).getAttackStatus() == false);\\n        require(s_gameState == GameState.ATTACK, \\\"It is currently not attack phase!\\\");\\n        IControls(controls_address).attack_control(territoryOwned, territoryAttacking, troopQuantity);\\n    }\\n\\n    // player clicks this button when they have finished attacking\\n    function finishAttack() public onlyPlayer {\\n        require(IControls(controls_address).getAttackStatus() == false);\\n        s_gameState = GameState.FORTIFY;\\n    }\\n\\n    function fortify(\\n        uint8 territoryMovingFrom,\\n        uint8 territoryMovingTo,\\n        uint256 troopsMoving\\n    ) public onlyPlayer {\\n        require(s_gameState == GameState.FORTIFY, \\\"It is currently not fortify phase!\\\");\\n        require(\\n            IControls(controls_address).fortify_control(territoryMovingFrom, territoryMovingTo, troopsMoving) == true,\\n            \\\"Your fortification attempt failed\\\"\\n        );\\n        s_gameState = GameState.DEPLOY;\\n    }\\n\\n    function payWinner(address winner) public onlyControls returns (bool) {\\n        (bool success, ) = winner.call{value: address(this).balance}(\\\"\\\");\\n        if (!success) {\\n            revert Transfer___Failed();\\n        }\\n        emit WinnerSentFunds(winner);\\n        resetMain();\\n        return success;\\n    }\\n\\n    /** Getter Functions */\\n\\n    function getRandomWordsArray() public view returns (uint256[] memory) {\\n        return s_randomWordsArray;\\n    }\\n\\n    function getRandomWordsArrayIndex(uint256 index) public view returns (uint256) {\\n        return s_randomWordsArray[index];\\n    }\\n\\n    function getSubscriptionId() public view returns (uint64) {\\n        return i_subscriptionId;\\n    }\\n\\n    function getGasLane() public view returns (bytes32) {\\n        return i_gasLane;\\n    }\\n\\n    function getCallbackGasLimit() public view returns (uint32) {\\n        return i_callbackGasLimit;\\n    }\\n\\n    function getTerritoryState() public view returns (TerritoryState) {\\n        return s_territoryState;\\n    }\\n\\n    function getRequestConfirmations() public pure returns (uint256) {\\n        return REQUEST_CONFIRMATIONS;\\n    }\\n\\n    function getPlayer(uint256 index) public view returns (address) {\\n        return s_players[index];\\n    }\\n\\n    function getNumberOfPlayers() public view returns (uint256) {\\n        return s_players.length;\\n    }\\n\\n    function getEntranceFee() public view returns (uint256) {\\n        return i_entranceFee;\\n    }\\n\\n    function getLobbyState() public view returns (LobbyState) {\\n        return s_lobbyState;\\n    }\\n\\n    // Resets everything\\n    function resetMain() internal {\\n        s_lobbyState = LobbyState.OPEN;\\n        s_players = new address payable[](0);\\n        s_gameState = GameState.INACTIVE;\\n        territoriesAssigned = [0, 0, 0, 0];\\n        for (uint256 i = 0; i < s_lobbyEntrants.length; i++) {\\n            duplicateAddresses[s_lobbyEntrants[i]] = false;\\n        }\\n        emit MainReset();\\n    }\\n}\\n\",\"keccak256\":\"0x1f8e7113286aefd4a7d6ad542d76f3a232270f2032f030f2e43c815602da08c3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012b5760003560e01c80637cea559e116100ad578063b087699511610071578063b087699514610332578063b66831e21461034e578063c21c58f81461036a578063d28859101461039a578063d86819d7146103ca5761012b565b80637cea559e1461026757806389290109146102985780638d068884146102c8578063906b1871146102f8578063a3f09a93146103165761012b565b806343a964cf116100f457806343a964cf146101d45780634423b78714610205578063478c4e0e1461023557806353964cc01461023f57806364b6667d1461025d5761012b565b8062371dc5146101305780630452338e1461014e5780631e8d6c3c1461017e57806321eb9dab146101ae5780633bee987f146101ca575b600080fd5b6101386103e6565b6040516101459190611210565b60405180910390f35b61016860048036038101906101639190611263565b61046c565b604051610175919061129f565b60405180910390f35b61019860048036038101906101939190611263565b61049a565b6040516101a5919061129f565b60405180910390f35b6101c860048036038101906101c391906112e6565b6104c8565b005b6101d2610596565b005b6101ee60048036038101906101e99190611263565b6107ef565b6040516101fc929190611322565b60405180910390f35b61021f600480360381019061021a9190611263565b610830565b60405161022c919061129f565b60405180910390f35b61023d61086c565b005b6102476108d6565b60405161025491906113c2565b60405180910390f35b6102656108e9565b005b610281600480360381019061027c9190611263565b610999565b60405161028f9291906113dd565b60405180910390f35b6102b260048036038101906102ad9190611263565b6109da565b6040516102bf91906114b5565b60405180910390f35b6102e260048036038101906102dd9190611263565b610ad0565b6040516102ef9190611506565b60405180910390f35b610300610b33565b60405161030d91906115ec565b60405180910390f35b610330600480360381019061032b9190611263565b610bbc565b005b61034c60048036038101906103479190611666565b610c54565b005b61036860048036038101906103639190611693565b610d45565b005b610384600480360381019061037f91906116d3565b610de1565b604051610391919061129f565b60405180910390f35b6103b460048036038101906103af9190611263565b610e30565b6040516103c19190611713565b60405180910390f35b6103e460048036038101906103df9190611263565b610e5f565b005b60606006805480602002602001604051908101604052809291908181526020016000905b8282101561046357838290600052602060002090600202016040518060400160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016001820154815250508152602001906001019061040a565b50505050905090565b60008082600681106104815761048061172e565b5b0160000160009054906101000a900460ff169050919050565b60008082600681106104af576104ae61172e565b5b0160000160019054906101000a900460ff169050919050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461052257600080fd5b600660405180604001604052808360ff1681526020016001815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160010155505050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105f057600080fd5b60005b60068160ff1610156107ec57600460008260ff16600681106106185761061761172e565b5b0160000160006101000a81548160ff021916908360ff16021790555060008160ff16141561067a57600560008260ff16600681106106595761065861172e565b5b0160000160016101000a81548160ff021916908360ff1602179055506107d9565b60018160ff1614156106c057600260008260ff166006811061069f5761069e61172e565b5b0160000160016101000a81548160ff021916908360ff1602179055506107d8565b60028160ff16141561070657600560008260ff16600681106106e5576106e461172e565b5b0160000160016101000a81548160ff021916908360ff1602179055506107d7565b60038160ff16141561074c57600360008260ff166006811061072b5761072a61172e565b5b0160000160016101000a81548160ff021916908360ff1602179055506107d6565b60048160ff16141561079257600760008260ff16600681106107715761077061172e565b5b0160000160016101000a81548160ff021916908360ff1602179055506107d5565b60058160ff1614156107d457600260008260ff16600681106107b7576107b661172e565b5b0160000160016101000a81548160ff021916908360ff1602179055505b5b5b5b5b5b80806107e49061178c565b9150506105f3565b50565b600681815481106107ff57600080fd5b90600052602060002090600202016000915090508060000160009054906101000a900460ff16908060010154905082565b6000600682815481106108465761084561172e565b5b906000526020600020906002020160000160009054906101000a900460ff169050919050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108c657600080fd5b600660006108d4919061103c565b565b600760149054906101000a900460ff1681565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461094357600080fd5b610951600060096000610ef7565b61095f6009600d6001610ef7565b61096d600d60146002610ef7565b61097b6014601a6003610ef7565b610989601a60266004610ef7565b6109976026602a6005610ef7565b565b600081600681106109a957600080fd5b016000915090508060000160009054906101000a900460ff16908060000160019054906101000a900460ff16905082565b6060600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a3657600080fd5b60088281548110610a4a57610a4961172e565b5b90600052602060002001805480602002602001604051908101604052809291908181526020018280548015610ac457602002820191906000526020600020906000905b82829054906101000a900460ff1660ff1681526020019060010190602082600001049283019260010382029150808411610a8d5790505b50505050509050919050565b610ad8611060565b60068281548110610aec57610aeb61172e565b5b90600052602060002090600202016040518060400160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016001820154815250509050919050565b610b3b61107d565b6000600680602002604051908101604052809291906000905b82821015610bb3578382016040518060400160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff168152505081526020019060010190610b54565b50505050905090565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c1657600080fd5b60068181548110610c2a57610c2961172e565b5b90600052602060002090600202016001016000815480929190610c4c906117b6565b919050555050565b600180811115610c6757610c6661134b565b5b600760149054906101000a900460ff166001811115610c8957610c8861134b565b5b14610c9357600080fd5b8073ffffffffffffffffffffffffffffffffffffffff167ff489abb24c0b02d87da58652d32937ca705601f4d9b20bf80d471f2a74d2c5a560405160405180910390a280600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600760146101000a81548160ff02191690836001811115610d3d57610d3c61134b565b5b021790555050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d9f57600080fd5b8060068381548110610db457610db361172e565b5b906000526020600020906002020160000160006101000a81548160ff021916908360ff1602179055505050565b60088281548110610df157600080fd5b906000526020600020018181548110610e0957600080fd5b9060005260206000209060209182820401919006915091509054906101000a900460ff1681565b600060068281548110610e4657610e4561172e565b5b9060005260206000209060020201600101549050919050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610eb957600080fd5b60068181548110610ecd57610ecc61172e565b5b90600052602060002090600202016001016000815480929190610eef906117ff565b919050555050565b60008060008590505b848110156110345760068181548110610f1c57610f1b61172e565b5b906000526020600020906002020160000160009054906101000a900460ff169250848114158015610f5357508160ff168360ff1614155b15610f9257600460008560ff1660068110610f7157610f7061172e565b5b0160000160006101000a81548160ff021916908360ff160217905550611034565b600185610f9f9190611829565b81148015610fb257508160ff168360ff16145b15610fec578260008560ff1660068110610fcf57610fce61172e565b5b0160000160006101000a81548160ff021916908360ff1602179055505b6006818154811061100057610fff61172e565b5b906000526020600020906002020160000160009054906101000a900460ff169150808061102c906117b6565b915050610f00565b505050505050565b508054600082556002029060005260206000209081019061105d91906110aa565b50565b6040518060400160405280600060ff168152602001600081525090565b6040518060c001604052806006905b6110946110dd565b81526020019060019003908161108c5790505090565b5b808211156110d957600080820160006101000a81549060ff02191690556001820160009055506002016110ab565b5090565b6040518060400160405280600060ff168152602001600060ff1681525090565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600060ff82169050919050565b61113f81611129565b82525050565b6000819050919050565b61115881611145565b82525050565b6040820160008201516111746000850182611136565b506020820151611187602085018261114f565b50505050565b6000611199838361115e565b60408301905092915050565b6000602082019050919050565b60006111bd826110fd565b6111c78185611108565b93506111d283611119565b8060005b838110156112035781516111ea888261118d565b97506111f5836111a5565b9250506001810190506111d6565b5085935050505092915050565b6000602082019050818103600083015261122a81846111b2565b905092915050565b600080fd5b61124081611145565b811461124b57600080fd5b50565b60008135905061125d81611237565b92915050565b60006020828403121561127957611278611232565b5b60006112878482850161124e565b91505092915050565b61129981611129565b82525050565b60006020820190506112b46000830184611290565b92915050565b6112c381611129565b81146112ce57600080fd5b50565b6000813590506112e0816112ba565b92915050565b6000602082840312156112fc576112fb611232565b5b600061130a848285016112d1565b91505092915050565b61131c81611145565b82525050565b60006040820190506113376000830185611290565b6113446020830184611313565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6002811061138b5761138a61134b565b5b50565b600081905061139c8261137a565b919050565b60006113ac8261138e565b9050919050565b6113bc816113a1565b82525050565b60006020820190506113d760008301846113b3565b92915050565b60006040820190506113f26000830185611290565b6113ff6020830184611290565b9392505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600061143e8383611136565b60208301905092915050565b6000602082019050919050565b600061146282611406565b61146c8185611411565b935061147783611422565b8060005b838110156114a857815161148f8882611432565b975061149a8361144a565b92505060018101905061147b565b5085935050505092915050565b600060208201905081810360008301526114cf8184611457565b905092915050565b6040820160008201516114ed6000850182611136565b506020820151611500602085018261114f565b50505050565b600060408201905061151b60008301846114d7565b92915050565b600060069050919050565b600081905092915050565b6000819050919050565b6040820160008201516115576000850182611136565b50602082015161156a6020850182611136565b50505050565b600061157c8383611541565b60408301905092915050565b6000602082019050919050565b61159e81611521565b6115a8818461152c565b92506115b382611537565b8060005b838110156115e45781516115cb8782611570565b96506115d683611588565b9250506001810190506115b7565b505050505050565b6000610180820190506116026000830184611595565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061163382611608565b9050919050565b61164381611628565b811461164e57600080fd5b50565b6000813590506116608161163a565b92915050565b60006020828403121561167c5761167b611232565b5b600061168a84828501611651565b91505092915050565b600080604083850312156116aa576116a9611232565b5b60006116b88582860161124e565b92505060206116c9858286016112d1565b9150509250929050565b600080604083850312156116ea576116e9611232565b5b60006116f88582860161124e565b92505060206117098582860161124e565b9150509250929050565b60006020820190506117286000830184611313565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061179782611129565b915060ff8214156117ab576117aa61175d565b5b600182019050919050565b60006117c182611145565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156117f4576117f361175d565b5b600182019050919050565b600061180a82611145565b9150600082141561181e5761181d61175d565b5b600182039050919050565b600061183482611145565b915061183f83611145565b9250828210156118525761185161175d565b5b82820390509291505056fea264697066735822122065cdf7a1d50518a6c0d6ef3ba9f487a31355da6db9247b64040f77236947fb3364736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1692,
        "contract": "contracts/Data.sol:Data",
        "label": "s_continents",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_struct(Continent_Info)1679_storage)6_storage"
      },
      {
        "astId": 1696,
        "contract": "contracts/Data.sol:Data",
        "label": "s_territories",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_struct(Territory_Info)1684_storage)dyn_storage"
      },
      {
        "astId": 1698,
        "contract": "contracts/Data.sol:Data",
        "label": "controls_address",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 1701,
        "contract": "contracts/Data.sol:Data",
        "label": "s_controlsSet",
        "offset": 20,
        "slot": "7",
        "type": "t_enum(controlsAddressSent)1687"
      },
      {
        "astId": 2000,
        "contract": "contracts/Data.sol:Data",
        "label": "s_neighbours",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_array(t_uint8)dyn_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_array(t_uint8)dyn_storage)dyn_storage": {
        "base": "t_array(t_uint8)dyn_storage",
        "encoding": "dynamic_array",
        "label": "uint8[][]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Continent_Info)1679_storage)6_storage": {
        "base": "t_struct(Continent_Info)1679_storage",
        "encoding": "inplace",
        "label": "struct Data.Continent_Info[6]",
        "numberOfBytes": "192"
      },
      "t_array(t_struct(Territory_Info)1684_storage)dyn_storage": {
        "base": "t_struct(Territory_Info)1684_storage",
        "encoding": "dynamic_array",
        "label": "struct Data.Territory_Info[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint8)dyn_storage": {
        "base": "t_uint8",
        "encoding": "dynamic_array",
        "label": "uint8[]",
        "numberOfBytes": "32"
      },
      "t_enum(controlsAddressSent)1687": {
        "encoding": "inplace",
        "label": "enum Data.controlsAddressSent",
        "numberOfBytes": "1"
      },
      "t_struct(Continent_Info)1679_storage": {
        "encoding": "inplace",
        "label": "struct Data.Continent_Info",
        "members": [
          {
            "astId": 1676,
            "contract": "contracts/Data.sol:Data",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 1678,
            "contract": "contracts/Data.sol:Data",
            "label": "troopBonus",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Territory_Info)1684_storage": {
        "encoding": "inplace",
        "label": "struct Data.Territory_Info",
        "members": [
          {
            "astId": 1681,
            "contract": "contracts/Data.sol:Data",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 1683,
            "contract": "contracts/Data.sol:Data",
            "label": "troops",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}