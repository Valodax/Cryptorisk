{
  "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "data",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "die",
          "type": "uint256"
        }
      ],
      "name": "AttackerDie",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "CurrentPlayer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "die",
          "type": "uint256"
        }
      ],
      "name": "DefenderDie",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "DiceRolled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "GameOver",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "PlayerAttacking",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "PlayerDeploying",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "PlayerFortifying",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "main",
          "type": "address"
        }
      ],
      "name": "ReceivedMain",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "s_requestId",
          "type": "uint256"
        }
      ],
      "name": "RollingDice",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "territoryBeingAttacked",
          "type": "uint256"
        }
      ],
      "name": "TransferTroopsAvailable",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "add_troop_to_territory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "territoryOwned",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "territoryAttacking",
          "type": "uint8"
        },
        {
          "internalType": "uint16",
          "name": "attackingArmies",
          "type": "uint16"
        }
      ],
      "name": "attack_control",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "amountToDeploy",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "location",
          "type": "uint8"
        }
      ],
      "name": "deploy_control",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "territoryMovingFrom",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "territoryMovingTo",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "troopsMoving",
          "type": "uint256"
        }
      ],
      "name": "fortify_control",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gameOver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAttackStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPlayerTurn",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "player",
          "type": "uint256"
        }
      ],
      "name": "getTotalTroops",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "j",
          "type": "uint256"
        }
      ],
      "name": "get_territory_owner",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "get_troops_to_deploy",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8[]",
          "name": "territory",
          "type": "uint8[]"
        }
      ],
      "name": "push_to_territories",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_mainSet",
      "outputs": [
        {
          "internalType": "enum Controls.mainAddressSent",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_playerTurn",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_requestId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_troopsToDeploy",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "main",
          "type": "address"
        }
      ],
      "name": "set_main_address",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable[]",
          "name": "players",
          "type": "address[]"
        }
      ],
      "name": "set_players",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "territoryMovingFrom",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "territoryMovingTo",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "troopsMoving",
          "type": "uint256"
        }
      ],
      "name": "transferTroops",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOfTroops",
          "type": "uint256"
        }
      ],
      "name": "troopTransferAfterAttack",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1ff709ae75a18f6e3fa0a2e3b7089cb5ba286f16d10e5b1282132f9839c9f151",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
    "transactionIndex": 0,
    "gasUsed": "4227504",
    "logsBloom": "0x
    "blockHash": "0xf23dc3a74f79942ff9e68a6004cce82c64fa5e093da56905aafbe2f24bd0abf8",
    "transactionHash": "0x1ff709ae75a18f6e3fa0a2e3b7089cb5ba286f16d10e5b1282132f9839c9f151",
    "logs": [],
    "blockNumber": 5,
    "cumulativeGasUsed": "4227504",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "1",
    "0x79d3d8832d904592c0bf9818b621522c988bb8b0c05cdc3b15aea1b6e8db0c15",
    "30000000",
    "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512"
  ],
  "numDeployments": 1,
  "solcInputHash": "c25ae4566a1e22895c4b2d1e7fc9304e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"die\",\"type\":\"uint256\"}],\"name\":\"AttackerDie\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"CurrentPlayer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"die\",\"type\":\"uint256\"}],\"name\":\"DefenderDie\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DiceRolled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"GameOver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"PlayerAttacking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"PlayerDeploying\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"PlayerFortifying\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"main\",\"type\":\"address\"}],\"name\":\"ReceivedMain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"s_requestId\",\"type\":\"uint256\"}],\"name\":\"RollingDice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"territoryBeingAttacked\",\"type\":\"uint256\"}],\"name\":\"TransferTroopsAvailable\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"add_troop_to_territory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"territoryOwned\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"territoryAttacking\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"attackingArmies\",\"type\":\"uint16\"}],\"name\":\"attack_control\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"amountToDeploy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"location\",\"type\":\"uint8\"}],\"name\":\"deploy_control\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"territoryMovingFrom\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"territoryMovingTo\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"troopsMoving\",\"type\":\"uint256\"}],\"name\":\"fortify_control\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameOver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAttackStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlayerTurn\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"player\",\"type\":\"uint256\"}],\"name\":\"getTotalTroops\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"j\",\"type\":\"uint256\"}],\"name\":\"get_territory_owner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_troops_to_deploy\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"territory\",\"type\":\"uint8[]\"}],\"name\":\"push_to_territories\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_mainSet\",\"outputs\":[{\"internalType\":\"enum Controls.mainAddressSent\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_playerTurn\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_requestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_troopsToDeploy\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"main\",\"type\":\"address\"}],\"name\":\"set_main_address\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"players\",\"type\":\"address[]\"}],\"name\":\"set_players\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"territoryMovingFrom\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"territoryMovingTo\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"troopsMoving\",\"type\":\"uint256\"}],\"name\":\"transferTroops\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOfTroops\",\"type\":\"uint256\"}],\"name\":\"troopTransferAfterAttack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Controls.sol\":\"Controls\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/AutomationBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AutomationBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5d354afa1a97dffe66094397cdcbb0c14713cf3d609d88fd8f9891010e9a351a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/AutomationCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AutomationBase.sol\\\";\\nimport \\\"./interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\\n\",\"keccak256\":\"0x40e5ae0eff4edd0740c1b5590d09c344f84dee031e82d5294563e99603774f80\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/Controls.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"./Main.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ninterface IData {\\n    function initializeContinents() external;\\n\\n    function getContinentOwner(uint256 continent) external view returns (uint8);\\n\\n    function getContinentBonus(uint256 continent) external view returns (uint8);\\n\\n    function pushToTerritories(uint8[] memory territories) external;\\n\\n    function addTroopToTerritory(uint256 index) external;\\n\\n    function updateContinents() external;\\n\\n    function setControlsAddress(address controls) external;\\n\\n    function getNeighbours(uint256 territory) external view returns (uint8[] memory);\\n\\n    function getTerritoryOwner(uint256) external returns (uint8);\\n\\n    function getTroopCount(uint256 territory) external view returns (uint256);\\n\\n    function removeTroopFromTerritory(uint256 index) external;\\n\\n    function changeOwner(uint256 territory, uint8 newOwner) external;\\n\\n    function resetData() external;\\n}\\n\\ncontract Controls is IControls, VRFConsumerBaseV2 {\\n    event CurrentPlayer(address indexed player);\\n    event ReceivedMain(address indexed main);\\n    event PlayerDeploying(address indexed player);\\n    event PlayerAttacking(address indexed player);\\n    event PlayerFortifying(address indexed player);\\n    event DiceRolled();\\n    event RollingDice(uint256 indexed s_requestId);\\n    event GameOver(address indexed winner);\\n    event TransferTroopsAvailable(uint256 indexed territoryBeingAttacked);\\n    event AttackerDie(uint256 indexed die);\\n    event DefenderDie(uint256 indexed die);\\n\\n    // enums\\n\\n    enum mainAddressSent {\\n        TRUE,\\n        FALSE\\n    }\\n\\n    // Chainlink VRF Variables\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    uint64 private immutable i_subscriptionId;\\n    bytes32 private immutable i_gasLane;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n\\n    // variables\\n    uint256 s_recentAttackingArmies;\\n    uint256 s_recentDefendingArmies;\\n    uint8 s_recentTerritoryAttacking;\\n    uint8 s_recentTerritoryBeingAttacked;\\n\\n    address private main_address;\\n    address private data_address;\\n\\n    mainAddressSent public s_mainSet;\\n    uint256 public s_requestId;\\n    uint8 public s_troopsToDeploy;\\n    uint8 public s_playerTurn;\\n\\n    address payable[] s_playersArray;\\n    uint256[] s_diceWords;\\n\\n    bool s_attackSuccess;\\n    bool s_gameIsOver;\\n\\n    constructor(\\n        address vrfCoordinatorV2,\\n        uint64 subscriptionId,\\n        bytes32 gasLane,\\n        uint32 callbackGasLimit,\\n        address data\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_subscriptionId = subscriptionId;\\n        i_gasLane = gasLane;\\n        i_callbackGasLimit = callbackGasLimit;\\n        data_address = data;\\n        s_mainSet = mainAddressSent.FALSE;\\n        s_playerTurn = 3;\\n        s_troopsToDeploy;\\n        s_attackSuccess = false;\\n        s_gameIsOver = false;\\n    }\\n\\n    modifier onlyMain() {\\n        require(msg.sender == main_address);\\n        _;\\n    }\\n\\n    modifier gameIsOver() {\\n        require(s_gameIsOver == true);\\n        _;\\n    }\\n\\n    function set_main_address(address main) external override {\\n        require(s_mainSet == mainAddressSent.FALSE);\\n        emit ReceivedMain(main);\\n        main_address = main;\\n        s_mainSet = mainAddressSent.TRUE;\\n        IData(data_address).setControlsAddress(address(this));\\n    }\\n\\n    function set_players(address payable[] memory players) external override onlyMain {\\n        s_playersArray = players;\\n        IData(data_address).initializeContinents();\\n        next_player();\\n    }\\n\\n    function next_player() private {\\n        s_playerTurn++;\\n        if (s_playerTurn == s_playersArray.length) {\\n            s_playerTurn = 0;\\n        }\\n        IData(data_address).updateContinents();\\n        s_troopsToDeploy = 0;\\n        for (uint256 c; c < 6; c++) {\\n            if (IData(data_address).getContinentOwner(c) == s_playerTurn) {\\n                s_troopsToDeploy += IData(data_address).getContinentBonus(c);\\n            }\\n        }\\n\\n        uint8 totalTerritories;\\n        for (uint256 i; i < 42; i++) {\\n            if (IData(data_address).getTerritoryOwner(i) == s_playerTurn) {\\n                totalTerritories++;\\n            }\\n        }\\n        if (totalTerritories < 9) {\\n            s_troopsToDeploy += 3;\\n        } else {\\n            s_troopsToDeploy += totalTerritories / 3;\\n        }\\n    }\\n\\n    function deploy_control(uint8 amountToDeploy, uint8 location) external override onlyMain returns (bool) {\\n        require(IData(data_address).getTerritoryOwner(location) == s_playerTurn, \\\"You do not own this territory\\\");\\n        emit PlayerDeploying(s_playersArray[s_playerTurn]);\\n        for (uint256 i; i < amountToDeploy; i++) {\\n            IData(data_address).addTroopToTerritory(location);\\n        }\\n        s_troopsToDeploy -= amountToDeploy;\\n        if (s_troopsToDeploy == 0) {\\n            return false; // returns false if all troops have not been deployed\\n        }\\n        return true;\\n    }\\n\\n    function attack_control(\\n        uint8 territoryOwned,\\n        uint8 territoryAttacking,\\n        uint16 attackingArmies // could\\n    ) external override onlyMain {\\n        require(\\n            validate_attackable(territoryOwned, territoryAttacking),\\n            \\\"Territory you are trying to attack is not a neighbour!\\\"\\n        );\\n        require(\\n            (attackingArmies < IData(data_address).getTroopCount(territoryOwned)) && (attackingArmies > 0),\\n            \\\"You cannot attack with that many troops!\\\"\\n        );\\n        emit PlayerAttacking(s_playersArray[s_playerTurn]);\\n\\n        uint256 defendingArmies = IData(data_address).getTroopCount(territoryAttacking);\\n        if (defendingArmies >= 2) {\\n            defendingArmies = 2;\\n        } else {\\n            defendingArmies = 1;\\n        }\\n        uint8 num_words = getArmies(attackingArmies, defendingArmies); // attackingArmies, defendingArmies not returning correct numbers\\n        console.log(\\\"num words:\\\", num_words);\\n        s_recentTerritoryAttacking = territoryOwned;\\n        s_recentTerritoryBeingAttacked = territoryAttacking;\\n        s_recentAttackingArmies = attackingArmies;\\n        s_recentDefendingArmies = defendingArmies;\\n        diceRoller(num_words);\\n\\n        // 1. Player clicks on their own territory\\n        // 2. Player clicks on enemy territory.\\n        // 3. Player chooses how many troops to attack with.\\n        // 4. Player attacks\\n    }\\n\\n    function battle(\\n        uint256 attackingArmies,\\n        uint256 defendingArmies,\\n        uint256 territoryAttacking,\\n        uint256 territoryBeingAttacked,\\n        uint256[] memory randomWords\\n    ) private {\\n        uint256[] memory attackerRolls = new uint256[](attackingArmies);\\n        uint256[] memory defenderRolls = new uint256[](defendingArmies);\\n        for (uint256 i; i < (attackingArmies + defendingArmies); ++i) {\\n            if (i < attackingArmies) {\\n                attackerRolls[i] = randomWords[i] % 6;\\n            } else {\\n                defenderRolls[i - attackingArmies] = randomWords[i] % 6;\\n            }\\n        }\\n        // Sorting the two rolls arrays\\n        insertionSort(attackerRolls);\\n        insertionSort(defenderRolls);\\n\\n        for (uint256 i; i < attackerRolls.length; ++i) {}\\n        for (uint256 i; i < defenderRolls.length; ++i) {}\\n\\n        uint256 attacks; // either 1 or 2\\n        if (attackingArmies > defendingArmies) {\\n            attacks = defendingArmies;\\n        } else {\\n            attacks = attackingArmies;\\n        }\\n        for (uint256 i; i < attacks; ++i) {\\n            console.log(\\\"attacker rolls\\\", attackerRolls[i]);\\n            console.log(\\\"defender rolls\\\", defenderRolls[i]);\\n            if (attackerRolls[i] > defenderRolls[i]) {\\n                // 3 v 1 , 2 v 1 , 1 v 1, 2 v 2, 2 v 1, 1 v 1 //\\n                // attacker wins, defender dies\\n                emit AttackerDie(attackerRolls[i]);\\n                emit DefenderDie(defenderRolls[i]);\\n                IData(data_address).removeTroopFromTerritory(territoryBeingAttacked);\\n                if (\\n                    // Attacker has killed all troops in the defending territory\\n                    IData(data_address).getTroopCount(territoryBeingAttacked) == 0\\n                ) {\\n                    // Territory now becomes Attackers\\n                    IData(data_address).changeOwner(territoryBeingAttacked, s_playerTurn);\\n                    IData(data_address).removeTroopFromTerritory(territoryAttacking);\\n                    IData(data_address).addTroopToTerritory(territoryBeingAttacked);\\n                    // Attacker can select how many troops he wants to deploy to territory\\n                    s_attackSuccess = true;\\n                    uint256 defeatedPlayer = IData(data_address).getTerritoryOwner(territoryBeingAttacked);\\n                    if (getTotalTroops(defeatedPlayer) == 0) {\\n                        // if that was the last armies of the player\\n                        killPlayer(defeatedPlayer); // player is removed from the game\\n                    }\\n                    if (s_playersArray.length == 1) {\\n                        gameOver();\\n                        s_gameIsOver = true;\\n                    } else {\\n                        emit TransferTroopsAvailable(territoryBeingAttacked);\\n                    }\\n                }\\n            } else {\\n                // defender wins\\n                emit AttackerDie(attackerRolls[i]);\\n                emit DefenderDie(defenderRolls[i]);\\n                IData(data_address).removeTroopFromTerritory(territoryAttacking);\\n            }\\n        }\\n    }\\n\\n    // This is a function that is executed when a button is clicked.\\n    function troopTransferAfterAttack(uint256 amountOfTroops) public {\\n        require(s_attackSuccess);\\n        require(s_playersArray[s_playerTurn] == msg.sender);\\n        require(\\n            amountOfTroops < IData(data_address).getTroopCount(s_recentTerritoryAttacking) && (amountOfTroops > 0),\\n            \\\"You cannot move that amount of troops!\\\"\\n        );\\n\\n        for (uint256 i; i < amountOfTroops; i++) {\\n            IData(data_address).addTroopToTerritory(s_recentTerritoryBeingAttacked);\\n            IData(data_address).removeTroopFromTerritory(s_recentTerritoryAttacking);\\n        }\\n        s_attackSuccess = false;\\n    }\\n\\n    function diceRoller(uint32 num_words) private {\\n        s_requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            num_words\\n        );\\n        emit RollingDice(s_requestId);\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256, /* requestId */\\n        uint256[] memory randomWords\\n    ) internal override {\\n        s_diceWords = randomWords;\\n        emit DiceRolled();\\n        battle(\\n            s_recentAttackingArmies,\\n            s_recentDefendingArmies,\\n            s_recentTerritoryAttacking,\\n            s_recentTerritoryBeingAttacked,\\n            randomWords\\n        );\\n    }\\n\\n    function transferTroops(\\n        uint8 territoryMovingFrom,\\n        uint8 territoryMovingTo,\\n        uint256 troopsMoving\\n    ) public {\\n        require(\\n            (troopsMoving < IData(data_address).getTroopCount(territoryMovingFrom)) && (troopsMoving > 0),\\n            \\\"You cannot move that amount of troops!\\\"\\n        );\\n\\n        for (uint256 i; i < troopsMoving; i++) {\\n            IData(data_address).addTroopToTerritory(territoryMovingTo);\\n            IData(data_address).removeTroopFromTerritory(territoryMovingFrom);\\n        }\\n    }\\n\\n    function fortify_control(\\n        uint8 territoryMovingFrom,\\n        uint8 territoryMovingTo,\\n        uint256 troopsMoving\\n    ) external override onlyMain returns (bool) {\\n        //need to add parameters\\n        emit PlayerFortifying(s_playersArray[s_playerTurn]);\\n        require(\\n            validateFortifiable(territoryMovingFrom, territoryMovingTo),\\n            \\\"Territory you are trying move troops to is not one of your neighbours!\\\"\\n        );\\n        transferTroops(territoryMovingFrom, territoryMovingTo, troopsMoving);\\n\\n        next_player();\\n        return true;\\n    }\\n\\n    function validate_owner(uint8 territory_clicked) internal returns (bool) {\\n        uint8 territory_owner = IData(data_address).getTerritoryOwner(territory_clicked);\\n        if (territory_owner == s_playerTurn) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function validateFortifiable(uint8 territoryMovingFrom, uint8 territoryMovingTo) internal returns (bool) {\\n        require(IData(data_address).getTroopCount(territoryMovingFrom) > 1, \\\"You must have more than 1 troop to move!\\\");\\n        require(\\n            validate_owner(territoryMovingFrom) && validate_owner(territoryMovingTo),\\n            \\\"You must own both territories to move troops!\\\"\\n        );\\n        uint8[] memory neighbours = IData(data_address).getNeighbours(territoryMovingFrom);\\n        for (uint256 i; i < 6; i++) {\\n            if ((territoryMovingTo == neighbours[i])) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function validate_attackable(uint8 territoryOwned, uint8 territoryAttacking) internal returns (bool) {\\n        require(\\n            IData(data_address).getTroopCount(territoryOwned) > 1,\\n            \\\"You must have at least 1 troop remaining in your territory to attack!\\\"\\n        );\\n        require(!validate_owner(territoryAttacking), \\\"You cannot attack your own territory!\\\"); //checks if the player owns the territory they are trying to attack\\n        uint8[] memory neighbours = IData(data_address).getNeighbours(territoryOwned);\\n        for (uint256 i; i < 6; i++) {\\n            if ((territoryAttacking == neighbours[i])) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function getArmies(uint256 attackingArmies, uint256 defendingArmies) private pure returns (uint8) {\\n        uint8 num_words;\\n        if (attackingArmies == 3) {\\n            num_words = 3;\\n        } else if (attackingArmies == 2) {\\n            num_words = 2;\\n        } else {\\n            num_words = 1;\\n        }\\n        if (defendingArmies == 2) {\\n            num_words += 2;\\n        } else {\\n            num_words += 1;\\n        }\\n        return num_words;\\n    }\\n\\n    function gameOver() public gameIsOver {\\n        address winner = s_playersArray[s_playerTurn];\\n        emit GameOver(winner);\\n        (bool success, ) = main_address.call(abi.encodeWithSignature(\\\"payWinner(address)\\\", winner));\\n        require(success, \\\"call to main failed\\\");\\n        IData(data_address).resetData();\\n        resetControls();\\n    }\\n\\n    function resetControls() private {\\n        s_playerTurn = 3;\\n        s_troopsToDeploy;\\n        s_attackSuccess = false;\\n        s_gameIsOver = false;\\n        s_playersArray = new address payable[](0);\\n    }\\n\\n    function add_troop_to_territory(uint256 index) external override onlyMain {\\n        IData(data_address).addTroopToTerritory(index);\\n    }\\n\\n    function killPlayer(uint256 deadPlayer) private {\\n        delete s_playersArray[deadPlayer];\\n    }\\n\\n    function getTotalTroops(uint256 player) public returns (uint256) {\\n        uint256 totalTroops;\\n        for (uint256 i; i < 42; i++) {\\n            if (IData(data_address).getTerritoryOwner(i) == player) {\\n                totalTroops += IData(data_address).getTroopCount(i);\\n            }\\n        }\\n        return totalTroops;\\n    }\\n\\n    function get_territory_owner(uint256 j) external override onlyMain returns (uint256) {\\n        return IData(data_address).getTerritoryOwner(j);\\n    }\\n\\n    function get_troops_to_deploy() public view override returns (uint8) {\\n        return s_troopsToDeploy;\\n    }\\n\\n    function getPlayerTurn() public view override returns (address) {\\n        return s_playersArray[s_playerTurn];\\n    }\\n\\n    function getRequestId() public view returns (uint256) {\\n        return s_requestId;\\n    }\\n\\n    function push_to_territories(uint8[] memory territory) external onlyMain {\\n        IData(data_address).pushToTerritories(territory);\\n    }\\n\\n    function getAttackStatus() public view override returns (bool) {\\n        return s_attackSuccess;\\n    }\\n\\n    function insertionSort(uint256[] memory arr) private pure {\\n        uint256 i;\\n        uint256 key;\\n        int256 j;\\n        for (i = 1; i < arr.length; ++i) {\\n            key = arr[i];\\n            j = int256(i - 1);\\n            while (j >= 0 && arr[uint256(j)] < key) {\\n                arr[uint256(j + 1)] = arr[uint256(j)];\\n                --j;\\n            }\\n            arr[uint256(j + 1)] = key;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb8ecf470ad3357a6fdbd8ee4ecefb0ab03dad5e6cc922d942ed6733e1199362f\",\"license\":\"MIT\"},\"contracts/Main.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/AutomationCompatible.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n/**@title Cryptorisk Main Contract\\n * @author Michael King and Mitchell Spencer\\n * @dev Implements the Chainlink VRF V2\\n */\\n\\ninterface IControls {\\n    function set_players(address payable[] memory) external;\\n\\n    function push_to_territories(uint8[] memory territories) external;\\n\\n    function get_territory_owner(uint256) external returns (uint256);\\n\\n    function add_troop_to_territory(uint256) external;\\n\\n    function set_main_address(address main) external;\\n\\n    function deploy_control(uint8 amountToDeploy, uint8 location) external returns (bool);\\n\\n    function attack_control(\\n        uint8 territoryOwned,\\n        uint8 territoryAttacking,\\n        uint16 troopQuantity\\n    ) external;\\n\\n    function fortify_control(\\n        uint8 territoryMovingFrom,\\n        uint8 territoryMovingTo,\\n        uint256 troopsMoving\\n    ) external returns (bool);\\n\\n    function get_troops_to_deploy() external view returns (uint8);\\n\\n    function getPlayerTurn() external view returns (address);\\n\\n    function getAttackStatus() external view returns (bool);\\n}\\n\\ncontract Main is VRFConsumerBaseV2, AutomationCompatibleInterface {\\n    /* Type declarations */\\n    enum LobbyState {\\n        OPEN,\\n        CLOSED\\n    }\\n    enum GameState {\\n        DEPLOY,\\n        ATTACK,\\n        FORTIFY,\\n        INACTIVE\\n    }\\n    enum RandomState {\\n        RECEIVED,\\n        NOT\\n    }\\n\\n    enum mainAddressSent {\\n        TRUE,\\n        FALSE\\n    }\\n\\n    /* Variables */\\n    // Chainlink VRF Variables\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    uint64 private immutable i_subscriptionId;\\n    bytes32 private immutable i_gasLane;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n\\n    // Setup Variables\\n    uint256 private immutable i_entranceFee;\\n    address private immutable controls_address;\\n    address private immutable data_address;\\n\\n    // Used to track if player receives enough territory.\\n    GameState public s_gameState;\\n    LobbyState public s_lobbyState;\\n    RandomState public s_hasRandomWords;\\n    address payable[] public s_players;\\n    address public player_turn;\\n    mainAddressSent public s_mainSet;\\n    mapping(address => bool) public duplicateAddresses;\\n    address payable[] public s_lobbyEntrants;\\n    uint256 randomWord;\\n\\n    /* Events */\\n    event RequestedRandomness(uint256 indexed requestId);\\n    event gotRandomness();\\n    event GameSetupComplete();\\n    event PlayerJoinedLobby(address indexed player);\\n    event GameStarting();\\n    event WinnerSentFunds(address indexed player);\\n    event MainReset();\\n\\n    /* Errors */\\n    error Transfer___Failed();\\n\\n    constructor(\\n        address vrfCoordinatorV2,\\n        uint64 subscriptionId,\\n        bytes32 gasLane, // keyHash\\n        uint32 callbackGasLimit,\\n        uint256 entranceFee,\\n        address controls,\\n        address data\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_subscriptionId = subscriptionId;\\n        i_gasLane = gasLane;\\n        i_callbackGasLimit = callbackGasLimit;\\n        i_entranceFee = entranceFee;\\n        s_lobbyState = LobbyState.OPEN;\\n        s_gameState = GameState.INACTIVE;\\n        s_mainSet = mainAddressSent.FALSE;\\n        controls_address = controls;\\n        data_address = data;\\n    }\\n\\n    /* Modifiers */\\n\\n    modifier onlyPlayer() {\\n        require(msg.sender == IControls(controls_address).getPlayerTurn());\\n        _;\\n    }\\n\\n    modifier onlyControls() {\\n        require(msg.sender == controls_address);\\n        _;\\n        //testttt\\n    }\\n\\n    /* Functions */\\n\\n    function enterLobby() public payable {\\n        require(msg.value >= i_entranceFee, \\\"Send More to Enter Lobby\\\");\\n        require(s_lobbyState == LobbyState.OPEN, \\\"Lobby is full\\\"); // require or if statement?\\n        require(duplicateAddresses[msg.sender] == false, \\\"You've already entered the game!\\\");\\n        s_players.push(payable(msg.sender));\\n        s_lobbyEntrants.push(payable(msg.sender));\\n        emit PlayerJoinedLobby(msg.sender);\\n        duplicateAddresses[msg.sender] = true;\\n        if (s_players.length == 4) {\\n            s_lobbyState = LobbyState.CLOSED;\\n            emit GameStarting();\\n            //requestRandomness();\\n        }\\n    }\\n\\n    function getRandomNumber() public payable {\\n        requestRandomness();\\n    }\\n\\n    function generateTerritoryAndTroops() public payable {\\n        randomWordsArray();\\n    }\\n\\n    // call this function as soon as contract is deployed\\n    function setMainAddress() public {\\n        require(s_mainSet == mainAddressSent.FALSE, \\\"Controls contract has already received Main address\\\");\\n        IControls(controls_address).set_main_address(address(this));\\n        s_mainSet = mainAddressSent.TRUE;\\n    }\\n\\n    function requestRandomness() private {\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            1\\n        );\\n        emit RequestedRandomness(requestId);\\n    }\\n\\n    function randomWordsArray() private {\\n        uint256[] memory territories = new uint256[](42);\\n        uint256 randomLength = numDigits(randomWord);\\n        uint256 num;\\n        uint256 index;\\n        uint256 i;\\n        while (i < 42) {\\n            num = ((randomWord / (10**index)) % 10) + ((randomWord / (10**(index + 1))) % 10) * 10; // cheaper by 4k gas\\n            territories[i] = num;\\n            ++i;\\n            if (randomLength > 3) {\\n                if (index == randomLength - 2) {\\n                    // this might be causing overflow?\\n                    index = 0;\\n                }\\n            }\\n\\n            ++index;\\n        }\\n        assignTerritory(territories);\\n    }\\n\\n    function checkUpkeep(\\n        bytes memory /*checkData*/\\n    )\\n        public\\n        view\\n        override\\n        returns (\\n            bool upkeepNeeded,\\n            bytes memory /* performData */\\n        )\\n    {\\n        bool lobbyClosed = (s_lobbyState == LobbyState.CLOSED);\\n        bool hasPlayers = (s_players.length == 4);\\n        bool hasBalance = address(this).balance > 0;\\n        bool hasRandomness = (s_hasRandomWords == RandomState.RECEIVED);\\n        upkeepNeeded = (lobbyClosed && hasPlayers && hasBalance && hasRandomness);\\n    }\\n\\n    function performUpkeep(\\n        bytes calldata /* performData */\\n    ) external override {\\n        randomWordsArray();\\n        emit GameSetupComplete();\\n        s_gameState = GameState.DEPLOY;\\n        IControls(controls_address).set_players(s_players);\\n    }\\n\\n    function testKeeper() public {\\n        //HERE IT IS! :) ty\\n        randomWordsArray();\\n        emit GameSetupComplete();\\n        s_gameState = GameState.DEPLOY;\\n        IControls(controls_address).set_players(s_players);\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256, /* requestId */\\n        uint256[] memory randomWords\\n    ) internal override {\\n        randomWord = randomWords[0];\\n        emit gotRandomness();\\n    }\\n\\n    /**\\n     * Function receives array of 42 random words which are then used to assign each territory (0-41) an owner (0-3).\\n     * Mutates a globally declared array s_territories.\\n     */\\n\\n    function assignTerritory(uint256[] memory territories) private {\\n        uint8[] memory territoriesArrayForData = new uint8[](42);\\n        uint256[4] memory territoriesAssigned;\\n        uint8[4] memory playerSelection = [0, 1, 2, 3];\\n        uint8 territoryCap = 10; // Initial cap is 10, moves up to 11 after two players assigned 10.\\n        uint8 remainingPlayers = 4; // Ticks down as players hit their territory cap\\n        uint256 indexAssignedTerritory; // Index of playerSelection that contains a list of eligible players to receive territory.\\n        uint8 playerAwarded; // Stores the player to be awarded territory, for pushing into the s_territories array.'\\n        for (uint256 i; i < 42; ++i) {\\n            indexAssignedTerritory = territories[i] % remainingPlayers; // Calculates which index from playerSelection will receive the territory\\n            playerAwarded = playerSelection[indexAssignedTerritory]; // Player to be awarded territory\\n            territoriesArrayForData[i] = playerAwarded;\\n            ++territoriesAssigned[playerAwarded];\\n            if (territoriesAssigned[playerAwarded] == territoryCap) {\\n                delete playerSelection[indexAssignedTerritory]; // Removes awarded player from the array upon hitting territory cap.\\n                playerSelection[indexAssignedTerritory] = playerSelection[playerSelection.length - 1];\\n                --remainingPlayers;\\n                if (remainingPlayers == 2) {\\n                    territoryCap = 11; // Moves up instead of down, to remove situation where the cap goes down and we have players already on the cap then receiving too much territory.\\n                }\\n            }\\n        }\\n        IControls(controls_address).push_to_territories(territoriesArrayForData);\\n        assignTroops(territories, territoriesAssigned);\\n    }\\n\\n    function assignTroops(uint256[] memory troops, uint256[4] memory territoriesAssigned) private {\\n        uint256 randomWordsIndex;\\n        uint256 index0;\\n        uint256[] memory playerTerritoryIndexes0 = new uint256[](territoriesAssigned[0]);\\n        uint256 index1;\\n        uint256[] memory playerTerritoryIndexes1 = new uint256[](territoriesAssigned[1]);\\n        uint256 index2;\\n        uint256[] memory playerTerritoryIndexes2 = new uint256[](territoriesAssigned[2]);\\n        uint256 index3;\\n        uint256[] memory playerTerritoryIndexes3 = new uint256[](territoriesAssigned[3]);\\n        for (uint256 j; j < 42; ++j) {\\n            if (IControls(controls_address).get_territory_owner(j) == 0) {\\n                playerTerritoryIndexes0[index0++] = j;\\n            } else if (IControls(controls_address).get_territory_owner(j) == 1) {\\n                playerTerritoryIndexes1[index1++] = j;\\n            } else if (IControls(controls_address).get_territory_owner(j) == 2) {\\n                playerTerritoryIndexes2[index2++] = j;\\n            } else if (IControls(controls_address).get_territory_owner(j) == 3) {\\n                playerTerritoryIndexes3[index3++] = j;\\n            }\\n        }\\n        for (uint256 j; j < 20; ++j) {\\n            uint256 territoryAssignedTroop = troops[randomWordsIndex] % territoriesAssigned[0];\\n            if (territoriesAssigned[0] == 11 && j != 19) {\\n                IControls(controls_address).add_troop_to_territory(playerTerritoryIndexes0[territoryAssignedTroop]);\\n            } else if (territoriesAssigned[0] == 10) {\\n                IControls(controls_address).add_troop_to_territory(playerTerritoryIndexes0[territoryAssignedTroop]);\\n            }\\n            territoryAssignedTroop = troops[randomWordsIndex] % territoriesAssigned[1];\\n            if (territoriesAssigned[1] == 11 && j != 19) {\\n                IControls(controls_address).add_troop_to_territory(playerTerritoryIndexes1[territoryAssignedTroop]);\\n            } else if (territoriesAssigned[1] == 10) {\\n                IControls(controls_address).add_troop_to_territory(playerTerritoryIndexes1[territoryAssignedTroop]);\\n            }\\n            territoryAssignedTroop = troops[randomWordsIndex] % territoriesAssigned[2];\\n            if (territoriesAssigned[2] == 11 && j != 19) {\\n                IControls(controls_address).add_troop_to_territory(playerTerritoryIndexes2[territoryAssignedTroop]);\\n            } else if (territoriesAssigned[2] == 10) {\\n                IControls(controls_address).add_troop_to_territory(playerTerritoryIndexes2[territoryAssignedTroop]);\\n            }\\n            territoryAssignedTroop = troops[randomWordsIndex++] % territoriesAssigned[3];\\n            if (territoriesAssigned[3] == 11 && j != 19) {\\n                IControls(controls_address).add_troop_to_territory(playerTerritoryIndexes3[territoryAssignedTroop]);\\n            } else if (territoriesAssigned[3] == 10) {\\n                IControls(controls_address).add_troop_to_territory(playerTerritoryIndexes3[territoryAssignedTroop]);\\n            }\\n        }\\n    }\\n\\n    function deploy(uint8 amountToDeploy, uint8 location) public onlyPlayer {\\n        require(s_gameState == GameState.DEPLOY, \\\"It is currently not deploy phase!\\\");\\n        require(\\n            amountToDeploy <= IControls(controls_address).get_troops_to_deploy(),\\n            \\\"You do not have that many troops to deploy!\\\"\\n        );\\n        bool troopsLeft = IControls(controls_address).deploy_control(amountToDeploy, location);\\n        if (troopsLeft == false) {\\n            s_gameState = GameState.ATTACK;\\n        }\\n    }\\n\\n    function attack(\\n        uint8 useThisTerritory,\\n        uint8 toAttackThisTerritory,\\n        uint16 withTroopQuantity\\n    ) public onlyPlayer {\\n        require(IControls(controls_address).getAttackStatus() == false);\\n        require(s_gameState == GameState.ATTACK, \\\"It is currently not attack phase!\\\");\\n        IControls(controls_address).attack_control(useThisTerritory, toAttackThisTerritory, withTroopQuantity);\\n    }\\n\\n    // player clicks this button when they have finished attacking\\n    function finishAttack() public onlyPlayer {\\n        require(IControls(controls_address).getAttackStatus() == false);\\n        s_gameState = GameState.FORTIFY;\\n    }\\n\\n    function fortify(\\n        uint8 territoryMovingFrom,\\n        uint8 territoryMovingTo,\\n        uint256 troopsMoving\\n    ) public onlyPlayer {\\n        require(s_gameState == GameState.FORTIFY, \\\"It is currently not fortify phase!\\\");\\n        require(\\n            IControls(controls_address).fortify_control(territoryMovingFrom, territoryMovingTo, troopsMoving) == true,\\n            \\\"Your fortification attempt failed\\\"\\n        );\\n        s_gameState = GameState.DEPLOY;\\n    }\\n\\n    function payWinner(address winner) public onlyControls returns (bool) {\\n        (bool success, ) = winner.call{value: address(this).balance}(\\\"\\\");\\n        if (!success) {\\n            revert Transfer___Failed();\\n        }\\n        emit WinnerSentFunds(winner);\\n        resetMain();\\n        return success;\\n    }\\n\\n    /** Pure Functions */\\n\\n    function numDigits(uint256 number) public pure returns (uint256) {\\n        uint256 digits;\\n        //if (number < 0) digits = 1; // enable this line if '-' counts as a digit\\n        while (number != 0) {\\n            number /= 10;\\n            ++digits;\\n        }\\n        return digits;\\n    }\\n\\n    function getDigitAtIndex(uint256 n, uint256 index) public pure returns (uint256) {\\n        return (n / (10**index)) % 10;\\n    }\\n\\n    /** Getter Functions */\\n\\n    // function getRandomWordsArrayTerritories() public view returns (uint256[] memory) {\\n    //     return s_randomWordsArrayTerritories;\\n    // }\\n\\n    // function getRandomWordsArrayTroops() public view returns (uint256[] memory) {\\n    //     return s_randomWordsArray;\\n    // }\\n\\n    // function getRandomWordsArrayIndexTerritories(uint256 index) public view returns (uint256) {\\n    //     return s_randomWordsArrayTerritories[index];\\n    // }\\n\\n    function getRandomWord() public view returns (uint256) {\\n        return randomWord;\\n    }\\n\\n    function getSubscriptionId() public view returns (uint64) {\\n        return i_subscriptionId;\\n    }\\n\\n    function getGasLane() public view returns (bytes32) {\\n        return i_gasLane;\\n    }\\n\\n    function getCallbackGasLimit() public view returns (uint32) {\\n        return i_callbackGasLimit;\\n    }\\n\\n    function getRequestConfirmations() public pure returns (uint256) {\\n        return REQUEST_CONFIRMATIONS;\\n    }\\n\\n    function getPlayer(uint256 index) public view returns (address) {\\n        return s_players[index];\\n    }\\n\\n    function getNumberOfPlayers() public view returns (uint256) {\\n        return s_players.length;\\n    }\\n\\n    function getEntranceFee() public view returns (uint256) {\\n        return i_entranceFee;\\n    }\\n\\n    function getLobbyState() public view returns (LobbyState) {\\n        return s_lobbyState;\\n    }\\n\\n    // Resets everything\\n    function resetMain() internal {\\n        s_lobbyState = LobbyState.OPEN;\\n        s_players = new address payable[](0);\\n        s_gameState = GameState.INACTIVE;\\n        for (uint256 i; i < s_lobbyEntrants.length; ++i) {\\n            duplicateAddresses[s_lobbyEntrants[i]] = false;\\n        }\\n        emit MainReset();\\n    }\\n\\n    // function insertionSort(uint8[4] memory arr) private pure {\\n    //     uint256 i;\\n    //     uint256 key;\\n    //     int256 j;\\n    //     for (i = 1; i < arr.length; ++i) {\\n    //         key = arr[i];\\n    //         j = int256(i - 1);\\n    //         while (j >= 0 && arr[uint256(j)] < key) {\\n    //             arr[uint256(j + 1)] = arr[uint256(j)];\\n    //             --j;\\n    //         }\\n    //         arr[uint256(j + 1)] = uint8(key);\\n    //     }\\n    // }\\n}\\n\",\"keccak256\":\"0xbd9ca85d0328744e4457da2fefd060e0dad098e9818f90fc0d937e90bf1375c3\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101375760003560e01c8063780b5bf9116100b8578063af0b94d41161007c578063af0b94d414610326578063b6d5bc6f14610344578063bdb337d114610362578063c53752101461036c578063c758c1261461039c578063e89e106a146103b857610137565b8063780b5bf914610270578063785776d2146102a05780638d2ed997146102bc578063975e815c146102da578063ada2c7a8146102f657610137565b806323c288e7116100ff57806323c288e7146101e05780632572cd6e146101fc5780633381c5b91461021a5780635a1095f31461023657806366f987951461025257610137565b8063041dcfcc1461013c57806305ca49b01461016c578063077001b9146101885780631c6f86cc146101a65780631fe543e3146101c4575b600080fd5b61015660048036038101906101519190613551565b6103d6565b60405161016391906135ac565b60405180910390f35b61018660048036038101906101819190613625565b6106da565b005b610190610857565b60405161019d919061366b565b60405180910390f35b6101ae610861565b6040516101bb9190613695565b60405180910390f35b6101de60048036038101906101d99190613835565b610874565b005b6101fa60048036038101906101f59190613891565b610934565b005b610204610b6a565b60405161021191906138f3565b60405180910390f35b610234600480360381019061022f91906139d1565b610bc2565b005b610250600480360381019061024b9190613a1a565b610caa565b005b61025a610d92565b6040516102679190613695565b60405180910390f35b61028a60048036038101906102859190613a1a565b610da5565b604051610297919061366b565b60405180910390f35b6102ba60048036038101906102b59190613a1a565b610eb6565b005b6102c46111d3565b6040516102d19190613abe565b60405180910390f35b6102f460048036038101906102ef9190613b13565b6111e6565b005b610310600480360381019061030b9190613891565b61158e565b60405161031d91906135ac565b60405180910390f35b61032e6116e2565b60405161033b91906135ac565b60405180910390f35b61034c6116f9565b6040516103599190613695565b60405180910390f35b61036a611710565b005b61038660048036038101906103819190613a1a565b6119b0565b604051610393919061366b565b60405180910390f35b6103b660048036038101906103b19190613c67565b611b4c565b005b6103c0611c48565b6040516103cd919061366b565b60405180910390f35b600060028054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461043057600080fd5b600560019054906101000a900460ff1660ff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634423b787846040518263ffffffff1660e01b815260040161049e9190613ceb565b602060405180830381600087803b1580156104b857600080fd5b505af11580156104cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f09190613d1b565b60ff1614610533576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052a90613da5565b60405180910390fd5b6006600560019054906101000a900460ff1660ff168154811061055957610558613dc5565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fe92878f508d0c22d489dcd5f4ee8376a415f0ee7b5dcba2ceae2d73da0fdfce960405160405180910390a260005b8360ff1681101561067457600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a3f09a93846040518263ffffffff1660e01b815260040161062f9190613ceb565b600060405180830381600087803b15801561064957600080fd5b505af115801561065d573d6000803e3d6000fd5b50505050808061066c90613e23565b9150506105c9565b5082600560008282829054906101000a900460ff166106939190613e6c565b92506101000a81548160ff021916908360ff1602179055506000600560009054906101000a900460ff1660ff1614156106cf57600090506106d4565b600190505b92915050565b6001808111156106ed576106ec613a47565b5b600360149054906101000a900460ff16600181111561070f5761070e613a47565b5b1461071957600080fd5b8073ffffffffffffffffffffffffffffffffffffffff167fc347a26bea69a31d705cd31225784accd8aabfcba5952e3b6c2d66429acaca4f60405160405180910390a2806002806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600360146101000a81548160ff021916908360018111156107c2576107c1613a47565b5b0217905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b0876995306040518263ffffffff1660e01b815260040161082291906138f3565b600060405180830381600087803b15801561083c57600080fd5b505af1158015610850573d6000803e3d6000fd5b5050505050565b6000600454905090565b600560009054906101000a900460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461092657337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161091d929190613ea0565b60405180910390fd5b6109308282611c4e565b5050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d2885910846040518263ffffffff1660e01b815260040161098f9190613ceb565b60206040518083038186803b1580156109a757600080fd5b505afa1580156109bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109df9190613ede565b811080156109ed5750600081115b610a2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2390613f7d565b60405180910390fd5b60005b81811015610b6457600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a3f09a93846040518263ffffffff1660e01b8152600401610a929190613ceb565b600060405180830381600087803b158015610aac57600080fd5b505af1158015610ac0573d6000803e3d6000fd5b50505050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d86819d7856040518263ffffffff1660e01b8152600401610b1f9190613ceb565b600060405180830381600087803b158015610b3957600080fd5b505af1158015610b4d573d6000803e3d6000fd5b505050508080610b5c90613e23565b915050610a2f565b50505050565b60006006600560019054906101000a900460ff1660ff1681548110610b9257610b91613dc5565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60028054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c1a57600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166312b9d423826040518263ffffffff1660e01b8152600401610c75919061405b565b600060405180830381600087803b158015610c8f57600080fd5b505af1158015610ca3573d6000803e3d6000fd5b5050505050565b60028054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d0257600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a3f09a93826040518263ffffffff1660e01b8152600401610d5d919061366b565b600060405180830381600087803b158015610d7757600080fd5b505af1158015610d8b573d6000803e3d6000fd5b5050505050565b600560019054906101000a900460ff1681565b600060028054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610dff57600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634423b787836040518263ffffffff1660e01b8152600401610e5a919061366b565b602060405180830381600087803b158015610e7457600080fd5b505af1158015610e88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eac9190613d1b565b60ff169050919050565b600860009054906101000a900460ff16610ecf57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166006600560019054906101000a900460ff1660ff1681548110610f0c57610f0b613dc5565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610f5757600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d2885910600260009054906101000a900460ff166040518263ffffffff1660e01b8152600401610fc19190613ceb565b60206040518083038186803b158015610fd957600080fd5b505afa158015610fed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110119190613ede565b8110801561101f5750600081115b61105e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105590613f7d565b60405180910390fd5b60005b818110156111b457600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a3f09a93600260019054906101000a900460ff166040518263ffffffff1660e01b81526004016110d39190613ceb565b600060405180830381600087803b1580156110ed57600080fd5b505af1158015611101573d6000803e3d6000fd5b50505050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d86819d7600260009054906101000a900460ff166040518263ffffffff1660e01b815260040161116f9190613ceb565b600060405180830381600087803b15801561118957600080fd5b505af115801561119d573d6000803e3d6000fd5b5050505080806111ac90613e23565b915050611061565b506000600860006101000a81548160ff02191690831515021790555050565b600360149054906101000a900460ff1681565b60028054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461123e57600080fd5b6112488383611cca565b611287576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161127e906140ef565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d2885910846040518263ffffffff1660e01b81526004016112e29190613ceb565b60206040518083038186803b1580156112fa57600080fd5b505afa15801561130e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113329190613ede565b8161ffff16108015611348575060008161ffff16115b611387576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137e90614181565b60405180910390fd5b6006600560019054906101000a900460ff1660ff16815481106113ad576113ac613dc5565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f4faa3127e27f3f0467a37943f210253ed28fe31be9064ac5e66ed6e805c947c260405160405180910390a26000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d2885910846040518263ffffffff1660e01b81526004016114779190613ceb565b60206040518083038186803b15801561148f57600080fd5b505afa1580156114a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c79190613ede565b9050600281106114da57600290506114df565b600190505b60006114ef8361ffff1683611f15565b90506115336040518060400160405280600a81526020017f6e756d20776f7264733a000000000000000000000000000000000000000000008152508260ff16611f79565b84600260006101000a81548160ff021916908360ff16021790555083600260016101000a81548160ff021916908360ff1602179055508261ffff16600081905550816001819055506115878160ff16612015565b5050505050565b600060028054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146115e857600080fd5b6006600560019054906101000a900460ff1660ff168154811061160e5761160d613dc5565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fe5e8bf4ce065b9d690ddea8f25596e4baf50c582be4eacf4717653e910adf52860405160405180910390a26116858484612161565b6116c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116bb90614239565b60405180910390fd5b6116cf848484610934565b6116d76123bc565b600190509392505050565b6000600860009054906101000a900460ff16905090565b6000600560009054906101000a900460ff16905090565b60011515600860019054906101000a900460ff1615151461173057600080fd5b60006006600560019054906101000a900460ff1660ff168154811061175857611757613dc5565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff167ff556ad7790e70877edcf3b3bb441255def8a405faa0dfdb005a02fa8e557bca960405160405180910390a2600060028054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168260405160240161181291906138f3565b6040516020818303038152906040527f19b09f9b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161189c91906142d3565b6000604051808303816000865af19150503d80600081146118d9576040519150601f19603f3d011682016040523d82523d6000602084013e6118de565b606091505b5050905080611922576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161191990614336565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663478c4e0e6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561198c57600080fd5b505af11580156119a0573d6000803e3d6000fd5b505050506119ac61281d565b5050565b60008060005b602a811015611b425783600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634423b787836040518263ffffffff1660e01b8152600401611a1b919061366b565b602060405180830381600087803b158015611a3557600080fd5b505af1158015611a49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a6d9190613d1b565b60ff161415611b2f57600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d2885910826040518263ffffffff1660e01b8152600401611ad1919061366b565b60206040518083038186803b158015611ae957600080fd5b505afa158015611afd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b219190613ede565b82611b2c9190614356565b91505b8080611b3a90613e23565b9150506119b6565b5080915050919050565b60028054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611ba457600080fd5b8060069080519060200190611bba929190613410565b50600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633bee987f6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611c2557600080fd5b505af1158015611c39573d6000803e3d6000fd5b50505050611c456123bc565b50565b60045481565b8060079080519060200190611c6492919061349a565b507f48ed86bcf5a9db215d430a3d797d5fd900be09379a002b6f37891bd2aacbe5cf60405160405180910390a1611cc6600054600154600260009054906101000a900460ff1660ff16600260019054906101000a900460ff1660ff16856128df565b5050565b60006001600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d2885910856040518263ffffffff1660e01b8152600401611d299190613ceb565b60206040518083038186803b158015611d4157600080fd5b505afa158015611d55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d799190613ede565b11611db9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611db090614444565b60405180910390fd5b611dc2826131b6565b15611e02576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611df9906144d6565b60405180910390fd5b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166389290109856040518263ffffffff1660e01b8152600401611e5f9190613ceb565b60006040518083038186803b158015611e7757600080fd5b505afa158015611e8b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611eb4919061458d565b905060005b6006811015611f0857818181518110611ed557611ed4613dc5565b5b602002602001015160ff168460ff161415611ef557600192505050611f0f565b8080611f0090613e23565b915050611eb9565b5060009150505b92915050565b6000806003841415611f2a5760039050611f42565b6002841415611f3c5760029050611f41565b600190505b5b6002831415611f5f57600281611f5891906145d6565b9050611f6f565b600181611f6c91906145d6565b90505b8091505092915050565b6120118282604051602401611f8f929190614651565b6040516020818303038152906040527fb60e72cc000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061329a565b5050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f0000000000000000000000000000000000000000000000000000000000000000866040518663ffffffff1660e01b81526004016120d79594939291906146eb565b602060405180830381600087803b1580156120f157600080fd5b505af1158015612105573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121299190613ede565b6004819055506004547f20d9f2861ba87fcdc90b5f0254ea9210c08b0aaf238de5b53049db100f4f6a5760405160405180910390a250565b60006001600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d2885910856040518263ffffffff1660e01b81526004016121c09190613ceb565b60206040518083038186803b1580156121d857600080fd5b505afa1580156121ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122109190613ede565b11612250576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612247906147b0565b60405180910390fd5b612259836131b6565b801561226a5750612269826131b6565b5b6122a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122a090614842565b60405180910390fd5b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166389290109856040518263ffffffff1660e01b81526004016123069190613ceb565b60006040518083038186803b15801561231e57600080fd5b505afa158015612332573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061235b919061458d565b905060005b60068110156123af5781818151811061237c5761237b613dc5565b5b602002602001015160ff168460ff16141561239c576001925050506123b6565b80806123a790613e23565b915050612360565b5060009150505b92915050565b6005600181819054906101000a900460ff16809291906123db90614862565b91906101000a81548160ff021916908360ff16021790555050600680549050600560019054906101000a900460ff1660ff161415612430576000600560016101000a81548160ff021916908360ff1602179055505b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166364b6667d6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561249a57600080fd5b505af11580156124ae573d6000803e3d6000fd5b505050506000600560006101000a81548160ff021916908360ff16021790555060005b600681101561269557600560019054906101000a900460ff1660ff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630452338e836040518263ffffffff1660e01b8152600401612548919061366b565b60206040518083038186803b15801561256057600080fd5b505afa158015612574573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125989190613d1b565b60ff16141561268257600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631e8d6c3c826040518263ffffffff1660e01b81526004016125fc919061366b565b60206040518083038186803b15801561261457600080fd5b505afa158015612628573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061264c9190613d1b565b600560008282829054906101000a900460ff1661266991906145d6565b92506101000a81548160ff021916908360ff1602179055505b808061268d90613e23565b9150506124d1565b506000805b602a81101561278e57600560019054906101000a900460ff1660ff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634423b787836040518263ffffffff1660e01b8152600401612711919061366b565b602060405180830381600087803b15801561272b57600080fd5b505af115801561273f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127639190613d1b565b60ff16141561277b57818061277790614862565b9250505b808061278690613e23565b91505061269a565b5060098160ff1610156127d7576003600560008282829054906101000a900460ff166127ba91906145d6565b92506101000a81548160ff021916908360ff16021790555061281a565b6003816127e491906148bb565b600560008282829054906101000a900460ff1661280191906145d6565b92506101000a81548160ff021916908360ff1602179055505b50565b6003600560016101000a81548160ff021916908360ff160217905550600560009054906101000a9050506000600860006101000a81548160ff0219169083151502179055506000600860016101000a81548160ff021916908315150217905550600067ffffffffffffffff811115612898576128976136f2565b5b6040519080825280602002602001820160405280156128c65781602001602082028036833780820191505090505b50600690805190602001906128dc929190613410565b50565b60008567ffffffffffffffff8111156128fb576128fa6136f2565b5b6040519080825280602002602001820160405280156129295781602001602082028036833780820191505090505b50905060008567ffffffffffffffff811115612948576129476136f2565b5b6040519080825280602002602001820160405280156129765781602001602082028036833780820191505090505b50905060005b86886129889190614356565b811015612a4557878110156129e25760068482815181106129ac576129ab613dc5565b5b60200260200101516129be91906148ec565b8382815181106129d1576129d0613dc5565b5b602002602001018181525050612a34565b60068482815181106129f7576129f6613dc5565b5b6020026020010151612a0991906148ec565b828983612a16919061491d565b81518110612a2757612a26613dc5565b5b6020026020010181815250505b80612a3e90613e23565b905061297c565b50612a4f826132c3565b612a58816132c3565b60005b8251811015612a755780612a6e90613e23565b9050612a5b565b5060005b8151811015612a935780612a8c90613e23565b9050612a79565b50600086881115612aa657869050612aaa565b8790505b60005b818110156131ab57612b0e6040518060400160405280600e81526020017f61747461636b657220726f6c6c73000000000000000000000000000000000000815250858381518110612b0157612b00613dc5565b5b6020026020010151611f79565b612b676040518060400160405280600e81526020017f646566656e64657220726f6c6c73000000000000000000000000000000000000815250848381518110612b5a57612b59613dc5565b5b6020026020010151611f79565b828181518110612b7a57612b79613dc5565b5b6020026020010151848281518110612b9557612b94613dc5565b5b6020026020010151111561307e57838181518110612bb657612bb5613dc5565b5b60200260200101517f23ca545b2511b72f1f06752112789eff8b29d12258a48d9380a6e395099bd3dc60405160405180910390a2828181518110612bfd57612bfc613dc5565b5b60200260200101517fc890a08f17a75c9e24daa64ee6fda8b9e386f3d673f63cbb81ebf02b0f5cca6d60405160405180910390a2600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d86819d7876040518263ffffffff1660e01b8152600401612c8c919061366b565b600060405180830381600087803b158015612ca657600080fd5b505af1158015612cba573d6000803e3d6000fd5b505050506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d2885910886040518263ffffffff1660e01b8152600401612d1b919061366b565b60206040518083038186803b158015612d3357600080fd5b505afa158015612d47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d6b9190613ede565b141561307957600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b66831e287600560019054906101000a900460ff166040518363ffffffff1660e01b8152600401612ddd929190614951565b600060405180830381600087803b158015612df757600080fd5b505af1158015612e0b573d6000803e3d6000fd5b50505050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d86819d7886040518263ffffffff1660e01b8152600401612e6a919061366b565b600060405180830381600087803b158015612e8457600080fd5b505af1158015612e98573d6000803e3d6000fd5b50505050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a3f09a93876040518263ffffffff1660e01b8152600401612ef7919061366b565b600060405180830381600087803b158015612f1157600080fd5b505af1158015612f25573d6000803e3d6000fd5b505050506001600860006101000a81548160ff0219169083151502179055506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634423b787886040518263ffffffff1660e01b8152600401612fa1919061366b565b602060405180830381600087803b158015612fbb57600080fd5b505af1158015612fcf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ff39190613d1b565b60ff1690506000613003826119b0565b141561301357613012816133cc565b5b6001600680549050141561304957613029611710565b6001600860016101000a81548160ff021916908315150217905550613077565b867f91c9edc9b039d5f7fae48dcc2f589f5e1f79055249eaca570a445d00692b14ee60405160405180910390a25b505b61319a565b83818151811061309157613090613dc5565b5b60200260200101517f23ca545b2511b72f1f06752112789eff8b29d12258a48d9380a6e395099bd3dc60405160405180910390a28281815181106130d8576130d7613dc5565b5b60200260200101517fc890a08f17a75c9e24daa64ee6fda8b9e386f3d673f63cbb81ebf02b0f5cca6d60405160405180910390a2600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d86819d7886040518263ffffffff1660e01b8152600401613167919061366b565b600060405180830381600087803b15801561318157600080fd5b505af1158015613195573d6000803e3d6000fd5b505050505b806131a490613e23565b9050612aad565b505050505050505050565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634423b787846040518263ffffffff1660e01b81526004016132149190613ceb565b602060405180830381600087803b15801561322e57600080fd5b505af1158015613242573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132669190613d1b565b9050600560019054906101000a900460ff1660ff168160ff16141561328f576001915050613295565b60009150505b919050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b6000806000600192505b83518310156133c6578383815181106132e9576132e8613dc5565b5b60200260200101519150600183613300919061491d565b90505b6000811215801561332d57508184828151811061332357613322613dc5565b5b6020026020010151105b156133895783818151811061334557613344613dc5565b5b60200260200101518460018361335b9190614984565b8151811061336c5761336b613dc5565b5b6020026020010181815250508061338290614a18565b9050613303565b81846001836133989190614984565b815181106133a9576133a8613dc5565b5b602002602001018181525050826133bf90613e23565b92506132cd565b50505050565b600681815481106133e0576133df613dc5565b5b9060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550565b828054828255906000526020600020908101928215613489579160200282015b828111156134885782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190613430565b5b50905061349691906134e7565b5090565b8280548282559060005260206000209081019282156134d6579160200282015b828111156134d55782518255916020019190600101906134ba565b5b5090506134e391906134e7565b5090565b5b808211156135005760008160009055506001016134e8565b5090565b6000604051905090565b600080fd5b600080fd5b600060ff82169050919050565b61352e81613518565b811461353957600080fd5b50565b60008135905061354b81613525565b92915050565b600080604083850312156135685761356761350e565b5b60006135768582860161353c565b92505060206135878582860161353c565b9150509250929050565b60008115159050919050565b6135a681613591565b82525050565b60006020820190506135c1600083018461359d565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006135f2826135c7565b9050919050565b613602816135e7565b811461360d57600080fd5b50565b60008135905061361f816135f9565b92915050565b60006020828403121561363b5761363a61350e565b5b600061364984828501613610565b91505092915050565b6000819050919050565b61366581613652565b82525050565b6000602082019050613680600083018461365c565b92915050565b61368f81613518565b82525050565b60006020820190506136aa6000830184613686565b92915050565b6136b981613652565b81146136c457600080fd5b50565b6000813590506136d6816136b0565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61372a826136e1565b810181811067ffffffffffffffff82111715613749576137486136f2565b5b80604052505050565b600061375c613504565b90506137688282613721565b919050565b600067ffffffffffffffff821115613788576137876136f2565b5b602082029050602081019050919050565b600080fd5b60006137b16137ac8461376d565b613752565b905080838252602082019050602084028301858111156137d4576137d3613799565b5b835b818110156137fd57806137e988826136c7565b8452602084019350506020810190506137d6565b5050509392505050565b600082601f83011261381c5761381b6136dc565b5b813561382c84826020860161379e565b91505092915050565b6000806040838503121561384c5761384b61350e565b5b600061385a858286016136c7565b925050602083013567ffffffffffffffff81111561387b5761387a613513565b5b61388785828601613807565b9150509250929050565b6000806000606084860312156138aa576138a961350e565b5b60006138b88682870161353c565b93505060206138c98682870161353c565b92505060406138da868287016136c7565b9150509250925092565b6138ed816135e7565b82525050565b600060208201905061390860008301846138e4565b92915050565b600067ffffffffffffffff821115613929576139286136f2565b5b602082029050602081019050919050565b600061394d6139488461390e565b613752565b905080838252602082019050602084028301858111156139705761396f613799565b5b835b818110156139995780613985888261353c565b845260208401935050602081019050613972565b5050509392505050565b600082601f8301126139b8576139b76136dc565b5b81356139c884826020860161393a565b91505092915050565b6000602082840312156139e7576139e661350e565b5b600082013567ffffffffffffffff811115613a0557613a04613513565b5b613a11848285016139a3565b91505092915050565b600060208284031215613a3057613a2f61350e565b5b6000613a3e848285016136c7565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110613a8757613a86613a47565b5b50565b6000819050613a9882613a76565b919050565b6000613aa882613a8a565b9050919050565b613ab881613a9d565b82525050565b6000602082019050613ad36000830184613aaf565b92915050565b600061ffff82169050919050565b613af081613ad9565b8114613afb57600080fd5b50565b600081359050613b0d81613ae7565b92915050565b600080600060608486031215613b2c57613b2b61350e565b5b6000613b3a8682870161353c565b9350506020613b4b8682870161353c565b9250506040613b5c86828701613afe565b9150509250925092565b600067ffffffffffffffff821115613b8157613b806136f2565b5b602082029050602081019050919050565b6000613b9d826135c7565b9050919050565b613bad81613b92565b8114613bb857600080fd5b50565b600081359050613bca81613ba4565b92915050565b6000613be3613bde84613b66565b613752565b90508083825260208201905060208402830185811115613c0657613c05613799565b5b835b81811015613c2f5780613c1b8882613bbb565b845260208401935050602081019050613c08565b5050509392505050565b600082601f830112613c4e57613c4d6136dc565b5b8135613c5e848260208601613bd0565b91505092915050565b600060208284031215613c7d57613c7c61350e565b5b600082013567ffffffffffffffff811115613c9b57613c9a613513565b5b613ca784828501613c39565b91505092915050565b6000819050919050565b6000613cd5613cd0613ccb84613518565b613cb0565b613652565b9050919050565b613ce581613cba565b82525050565b6000602082019050613d006000830184613cdc565b92915050565b600081519050613d1581613525565b92915050565b600060208284031215613d3157613d3061350e565b5b6000613d3f84828501613d06565b91505092915050565b600082825260208201905092915050565b7f596f7520646f206e6f74206f776e2074686973207465727269746f7279000000600082015250565b6000613d8f601d83613d48565b9150613d9a82613d59565b602082019050919050565b60006020820190508181036000830152613dbe81613d82565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613e2e82613652565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613e6157613e60613df4565b5b600182019050919050565b6000613e7782613518565b9150613e8283613518565b925082821015613e9557613e94613df4565b5b828203905092915050565b6000604082019050613eb560008301856138e4565b613ec260208301846138e4565b9392505050565b600081519050613ed8816136b0565b92915050565b600060208284031215613ef457613ef361350e565b5b6000613f0284828501613ec9565b91505092915050565b7f596f752063616e6e6f74206d6f7665207468617420616d6f756e74206f66207460008201527f726f6f7073210000000000000000000000000000000000000000000000000000602082015250565b6000613f67602683613d48565b9150613f7282613f0b565b604082019050919050565b60006020820190508181036000830152613f9681613f5a565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613fd281613518565b82525050565b6000613fe48383613fc9565b60208301905092915050565b6000602082019050919050565b600061400882613f9d565b6140128185613fa8565b935061401d83613fb9565b8060005b8381101561404e5781516140358882613fd8565b975061404083613ff0565b925050600181019050614021565b5085935050505092915050565b600060208201905081810360008301526140758184613ffd565b905092915050565b7f5465727269746f727920796f752061726520747279696e6720746f206174746160008201527f636b206973206e6f742061206e65696768626f75722100000000000000000000602082015250565b60006140d9603683613d48565b91506140e48261407d565b604082019050919050565b60006020820190508181036000830152614108816140cc565b9050919050565b7f596f752063616e6e6f742061747461636b20776974682074686174206d616e7960008201527f2074726f6f707321000000000000000000000000000000000000000000000000602082015250565b600061416b602883613d48565b91506141768261410f565b604082019050919050565b6000602082019050818103600083015261419a8161415e565b9050919050565b7f5465727269746f727920796f752061726520747279696e67206d6f766520747260008201527f6f6f707320746f206973206e6f74206f6e65206f6620796f7572206e6569676860208201527f626f757273210000000000000000000000000000000000000000000000000000604082015250565b6000614223604683613d48565b915061422e826141a1565b606082019050919050565b6000602082019050818103600083015261425281614216565b9050919050565b600081519050919050565b600081905092915050565b60005b8381101561428d578082015181840152602081019050614272565b8381111561429c576000848401525b50505050565b60006142ad82614259565b6142b78185614264565b93506142c781856020860161426f565b80840191505092915050565b60006142df82846142a2565b915081905092915050565b7f63616c6c20746f206d61696e206661696c656400000000000000000000000000600082015250565b6000614320601383613d48565b915061432b826142ea565b602082019050919050565b6000602082019050818103600083015261434f81614313565b9050919050565b600061436182613652565b915061436c83613652565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156143a1576143a0613df4565b5b828201905092915050565b7f596f75206d7573742068617665206174206c6561737420312074726f6f70207260008201527f656d61696e696e6720696e20796f7572207465727269746f727920746f20617460208201527f7461636b21000000000000000000000000000000000000000000000000000000604082015250565b600061442e604583613d48565b9150614439826143ac565b606082019050919050565b6000602082019050818103600083015261445d81614421565b9050919050565b7f596f752063616e6e6f742061747461636b20796f7572206f776e20746572726960008201527f746f727921000000000000000000000000000000000000000000000000000000602082015250565b60006144c0602583613d48565b91506144cb82614464565b604082019050919050565b600060208201905081810360008301526144ef816144b3565b9050919050565b60006145096145048461390e565b613752565b9050808382526020820190506020840283018581111561452c5761452b613799565b5b835b8181101561455557806145418882613d06565b84526020840193505060208101905061452e565b5050509392505050565b600082601f830112614574576145736136dc565b5b81516145848482602086016144f6565b91505092915050565b6000602082840312156145a3576145a261350e565b5b600082015167ffffffffffffffff8111156145c1576145c0613513565b5b6145cd8482850161455f565b91505092915050565b60006145e182613518565b91506145ec83613518565b92508260ff0382111561460257614601613df4565b5b828201905092915050565b600081519050919050565b60006146238261460d565b61462d8185613d48565b935061463d81856020860161426f565b614646816136e1565b840191505092915050565b6000604082019050818103600083015261466b8185614618565b905061467a602083018461365c565b9392505050565b6000819050919050565b61469481614681565b82525050565b600067ffffffffffffffff82169050919050565b6146b78161469a565b82525050565b6146c681613ad9565b82525050565b600063ffffffff82169050919050565b6146e5816146cc565b82525050565b600060a082019050614700600083018861468b565b61470d60208301876146ae565b61471a60408301866146bd565b61472760608301856146dc565b61473460808301846146dc565b9695505050505050565b7f596f75206d7573742068617665206d6f7265207468616e20312074726f6f702060008201527f746f206d6f766521000000000000000000000000000000000000000000000000602082015250565b600061479a602883613d48565b91506147a58261473e565b604082019050919050565b600060208201905081810360008301526147c98161478d565b9050919050565b7f596f75206d757374206f776e20626f7468207465727269746f7269657320746f60008201527f206d6f76652074726f6f70732100000000000000000000000000000000000000602082015250565b600061482c602d83613d48565b9150614837826147d0565b604082019050919050565b6000602082019050818103600083015261485b8161481f565b9050919050565b600061486d82613518565b915060ff82141561488157614880613df4565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006148c682613518565b91506148d183613518565b9250826148e1576148e061488c565b5b828204905092915050565b60006148f782613652565b915061490283613652565b9250826149125761491161488c565b5b828206905092915050565b600061492882613652565b915061493383613652565b92508282101561494657614945613df4565b5b828203905092915050565b6000604082019050614966600083018561365c565b6149736020830184613686565b9392505050565b6000819050919050565b600061498f8261497a565b915061499a8361497a565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038313600083121516156149d5576149d4613df4565b5b817f8000000000000000000000000000000000000000000000000000000000000000038312600083121615614a0d57614a0c613df4565b5b828201905092915050565b6000614a238261497a565b91507f8000000000000000000000000000000000000000000000000000000000000000821415614a5657614a55613df4565b5b60018203905091905056fea2646970667358221220bf7c796b5890e24f7a17884a6e211d28fa2526a7c030cdb2ffd4bcfe9734df8664736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 354,
        "contract": "contracts/Controls.sol:Controls",
        "label": "s_recentAttackingArmies",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 356,
        "contract": "contracts/Controls.sol:Controls",
        "label": "s_recentDefendingArmies",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 358,
        "contract": "contracts/Controls.sol:Controls",
        "label": "s_recentTerritoryAttacking",
        "offset": 0,
        "slot": "2",
        "type": "t_uint8"
      },
      {
        "astId": 360,
        "contract": "contracts/Controls.sol:Controls",
        "label": "s_recentTerritoryBeingAttacked",
        "offset": 1,
        "slot": "2",
        "type": "t_uint8"
      },
      {
        "astId": 362,
        "contract": "contracts/Controls.sol:Controls",
        "label": "main_address",
        "offset": 2,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 364,
        "contract": "contracts/Controls.sol:Controls",
        "label": "data_address",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 367,
        "contract": "contracts/Controls.sol:Controls",
        "label": "s_mainSet",
        "offset": 20,
        "slot": "3",
        "type": "t_enum(mainAddressSent)340"
      },
      {
        "astId": 369,
        "contract": "contracts/Controls.sol:Controls",
        "label": "s_requestId",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 371,
        "contract": "contracts/Controls.sol:Controls",
        "label": "s_troopsToDeploy",
        "offset": 0,
        "slot": "5",
        "type": "t_uint8"
      },
      {
        "astId": 373,
        "contract": "contracts/Controls.sol:Controls",
        "label": "s_playerTurn",
        "offset": 1,
        "slot": "5",
        "type": "t_uint8"
      },
      {
        "astId": 376,
        "contract": "contracts/Controls.sol:Controls",
        "label": "s_playersArray",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 379,
        "contract": "contracts/Controls.sol:Controls",
        "label": "s_diceWords",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 381,
        "contract": "contracts/Controls.sol:Controls",
        "label": "s_attackSuccess",
        "offset": 0,
        "slot": "8",
        "type": "t_bool"
      },
      {
        "astId": 383,
        "contract": "contracts/Controls.sol:Controls",
        "label": "s_gameIsOver",
        "offset": 1,
        "slot": "8",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(mainAddressSent)340": {
        "encoding": "inplace",
        "label": "enum Controls.mainAddressSent",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}