{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "controls",
          "type": "address"
        }
      ],
      "name": "ReceivedControls",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "addTroopToTerritory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "territory",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "newOwner",
          "type": "uint8"
        }
      ],
      "name": "changeOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllTerritories",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "owner",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "troops",
              "type": "uint256"
            }
          ],
          "internalType": "struct Data.Territory_Info[42]",
          "name": "",
          "type": "tuple[42]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "continent",
          "type": "uint256"
        }
      ],
      "name": "getContinentBonus",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContinentInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "owner",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "troopBonus",
              "type": "uint8"
            }
          ],
          "internalType": "struct Data.Continent_Info[6]",
          "name": "",
          "type": "tuple[6]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "continent",
          "type": "uint256"
        }
      ],
      "name": "getContinentOwner",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "territory",
          "type": "uint256"
        }
      ],
      "name": "getNeighbours",
      "outputs": [
        {
          "internalType": "uint8[]",
          "name": "",
          "type": "uint8[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "territoryId",
          "type": "uint256"
        }
      ],
      "name": "getTerritories",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "owner",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "troops",
              "type": "uint256"
            }
          ],
          "internalType": "struct Data.Territory_Info",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "j",
          "type": "uint256"
        }
      ],
      "name": "getTerritoryOwner",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "owner",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "territory",
          "type": "uint256"
        }
      ],
      "name": "getTroopCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initializeContinents",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "territory",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "playerAwarded",
          "type": "uint8"
        }
      ],
      "name": "pushToTerritories",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "removeTroopFromTerritory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resetData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_continents",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "owner",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "troopBonus",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_controlsSet",
      "outputs": [
        {
          "internalType": "enum Data.controlsAddressSent",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_neighbours",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_territories",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "owner",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "troops",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "controls",
          "type": "address"
        }
      ],
      "name": "setControlsAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateContinents",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe897b8a19f9cb55ae1ed98900b4ff6ed5ab608ebc32fd69cb6ce603e5353095d",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "3850524",
    "logsBloom": "0x
    "blockHash": "0x3ed657bdbb3fe8027f7af17b838066f7c5fc30edcdd51b5666bf38a884176324",
    "transactionHash": "0xe897b8a19f9cb55ae1ed98900b4ff6ed5ab608ebc32fd69cb6ce603e5353095d",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "3850524",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "66616a7f35cb90b0f4b8316a764eb033",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controls\",\"type\":\"address\"}],\"name\":\"ReceivedControls\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"addTroopToTerritory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"territory\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"newOwner\",\"type\":\"uint8\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllTerritories\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"owner\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"troops\",\"type\":\"uint256\"}],\"internalType\":\"struct Data.Territory_Info[42]\",\"name\":\"\",\"type\":\"tuple[42]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"continent\",\"type\":\"uint256\"}],\"name\":\"getContinentBonus\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContinentInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"owner\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"troopBonus\",\"type\":\"uint8\"}],\"internalType\":\"struct Data.Continent_Info[6]\",\"name\":\"\",\"type\":\"tuple[6]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"continent\",\"type\":\"uint256\"}],\"name\":\"getContinentOwner\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"territory\",\"type\":\"uint256\"}],\"name\":\"getNeighbours\",\"outputs\":[{\"internalType\":\"uint8[]\",\"name\":\"\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"territoryId\",\"type\":\"uint256\"}],\"name\":\"getTerritories\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"owner\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"troops\",\"type\":\"uint256\"}],\"internalType\":\"struct Data.Territory_Info\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"j\",\"type\":\"uint256\"}],\"name\":\"getTerritoryOwner\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"owner\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"territory\",\"type\":\"uint256\"}],\"name\":\"getTroopCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeContinents\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"territory\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"playerAwarded\",\"type\":\"uint8\"}],\"name\":\"pushToTerritories\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"removeTroopFromTerritory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_continents\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"owner\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"troopBonus\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_controlsSet\",\"outputs\":[{\"internalType\":\"enum Data.controlsAddressSent\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_neighbours\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_territories\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"owner\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"troops\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controls\",\"type\":\"address\"}],\"name\":\"setControlsAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateContinents\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Data.sol\":\"Data\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/AutomationBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AutomationBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5d354afa1a97dffe66094397cdcbb0c14713cf3d609d88fd8f9891010e9a351a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/AutomationCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AutomationBase.sol\\\";\\nimport \\\"./interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\\n\",\"keccak256\":\"0x40e5ae0eff4edd0740c1b5590d09c344f84dee031e82d5294563e99603774f80\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/Controls.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"./Main.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ninterface IData {\\n    function initializeContinents() external;\\n\\n    function getContinentOwner(uint256 continent) external view returns (uint8);\\n\\n    function getContinentBonus(uint256 continent) external view returns (uint8);\\n\\n    function pushToTerritories(uint256, uint8) external;\\n\\n    function addTroopToTerritory(uint256 index) external;\\n\\n    function updateContinents() external;\\n\\n    function setControlsAddress(address controls) external;\\n\\n    function getNeighbours(uint256 territory) external view returns (uint8[] memory);\\n\\n    function getTerritoryOwner(uint256) external returns (uint8);\\n\\n    function getTroopCount(uint256 territory) external view returns (uint256);\\n\\n    function removeTroopFromTerritory(uint256 index) external;\\n\\n    function changeOwner(uint256 territory, uint8 newOwner) external;\\n\\n    function resetData() external;\\n}\\n\\ncontract Controls is IControls, VRFConsumerBaseV2 {\\n    event CurrentPlayer(address indexed player);\\n    event ReceivedMain(address indexed main);\\n    event PlayerDeploying(address indexed player);\\n    event PlayerAttacking(address indexed player);\\n    event PlayerFortifying(address indexed player);\\n    event DiceRolled();\\n    event RollingDice(uint256 indexed s_requestId);\\n    event GameOver(address indexed winner);\\n    event TransferTroopsAvailable(uint256 indexed territoryBeingAttacked);\\n    event AttackerDie(uint256 indexed die);\\n    event DefenderDie(uint256 indexed die);\\n\\n    // enums\\n\\n    enum mainAddressSent {\\n        TRUE,\\n        FALSE\\n    }\\n\\n    // Chainlink VRF Variables\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    uint64 private immutable i_subscriptionId;\\n    bytes32 private immutable i_gasLane;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n\\n    // variables\\n    uint256 s_recentAttackingArmies;\\n    uint256 s_recentDefendingArmies;\\n    uint8 s_recentTerritoryAttacking;\\n    uint8 s_recentTerritoryBeingAttacked;\\n\\n    address private main_address;\\n    address private data_address;\\n\\n    mainAddressSent public s_mainSet;\\n    uint256 public s_requestId;\\n    uint8 public s_troopsToDeploy;\\n    uint8 public s_playerTurn;\\n\\n    address payable[] s_playersArray;\\n    uint256[] s_diceWords;\\n\\n    bool s_attackSuccess;\\n    bool s_gameIsOver;\\n\\n    constructor(\\n        address vrfCoordinatorV2,\\n        uint64 subscriptionId,\\n        bytes32 gasLane,\\n        uint32 callbackGasLimit,\\n        address data\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_subscriptionId = subscriptionId;\\n        i_gasLane = gasLane;\\n        i_callbackGasLimit = callbackGasLimit;\\n        data_address = data;\\n        s_mainSet = mainAddressSent.FALSE;\\n        s_playerTurn = 3;\\n        s_troopsToDeploy;\\n        s_attackSuccess = false;\\n        s_gameIsOver = false;\\n    }\\n\\n    modifier onlyMain() {\\n        require(msg.sender == main_address);\\n        _;\\n    }\\n\\n    modifier gameIsOver() {\\n        require(s_gameIsOver == true);\\n        _;\\n    }\\n\\n    function set_main_address(address main) external override {\\n        require(s_mainSet == mainAddressSent.FALSE);\\n        emit ReceivedMain(main);\\n        main_address = main;\\n        s_mainSet = mainAddressSent.TRUE;\\n        IData(data_address).setControlsAddress(address(this));\\n    }\\n\\n    function set_players(address payable[] memory players) external override onlyMain {\\n        s_playersArray = players;\\n        IData(data_address).initializeContinents();\\n        next_player();\\n    }\\n\\n    function next_player() private {\\n        s_playerTurn++;\\n        if (s_playerTurn == s_playersArray.length) {\\n            s_playerTurn = 0;\\n        }\\n        IData(data_address).updateContinents();\\n        s_troopsToDeploy = 0;\\n        for (uint256 c; c < 6; c++) {\\n            if (IData(data_address).getContinentOwner(c) == s_playerTurn) {\\n                s_troopsToDeploy += IData(data_address).getContinentBonus(c);\\n            }\\n        }\\n\\n        uint8 totalTerritories;\\n        for (uint256 i; i < 42; i++) {\\n            if (IData(data_address).getTerritoryOwner(i) == s_playerTurn) {\\n                totalTerritories++;\\n            }\\n        }\\n        if (totalTerritories < 9) {\\n            s_troopsToDeploy += 3;\\n        } else {\\n            s_troopsToDeploy += totalTerritories / 3;\\n        }\\n    }\\n\\n    function deploy_control(uint8 amountToDeploy, uint8 location) external override onlyMain returns (bool) {\\n        require(IData(data_address).getTerritoryOwner(location) == s_playerTurn, \\\"You do not own this territory\\\");\\n        emit PlayerDeploying(s_playersArray[s_playerTurn]);\\n        for (uint256 i; i < amountToDeploy; i++) {\\n            IData(data_address).addTroopToTerritory(location);\\n        }\\n        s_troopsToDeploy -= amountToDeploy;\\n        if (s_troopsToDeploy == 0) {\\n            return false; // returns false if all troops have not been deployed\\n        }\\n        return true;\\n    }\\n\\n    function attack_control(\\n        uint8 territoryOwned,\\n        uint8 territoryAttacking,\\n        uint256 attackingArmies // could\\n    ) external override onlyMain {\\n        require(\\n            validate_attackable(territoryOwned, territoryAttacking),\\n            \\\"Territory you are trying to attack is not a neighbour!\\\"\\n        );\\n        require(\\n            (attackingArmies < IData(data_address).getTroopCount(territoryOwned)) && (attackingArmies > 0),\\n            \\\"You cannot attack with that many troops!\\\"\\n        );\\n        emit PlayerAttacking(s_playersArray[s_playerTurn]);\\n\\n        uint256 defendingArmies = IData(data_address).getTroopCount(territoryAttacking);\\n        if (defendingArmies >= 2) {\\n            defendingArmies = 2;\\n        } else {\\n            defendingArmies = 1;\\n        }\\n        uint8 num_words = getArmies(attackingArmies, defendingArmies); // attackingArmies, defendingArmies not returning correct numbers\\n        console.log(\\\"num words:\\\", num_words);\\n        s_recentTerritoryAttacking = territoryOwned;\\n        s_recentTerritoryBeingAttacked = territoryAttacking;\\n        s_recentAttackingArmies = attackingArmies;\\n        s_recentDefendingArmies = defendingArmies;\\n        diceRoller(num_words);\\n\\n        // 1. Player clicks on their own territory\\n        // 2. Player clicks on enemy territory.\\n        // 3. Player chooses how many troops to attack with.\\n        // 4. Player attacks\\n    }\\n\\n    function battle(\\n        uint256 attackingArmies,\\n        uint256 defendingArmies,\\n        uint256 territoryAttacking,\\n        uint256 territoryBeingAttacked,\\n        uint256[] memory randomWords\\n    ) private {\\n        uint256[] memory attackerRolls = new uint256[](attackingArmies);\\n        uint256[] memory defenderRolls = new uint256[](defendingArmies);\\n        for (uint256 i; i < (attackingArmies + defendingArmies); ++i) {\\n            if (i < attackingArmies) {\\n                attackerRolls[i] = randomWords[i] % 6;\\n            } else {\\n                defenderRolls[i - attackingArmies] = randomWords[i] % 6;\\n            }\\n        }\\n        // Sorting the two rolls arrays\\n        insertionSort(attackerRolls);\\n        insertionSort(defenderRolls);\\n\\n        for (uint256 i; i < attackerRolls.length; ++i) {}\\n        for (uint256 i; i < defenderRolls.length; ++i) {}\\n\\n        uint256 attacks; // either 1 or 2\\n        if (attackingArmies > defendingArmies) {\\n            attacks = defendingArmies;\\n        } else {\\n            attacks = attackingArmies;\\n        }\\n        for (uint256 i; i < attacks; ++i) {\\n            console.log(\\\"attacker rolls\\\", attackerRolls[i]);\\n            console.log(\\\"defender rolls\\\", defenderRolls[i]);\\n            if (attackerRolls[i] > defenderRolls[i]) {\\n                // 3 v 1 , 2 v 1 , 1 v 1, 2 v 2, 2 v 1, 1 v 1 //\\n                // attacker wins, defender dies\\n                emit AttackerDie(attackerRolls[i]);\\n                emit DefenderDie(defenderRolls[i]);\\n                IData(data_address).removeTroopFromTerritory(territoryBeingAttacked);\\n                if (\\n                    // Attacker has killed all troops in the defending territory\\n                    IData(data_address).getTroopCount(territoryBeingAttacked) == 0\\n                ) {\\n                    // Territory now becomes Attackers\\n                    IData(data_address).changeOwner(territoryBeingAttacked, s_playerTurn);\\n                    IData(data_address).removeTroopFromTerritory(territoryAttacking);\\n                    IData(data_address).addTroopToTerritory(territoryBeingAttacked);\\n                    // Attacker can select how many troops he wants to deploy to territory\\n                    s_attackSuccess = true;\\n                    uint256 defeatedPlayer = IData(data_address).getTerritoryOwner(territoryBeingAttacked);\\n                    if (getTotalTroops(defeatedPlayer) == 0) {\\n                        // if that was the last armies of the player\\n                        killPlayer(defeatedPlayer); // player is removed from the game\\n                    }\\n                    if (s_playersArray.length == 1) {\\n                        gameOver();\\n                        s_gameIsOver = true;\\n                    } else {\\n                        emit TransferTroopsAvailable(territoryBeingAttacked);\\n                    }\\n                }\\n            } else {\\n                // defender wins\\n                emit AttackerDie(attackerRolls[i]);\\n                emit DefenderDie(defenderRolls[i]);\\n                IData(data_address).removeTroopFromTerritory(territoryAttacking);\\n            }\\n        }\\n    }\\n\\n    // This is a function that is executed when a button is clicked.\\n    function troopTransferAfterAttack(uint256 amountOfTroops) public {\\n        require(s_attackSuccess);\\n        require(s_playersArray[s_playerTurn] == msg.sender);\\n        require(\\n            amountOfTroops < IData(data_address).getTroopCount(s_recentTerritoryAttacking) && (amountOfTroops > 0),\\n            \\\"You cannot move that amount of troops!\\\"\\n        );\\n\\n        for (uint256 i; i < amountOfTroops; i++) {\\n            IData(data_address).addTroopToTerritory(s_recentTerritoryBeingAttacked);\\n            IData(data_address).removeTroopFromTerritory(s_recentTerritoryAttacking);\\n        }\\n        s_attackSuccess = false;\\n    }\\n\\n    function diceRoller(uint32 num_words) private {\\n        s_requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            num_words\\n        );\\n        emit RollingDice(s_requestId);\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256, /* requestId */\\n        uint256[] memory randomWords\\n    ) internal override {\\n        s_diceWords = randomWords;\\n        emit DiceRolled();\\n        battle(\\n            s_recentAttackingArmies,\\n            s_recentDefendingArmies,\\n            s_recentTerritoryAttacking,\\n            s_recentTerritoryBeingAttacked,\\n            randomWords\\n        );\\n    }\\n\\n    function transferTroops(\\n        uint8 territoryMovingFrom,\\n        uint8 territoryMovingTo,\\n        uint256 troopsMoving\\n    ) public {\\n        require(\\n            (troopsMoving < IData(data_address).getTroopCount(territoryMovingFrom)) && (troopsMoving > 0),\\n            \\\"You cannot move that amount of troops!\\\"\\n        );\\n\\n        for (uint256 i; i < troopsMoving; i++) {\\n            IData(data_address).addTroopToTerritory(territoryMovingTo);\\n            IData(data_address).removeTroopFromTerritory(territoryMovingFrom);\\n        }\\n    }\\n\\n    function fortify_control(\\n        uint8 territoryMovingFrom,\\n        uint8 territoryMovingTo,\\n        uint256 troopsMoving\\n    ) external override onlyMain returns (bool) {\\n        //need to add parameters\\n        emit PlayerFortifying(s_playersArray[s_playerTurn]);\\n        require(\\n            validateFortifiable(territoryMovingFrom, territoryMovingTo),\\n            \\\"Territory you are trying move troops to is not one of your neighbours!\\\"\\n        );\\n        transferTroops(territoryMovingFrom, territoryMovingTo, troopsMoving);\\n\\n        next_player();\\n        return true;\\n    }\\n\\n    function validate_owner(uint8 territory_clicked) internal returns (bool) {\\n        uint8 territory_owner = IData(data_address).getTerritoryOwner(territory_clicked);\\n        if (territory_owner == s_playerTurn) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function validateFortifiable(uint8 territoryMovingFrom, uint8 territoryMovingTo) internal returns (bool) {\\n        require(IData(data_address).getTroopCount(territoryMovingFrom) > 1, \\\"You must have more than 1 troop to move!\\\");\\n        require(\\n            validate_owner(territoryMovingFrom) && validate_owner(territoryMovingTo),\\n            \\\"You must own both territories to move troops!\\\"\\n        );\\n        uint8[] memory neighbours = IData(data_address).getNeighbours(territoryMovingFrom);\\n        for (uint256 i; i < 6; i++) {\\n            if ((territoryMovingTo == neighbours[i])) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function validate_attackable(uint8 territoryOwned, uint8 territoryAttacking) internal returns (bool) {\\n        require(\\n            IData(data_address).getTroopCount(territoryOwned) > 1,\\n            \\\"You must have at least 1 troop remaining in your territory to attack!\\\"\\n        );\\n        require(!validate_owner(territoryAttacking), \\\"You cannot attack your own territory!\\\"); //checks if the player owns the territory they are trying to attack\\n        uint8[] memory neighbours = IData(data_address).getNeighbours(territoryOwned);\\n        for (uint256 i; i < 6; i++) {\\n            if ((territoryAttacking == neighbours[i])) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function getArmies(uint256 attackingArmies, uint256 defendingArmies) private pure returns (uint8) {\\n        uint8 num_words;\\n        if (attackingArmies == 3) {\\n            num_words = 3;\\n        } else if (attackingArmies == 2) {\\n            num_words = 2;\\n        } else {\\n            num_words = 1;\\n        }\\n        if (defendingArmies == 2) {\\n            num_words += 2;\\n        } else {\\n            num_words += 1;\\n        }\\n        return num_words;\\n    }\\n\\n    function gameOver() public gameIsOver {\\n        address winner = s_playersArray[s_playerTurn];\\n        emit GameOver(winner);\\n        (bool success, ) = main_address.call(abi.encodeWithSignature(\\\"payWinner(address)\\\", winner));\\n        require(success, \\\"call to main failed\\\");\\n        IData(data_address).resetData();\\n        resetControls();\\n    }\\n\\n    function resetControls() private {\\n        s_playerTurn = 3;\\n        s_troopsToDeploy;\\n        s_attackSuccess = false;\\n        s_gameIsOver = false;\\n        s_playersArray = new address payable[](0);\\n    }\\n\\n    function add_troop_to_territory(uint256 index) external override onlyMain {\\n        IData(data_address).addTroopToTerritory(index);\\n    }\\n\\n    function killPlayer(uint256 deadPlayer) private {\\n        delete s_playersArray[deadPlayer];\\n    }\\n\\n    function getTotalTroops(uint256 player) public returns (uint256) {\\n        uint256 totalTroops;\\n        for (uint256 i; i < 42; i++) {\\n            if (IData(data_address).getTerritoryOwner(i) == player) {\\n                totalTroops += IData(data_address).getTroopCount(i);\\n            }\\n        }\\n        return totalTroops;\\n    }\\n\\n    function get_territory_owner(uint256 j) external override onlyMain returns (uint256) {\\n        return IData(data_address).getTerritoryOwner(j);\\n    }\\n\\n    function get_troops_to_deploy() public view override returns (uint8) {\\n        return s_troopsToDeploy;\\n    }\\n\\n    function getPlayerTurn() public view override returns (address) {\\n        return s_playersArray[s_playerTurn];\\n    }\\n\\n    function getRequestId() public view returns (uint256) {\\n        return s_requestId;\\n    }\\n\\n    function push_to_territories(uint256 territory, uint8 playerAwarded) external onlyMain {\\n        IData(data_address).pushToTerritories(territory, playerAwarded);\\n    }\\n\\n    function getAttackStatus() public view override returns (bool) {\\n        return s_attackSuccess;\\n    }\\n\\n    function insertionSort(uint256[] memory arr) private pure {\\n        uint256 i;\\n        uint256 key;\\n        int256 j;\\n        for (i = 1; i < arr.length; ++i) {\\n            key = arr[i];\\n            j = int256(i - 1);\\n            while (j >= 0 && arr[uint256(j)] < key) {\\n                arr[uint256(j + 1)] = arr[uint256(j)];\\n                --j;\\n            }\\n            arr[uint256(j + 1)] = key;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd786cc1722edf118af00d3e1ba218c29b15c07b60655024fd5cb3caf3fbf0e71\",\"license\":\"MIT\"},\"contracts/Data.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"./Controls.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract Data is IData {\\n    event ReceivedControls(address indexed controls);\\n\\n    struct Continent_Info {\\n        uint8 owner;\\n        uint8 troopBonus;\\n    }\\n    struct Territory_Info {\\n        uint8 owner;\\n        uint256 troops;\\n    }\\n\\n    enum controlsAddressSent {\\n        TRUE,\\n        FALSE\\n    }\\n    Continent_Info[6] public s_continents;\\n    Territory_Info[42] public s_territories;\\n    address private controls_address;\\n    controlsAddressSent public s_controlsSet;\\n\\n    // Array containing territories that are neighbours of the territory of the index. 99 is a filler.\\n    uint8[][] public s_neighbours = [\\n        [1, 3, 29, 99, 99, 99], //0\\n        [0, 3, 4, 2, 99, 99],\\n        [1, 4, 5, 13, 99, 99],\\n        [0, 1, 4, 6, 99, 99],\\n        [1, 2, 3, 5, 6, 7],\\n        [2, 4, 7, 99, 99, 99],\\n        [3, 4, 7, 8, 99, 99],\\n        [4, 5, 6, 8, 99, 99],\\n        [6, 7, 9, 99, 99, 99],\\n        [8, 10, 11, 99, 99, 99],\\n        [9, 11, 12, 99, 99, 99], //10\\n        [9, 10, 12, 20, 99, 99],\\n        [10, 11, 99, 99, 99, 99],\\n        [2, 14, 15, 99, 99, 99],\\n        [13, 15, 16, 17, 99, 99],\\n        [13, 14, 16, 18, 99, 99],\\n        [14, 15, 17, 18, 19, 99],\\n        [14, 16, 19, 26, 33, 35],\\n        [15, 16, 19, 20, 99, 99],\\n        [16, 17, 18, 20, 21, 35],\\n        [11, 18, 19, 21, 22, 23], //20\\n        [19, 20, 23, 35, 99, 99],\\n        [20, 21, 23, 24, 99, 99],\\n        [20, 21, 22, 24, 25, 35],\\n        [22, 23, 25, 99, 99, 99],\\n        [23, 24, 99, 99, 99, 99],\\n        [17, 27, 33, 34, 99, 99],\\n        [26, 28, 30, 31, 34, 99],\\n        [27, 30, 29, 99, 99, 99],\\n        [28, 30, 31, 32, 0, 99],\\n        [27, 28, 29, 31, 99, 99],\\n        [29, 30, 27, 34, 32, 99],\\n        [29, 31, 99, 99, 99, 99],\\n        [17, 26, 34, 36, 35, 99],\\n        [31, 27, 26, 33, 36, 37],\\n        [19, 17, 33, 36, 23, 21],\\n        [35, 33, 34, 37, 99, 99],\\n        [34, 36, 38, 99, 99, 99],\\n        [37, 39, 40, 99, 99, 99],\\n        [38, 41, 44, 99, 99, 99],\\n        [38, 39, 41, 99, 99, 99],\\n        [40, 39, 99, 99, 99, 99]\\n    ];\\n\\n    modifier onlyControls() {\\n        require(msg.sender == controls_address);\\n        _;\\n    }\\n\\n    constructor() {\\n        s_controlsSet = controlsAddressSent.FALSE;\\n    }\\n\\n    function setControlsAddress(address controls) external override {\\n        require(s_controlsSet == controlsAddressSent.FALSE);\\n        emit ReceivedControls(controls);\\n        controls_address = controls;\\n        s_controlsSet = controlsAddressSent.TRUE;\\n    }\\n\\n    // Initializes continents array with owner -1 (indicates no owner), and the troop bonuses of each continent.\\n    // As player comes to own a contient, owner will be changed to the player.\\n    function initializeContinents() external override onlyControls {\\n        for (uint8 i = 0; i < 6; i++) {\\n            s_continents[i].owner = 4; //@dev 0=p1, 1=p2, 2=p3, 3=p4, 4=available\\n            if (i == 0) {\\n                // North America\\n                s_continents[i].troopBonus = 5;\\n            } else if (i == 1) {\\n                // South America\\n                s_continents[i].troopBonus = 2;\\n            } else if (i == 2) {\\n                // Europe\\n                s_continents[i].troopBonus = 5;\\n            } else if (i == 3) {\\n                // Africa\\n                s_continents[i].troopBonus = 3;\\n            } else if (i == 4) {\\n                // Asia\\n                s_continents[i].troopBonus = 7;\\n            } else if (i == 5) {\\n                // Oceania\\n                s_continents[i].troopBonus = 2;\\n            }\\n        }\\n    }\\n\\n    function updateContinentsLoop(\\n        uint256 loopStart,\\n        uint256 loopEnd,\\n        uint8 continent\\n    ) internal {\\n        uint8 owner;\\n        uint8 prevOwner;\\n        for (uint256 i = loopStart; i < loopEnd; i++) {\\n            owner = s_territories[i].owner;\\n            // if continent owner is not previous owner, the loop will break since owner doesn't own continent\\n            if (i != loopEnd && owner != prevOwner) {\\n                s_continents[continent].owner = 4;\\n                break;\\n                // if prevOwner == currentOwner, then the owner owns the continent\\n            } else if (i == loopEnd - 1 && owner == prevOwner) {\\n                s_continents[continent].owner = owner;\\n            }\\n            prevOwner = s_territories[i].owner;\\n        }\\n    }\\n\\n    function updateContinents() external override onlyControls {\\n        // North America\\n        updateContinentsLoop(0, 9, 0);\\n        // South America\\n        updateContinentsLoop(9, 13, 1);\\n        // Europe\\n        updateContinentsLoop(13, 20, 2);\\n        // Africa\\n        updateContinentsLoop(20, 26, 3);\\n        // Asia\\n        updateContinentsLoop(26, 38, 4);\\n        // Australia\\n        updateContinentsLoop(38, 42, 5);\\n    }\\n\\n    function getAllTerritories() public view returns (Territory_Info[42] memory) {\\n        return s_territories;\\n    }\\n\\n    function getTerritories(uint256 territoryId) public view returns (Territory_Info memory) {\\n        return s_territories[territoryId];\\n    }\\n\\n    /* Controls Functions */\\n    function getContinentBonus(uint256 continent) external view override returns (uint8) {\\n        return s_continents[continent].troopBonus;\\n    }\\n\\n    function getContinentOwner(uint256 continent) external view override returns (uint8) {\\n        return s_continents[continent].owner;\\n    }\\n\\n    function getContinentInfo() public view returns (Continent_Info[6] memory) {\\n        return s_continents;\\n    }\\n\\n    function pushToTerritories(uint256 territory, uint8 playerAwarded) external onlyControls {\\n        s_territories[territory].owner = playerAwarded;\\n        s_territories[territory].troops = 1;\\n    }\\n\\n    function addTroopToTerritory(uint256 index) external override onlyControls {\\n        ++s_territories[index].troops;\\n    }\\n\\n    function removeTroopFromTerritory(uint256 index) external override onlyControls {\\n        s_territories[index].troops--;\\n    }\\n\\n    function getNeighbours(uint256 territory) external view override onlyControls returns (uint8[] memory) {\\n        return s_neighbours[territory];\\n    }\\n\\n    function getTerritoryOwner(uint256 j) public view override returns (uint8 owner) {\\n        return s_territories[j].owner;\\n    }\\n\\n    function getTroopCount(uint256 territory) public view override returns (uint256) {\\n        return s_territories[territory].troops;\\n    }\\n\\n    function changeOwner(uint256 territory, uint8 newOwner) external override onlyControls {\\n        s_territories[territory].owner = newOwner;\\n    }\\n\\n    function resetData() external override onlyControls {\\n        delete s_territories;\\n    }\\n}\\n\",\"keccak256\":\"0x6c617fb324511db6bf19a1dac33cc37c9bfc7abe38644cc1d348248a22b23697\",\"license\":\"MIT\"},\"contracts/Main.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/AutomationCompatible.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n/**@title Cryptorisk Main Contract\\n * @author Michael King and Mitchell Spencer\\n * @dev Implements the Chainlink VRF V2\\n */\\n\\ninterface IControls {\\n    function set_players(address payable[] memory) external;\\n\\n    function push_to_territories(uint256 territory, uint8 playerAwarded) external;\\n\\n    function get_territory_owner(uint256) external returns (uint256);\\n\\n    function add_troop_to_territory(uint256) external;\\n\\n    function set_main_address(address main) external;\\n\\n    function deploy_control(uint8 amountToDeploy, uint8 location) external returns (bool);\\n\\n    function attack_control(\\n        uint8 territoryOwned,\\n        uint8 territoryAttacking,\\n        uint256 troopQuantity\\n    ) external;\\n\\n    function fortify_control(\\n        uint8 territoryMovingFrom,\\n        uint8 territoryMovingTo,\\n        uint256 troopsMoving\\n    ) external returns (bool);\\n\\n    function get_troops_to_deploy() external view returns (uint8);\\n\\n    function getPlayerTurn() external view returns (address);\\n\\n    function getAttackStatus() external view returns (bool);\\n}\\n\\ncontract Main is VRFConsumerBaseV2, AutomationCompatibleInterface {\\n    /* Type declarations */\\n    enum LobbyState {\\n        OPEN,\\n        CLOSED\\n    }\\n    enum GameState {\\n        DEPLOY,\\n        ATTACK,\\n        FORTIFY,\\n        INACTIVE\\n    }\\n    enum RandomState {\\n        RECEIVED,\\n        NOT\\n    }\\n\\n    enum mainAddressSent {\\n        TRUE,\\n        FALSE\\n    }\\n\\n    /* Variables */\\n    // Chainlink VRF Variables\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    uint64 private immutable i_subscriptionId;\\n    bytes32 private immutable i_gasLane;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n\\n    // Setup Variables\\n    uint256 private immutable i_entranceFee;\\n    address private immutable controls_address;\\n    address private immutable data_address;\\n\\n    // Used to track if player receives enough territory.\\n    GameState public s_gameState;\\n    LobbyState public s_lobbyState;\\n    RandomState public s_hasRandomWords;\\n    address payable[] public s_players;\\n    address public player_turn;\\n    mainAddressSent public s_mainSet;\\n    mapping(address => bool) public duplicateAddresses;\\n    address payable[] public s_lobbyEntrants;\\n    uint256 randomWord;\\n    //uint256 randomWordTroops;\\n    // uint256[] s_randomWordsArrayTerritories;\\n    // uint256[] s_randomWordsArrayTroops;\\n\\n    /* Events */\\n    event RequestedRandomness(uint256 indexed requestId);\\n    event gotRandomness();\\n    event GameSetupComplete();\\n    event PlayerJoinedLobby(address indexed player);\\n    event GameStarting();\\n    event WinnerSentFunds(address indexed player);\\n    event MainReset();\\n\\n    /* Errors */\\n    error Transfer___Failed();\\n\\n    constructor(\\n        address vrfCoordinatorV2,\\n        uint64 subscriptionId,\\n        bytes32 gasLane, // keyHash\\n        uint32 callbackGasLimit,\\n        uint256 entranceFee,\\n        address controls,\\n        address data\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_subscriptionId = subscriptionId;\\n        i_gasLane = gasLane;\\n        i_callbackGasLimit = callbackGasLimit;\\n        i_entranceFee = entranceFee;\\n        s_lobbyState = LobbyState.OPEN;\\n        s_gameState = GameState.INACTIVE;\\n        s_mainSet = mainAddressSent.FALSE;\\n        controls_address = controls;\\n        data_address = data;\\n    }\\n\\n    /* Modifiers */\\n\\n    modifier onlyPlayer() {\\n        require(msg.sender == IControls(controls_address).getPlayerTurn());\\n        _;\\n    }\\n\\n    modifier onlyControls() {\\n        require(msg.sender == controls_address);\\n        _;\\n        //testttt\\n    }\\n\\n    /* Functions */\\n\\n    function enterLobby() public payable {\\n        require(msg.value >= i_entranceFee, \\\"Send More to Enter Lobby\\\");\\n        require(s_lobbyState == LobbyState.OPEN, \\\"Lobby is full\\\"); // require or if statement?\\n        require(duplicateAddresses[msg.sender] == false, \\\"You've already entered the game!\\\");\\n        s_players.push(payable(msg.sender));\\n        s_lobbyEntrants.push(payable(msg.sender));\\n        emit PlayerJoinedLobby(msg.sender);\\n        duplicateAddresses[msg.sender] = true;\\n        if (s_players.length == 4) {\\n            s_lobbyState = LobbyState.CLOSED;\\n            emit GameStarting();\\n            requestRandomness();\\n        }\\n    }\\n\\n    // function remove(uint256 index) public {\\n    //     playerSelection[index] = playerSelection[playerSelection.length - 1];\\n    //     playerSelection.pop();\\n    // }\\n\\n    // call this function as soon as contract is deployed\\n    function setMainAddress() public {\\n        require(s_mainSet == mainAddressSent.FALSE, \\\"Controls contract has already received Main address\\\");\\n        IControls(controls_address).set_main_address(address(this));\\n        s_mainSet = mainAddressSent.TRUE;\\n    }\\n\\n    function requestRandomness() private {\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            1\\n        );\\n        emit RequestedRandomness(requestId);\\n    }\\n\\n    // function randomWordsArrayTerritories() private {\\n    //     //turn into pure to save a lot of gas.\\n    //     uint256[] memory territories = new uint256[](42);\\n    //     uint256 randomLength = numDigits(randomWord);\\n    //     uint256 num;\\n    //     uint256 index;\\n    //     uint256 i;\\n    //     while (i < 42) {\\n    //         num = getDigitAtIndex(randomWord, index);\\n    //         if (num < 8) {\\n    //             territories[i] = (num % 4);\\n    //             //s_randomWordsArrayTerritories.push(num % 4);\\n    //             ++i;\\n    //         }\\n    //         if (index == randomLength - 1) {\\n    //             index = 0;\\n    //         }\\n    //         ++index;\\n    //     }\\n    //     assignTerritory(territories);\\n    // }\\n\\n    function randomWordsArrayTroops() private {\\n        uint256[] memory troops = new uint256[](42);\\n        uint256 randomLength = numDigits(randomWord);\\n        // uint256 randomLength;\\n        // //if (number < 0) digits = 1; // enable this line if '-' counts as a digit\\n        // while (randomWord != 0) {\\n        //     randomWord /= 10;\\n        //     ++randomLength;\\n        // }\\n        uint256 num;\\n        // uint256 num2;\\n        uint256 index;\\n        uint256 i;\\n        while (i < 42) {\\n            num = ((randomWord / (10**index)) % 10) + ((randomWord / (10**(index + 1))) % 10) * 10; // cheaper by 4k gas\\n            //num = getDigitAtIndex(randomWord, index) + getDigitAtIndex(randomWord, index + 1) * 10;\\n            troops[i] = num;\\n            ++i;\\n            if (index == randomLength - 2) {\\n                index = 0;\\n            }\\n            ++index;\\n        }\\n        assignTerritory(troops);\\n    }\\n\\n    function checkUpkeep(\\n        bytes memory /*checkData*/\\n    )\\n        public\\n        view\\n        override\\n        returns (\\n            bool upkeepNeeded,\\n            bytes memory /* performData */\\n        )\\n    {\\n        bool lobbyClosed = (s_lobbyState == LobbyState.CLOSED);\\n        bool hasPlayers = (s_players.length == 4);\\n        bool hasBalance = address(this).balance > 0;\\n        bool hasRandomness = (s_hasRandomWords == RandomState.RECEIVED);\\n        upkeepNeeded = (lobbyClosed && hasPlayers && hasBalance && hasRandomness);\\n    }\\n\\n    function performUpkeep(\\n        bytes calldata /* performData */\\n    ) external override {\\n        //randomWordsArrayTerritories();\\n        randomWordsArrayTroops();\\n        emit GameSetupComplete();\\n        s_gameState = GameState.DEPLOY;\\n        IControls(controls_address).set_players(s_players);\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256, /* requestId */\\n        uint256[] memory randomWords\\n    ) internal override {\\n        emit gotRandomness();\\n        randomWord = randomWords[0];\\n        // randomWordTerritories = randomWords[0];\\n        // randomWordTroops = randomWords[0];\\n    }\\n\\n    /**\\n     * Function receives array of 42 random words which are then used to assign each territory (0-41) an owner (0-3).\\n     * Mutates a globally declared array s_territories.\\n     */\\n\\n    function assignTerritory(uint256[] memory territories) private {\\n        uint256[4] memory territoriesAssigned;\\n        uint8[4] memory playerSelection = [0, 1, 2, 3];\\n        // Eligible players to be assigned territory, each is popped until no players left to receive.\\n        uint8 territoryCap = 10; // Initial cap is 10, moves up to 11 after two players assigned 10.\\n        uint8 remainingPlayers = 4; // Ticks down as players hit their territory cap\\n        uint256 indexAssignedTerritory; // Index of playerSelection that contains a list of eligible players to receive territory.\\n        uint8 playerAwarded; // Stores the player to be awarded territory, for pushing into the s_territories array.'\\n        for (uint256 i; i < 42; ++i) {\\n            //console.log(territories[i]);\\n            indexAssignedTerritory = territories[i] % remainingPlayers; // Calculates which index from playerSelection will receive the territory\\n            playerAwarded = playerSelection[indexAssignedTerritory]; // Player to be awarded territory\\n            IControls(controls_address).push_to_territories(i, playerAwarded);\\n            ++territoriesAssigned[playerAwarded];\\n            if (territoriesAssigned[playerAwarded] == territoryCap) {\\n                delete playerSelection[indexAssignedTerritory]; // Removes awarded player from the array upon hitting territory cap.\\n                // remove(indexAssignedTerritory);\\n                playerSelection[indexAssignedTerritory] = playerSelection[playerSelection.length - 1];\\n                // playerSelection.pop();\\n                --remainingPlayers;\\n                if (remainingPlayers == 2) {\\n                    territoryCap = 11; // Moves up instead of down, to remove situation where the cap goes down and we have players already on the cap then receiving too much territory.\\n                }\\n            }\\n        }\\n        assignTroops(territories, territoriesAssigned);\\n    }\\n\\n    function assignTroops(uint256[] memory troops, uint256[4] memory territoriesAssigned) private {\\n        uint256 randomWordsIndex;\\n        // s_territories.length == 42\\n        // playerTerritoryIndexes.length == 10 or 11\\n        uint256 index0 = 0;\\n        uint256[] memory playerTerritoryIndexes0 = new uint256[](territoriesAssigned[0]);\\n        uint256 index1 = 0;\\n        uint256[] memory playerTerritoryIndexes1 = new uint256[](territoriesAssigned[1]);\\n        uint256 index2 = 0;\\n        uint256[] memory playerTerritoryIndexes2 = new uint256[](territoriesAssigned[2]);\\n        uint256 index3 = 0;\\n        uint256[] memory playerTerritoryIndexes3 = new uint256[](territoriesAssigned[3]);\\n        for (uint256 j = 0; j < 42; ++j) {\\n            if (IControls(controls_address).get_territory_owner(j) == 0) {\\n                playerTerritoryIndexes0[index0++] = j;\\n            } else if (IControls(controls_address).get_territory_owner(j) == 1) {\\n                playerTerritoryIndexes1[index1++] = j;\\n            } else if (IControls(controls_address).get_territory_owner(j) == 2) {\\n                playerTerritoryIndexes2[index2++] = j;\\n            } else if (IControls(controls_address).get_territory_owner(j) == 3) {\\n                playerTerritoryIndexes3[index3++] = j;\\n            }\\n        }\\n        for (uint256 j; j < 20; ++j) {\\n            uint256 territoryAssignedTroop = troops[randomWordsIndex] % territoriesAssigned[0];\\n            if (territoriesAssigned[0] == 11 && j != 19) {\\n                IControls(controls_address).add_troop_to_territory(playerTerritoryIndexes0[territoryAssignedTroop]);\\n            } else if (territoriesAssigned[0] == 10) {\\n                IControls(controls_address).add_troop_to_territory(playerTerritoryIndexes0[territoryAssignedTroop]);\\n            }\\n            territoryAssignedTroop = troops[randomWordsIndex] % territoriesAssigned[1];\\n            if (territoriesAssigned[1] == 11 && j != 19) {\\n                IControls(controls_address).add_troop_to_territory(playerTerritoryIndexes1[territoryAssignedTroop]);\\n            } else if (territoriesAssigned[1] == 10) {\\n                IControls(controls_address).add_troop_to_territory(playerTerritoryIndexes1[territoryAssignedTroop]);\\n            }\\n            territoryAssignedTroop = troops[randomWordsIndex] % territoriesAssigned[2];\\n            if (territoriesAssigned[2] == 11 && j != 19) {\\n                IControls(controls_address).add_troop_to_territory(playerTerritoryIndexes2[territoryAssignedTroop]);\\n            } else if (territoriesAssigned[2] == 10) {\\n                IControls(controls_address).add_troop_to_territory(playerTerritoryIndexes2[territoryAssignedTroop]);\\n            }\\n            territoryAssignedTroop = troops[randomWordsIndex++] % territoriesAssigned[3];\\n            if (territoriesAssigned[3] == 11 && j != 19) {\\n                IControls(controls_address).add_troop_to_territory(playerTerritoryIndexes3[territoryAssignedTroop]);\\n            } else if (territoriesAssigned[3] == 10) {\\n                IControls(controls_address).add_troop_to_territory(playerTerritoryIndexes3[territoryAssignedTroop]);\\n            }\\n        }\\n\\n        // for (uint256 i; i < 4; ++i) {\\n        //     uint256[] memory playerTerritoryIndexes = new uint256[](territoriesAssigned[i]); // Initializes array of indexes for territories owned by player i\\n        //     uint256 index = 0;\\n        //     for (uint256 j = 0; j < 42; ++j) {\\n        //         if (IControls(controls_address).get_territory_owner(j) == i) {\\n        //             playerTerritoryIndexes[index++] = j;\\n        //         }\\n        //     }\\n        //     for (uint256 j; j < 30 - territoriesAssigned[i]; ++j) {\\n        //         uint256 territoryAssignedTroop = troops[randomWordsIndex++] % territoriesAssigned[i];\\n        //         IControls(controls_address).add_troop_to_territory(playerTerritoryIndexes[territoryAssignedTroop]);\\n        //     }\\n        //     randomWordsIndex = 0;\\n        // }\\n    }\\n\\n    function deploy(uint8 amountToDeploy, uint8 location) public onlyPlayer {\\n        require(s_gameState == GameState.DEPLOY, \\\"It is currently not deploy phase!\\\");\\n        require(\\n            amountToDeploy <= IControls(controls_address).get_troops_to_deploy(),\\n            \\\"You do not have that many troops to deploy!\\\"\\n        );\\n        bool troopsLeft = IControls(controls_address).deploy_control(amountToDeploy, location);\\n        if (troopsLeft == false) {\\n            s_gameState = GameState.ATTACK;\\n        }\\n    }\\n\\n    function attack(\\n        uint8 useThisTerritory,\\n        uint8 toAttackThisTerritory,\\n        uint256 withTroopQuantity\\n    ) public onlyPlayer {\\n        require(IControls(controls_address).getAttackStatus() == false);\\n        require(s_gameState == GameState.ATTACK, \\\"It is currently not attack phase!\\\");\\n        IControls(controls_address).attack_control(useThisTerritory, toAttackThisTerritory, withTroopQuantity);\\n    }\\n\\n    // player clicks this button when they have finished attacking\\n    function finishAttack() public onlyPlayer {\\n        require(IControls(controls_address).getAttackStatus() == false);\\n        s_gameState = GameState.FORTIFY;\\n    }\\n\\n    function fortify(\\n        uint8 territoryMovingFrom,\\n        uint8 territoryMovingTo,\\n        uint256 troopsMoving\\n    ) public onlyPlayer {\\n        require(s_gameState == GameState.FORTIFY, \\\"It is currently not fortify phase!\\\");\\n        require(\\n            IControls(controls_address).fortify_control(territoryMovingFrom, territoryMovingTo, troopsMoving) == true,\\n            \\\"Your fortification attempt failed\\\"\\n        );\\n        s_gameState = GameState.DEPLOY;\\n    }\\n\\n    function payWinner(address winner) public onlyControls returns (bool) {\\n        (bool success, ) = winner.call{value: address(this).balance}(\\\"\\\");\\n        if (!success) {\\n            revert Transfer___Failed();\\n        }\\n        emit WinnerSentFunds(winner);\\n        resetMain();\\n        return success;\\n    }\\n\\n    /** Pure Functions */\\n\\n    function numDigits(uint256 number) public pure returns (uint256) {\\n        uint256 digits;\\n        //if (number < 0) digits = 1; // enable this line if '-' counts as a digit\\n        while (number != 0) {\\n            number /= 10;\\n            ++digits;\\n        }\\n        return digits;\\n    }\\n\\n    function getDigitAtIndex(uint256 n, uint256 index) public pure returns (uint256) {\\n        return (n / (10**index)) % 10;\\n    }\\n\\n    /** Getter Functions */\\n\\n    // function getRandomWordsArrayTerritories() public view returns (uint256[] memory) {\\n    //     return s_randomWordsArrayTerritories;\\n    // }\\n\\n    // function getRandomWordsArrayTroops() public view returns (uint256[] memory) {\\n    //     return s_randomWordsArrayTroops;\\n    // }\\n\\n    // function getRandomWordsArrayIndexTerritories(uint256 index) public view returns (uint256) {\\n    //     return s_randomWordsArrayTerritories[index];\\n    // }\\n\\n    // function getRandomWordsArrayIndexTroops(uint256 index) public view returns (uint256) {\\n    //     return s_randomWordsArrayTroops[index];\\n    // }\\n\\n    function getSubscriptionId() public view returns (uint64) {\\n        return i_subscriptionId;\\n    }\\n\\n    function getGasLane() public view returns (bytes32) {\\n        return i_gasLane;\\n    }\\n\\n    function getCallbackGasLimit() public view returns (uint32) {\\n        return i_callbackGasLimit;\\n    }\\n\\n    function getRequestConfirmations() public pure returns (uint256) {\\n        return REQUEST_CONFIRMATIONS;\\n    }\\n\\n    function getPlayer(uint256 index) public view returns (address) {\\n        return s_players[index];\\n    }\\n\\n    function getNumberOfPlayers() public view returns (uint256) {\\n        return s_players.length;\\n    }\\n\\n    function getEntranceFee() public view returns (uint256) {\\n        return i_entranceFee;\\n    }\\n\\n    function getLobbyState() public view returns (LobbyState) {\\n        return s_lobbyState;\\n    }\\n\\n    // Resets everything\\n    function resetMain() internal {\\n        s_lobbyState = LobbyState.OPEN;\\n        s_players = new address payable[](0);\\n        s_gameState = GameState.INACTIVE;\\n        for (uint256 i; i < s_lobbyEntrants.length; ++i) {\\n            duplicateAddresses[s_lobbyEntrants[i]] = false;\\n        }\\n        emit MainReset();\\n    }\\n\\n    // function insertionSort(uint8[4] memory arr) private pure {\\n    //     uint256 i;\\n    //     uint256 key;\\n    //     int256 j;\\n    //     for (i = 1; i < arr.length; ++i) {\\n    //         key = arr[i];\\n    //         j = int256(i - 1);\\n    //         while (j >= 0 && arr[uint256(j)] < key) {\\n    //             arr[uint256(j + 1)] = arr[uint256(j)];\\n    //             --j;\\n    //         }\\n    //         arr[uint256(j + 1)] = uint8(key);\\n    //     }\\n    // }\\n}\\n\",\"keccak256\":\"0xdfc95b4d416ccd2432c9a4e6015c56f7237a96c9ad9548e86be126b180a8522b\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012b5760003560e01c80637cea559e116100ad578063b087699511610071578063b087699514610332578063b66831e21461034e578063c21c58f81461036a578063d28859101461039a578063d86819d7146103ca5761012b565b80637cea559e1461026757806389290109146102985780638d068884146102c8578063906b1871146102f8578063a3f09a93146103165761012b565b80634423b787116100f45780634423b787146101e9578063478c4e0e1461021957806353964cc01461022357806364b6667d146102415780637ce5c9691461024b5761012b565b8062371dc5146101305780630452338e1461014e5780631e8d6c3c1461017e5780633bee987f146101ae57806343a964cf146101b8575b600080fd5b6101386103e6565b6040516101459190611199565b60405180910390f35b610168600480360381019061016391906111e6565b61045f565b6040516101759190611222565b60405180910390f35b610198600480360381019061019391906111e6565b61048d565b6040516101a59190611222565b60405180910390f35b6101b66104bb565b005b6101d260048036038101906101cd91906111e6565b610714565b6040516101e092919061124c565b60405180910390f35b61020360048036038101906101fe91906111e6565b61074b565b6040516102109190611222565b60405180910390f35b61022161077d565b005b61022b6107e7565b60405161023891906112ec565b60405180910390f35b6102496107fa565b005b61026560048036038101906102609190611333565b6108aa565b005b610281600480360381019061027c91906111e6565b61095d565b60405161028f929190611373565b60405180910390f35b6102b260048036038101906102ad91906111e6565b61099e565b6040516102bf919061144b565b60405180910390f35b6102e260048036038101906102dd91906111e6565b610a94565b6040516102ef919061149c565b60405180910390f35b610300610aed565b60405161030d9190611582565b60405180910390f35b610330600480360381019061032b91906111e6565b610b76565b005b61034c600480360381019061034791906115fc565b610c02565b005b61036860048036038101906103639190611333565b610cf3565b005b610384600480360381019061037f9190611629565b610d85565b6040516103919190611222565b60405180910390f35b6103b460048036038101906103af91906111e6565b610dd4565b6040516103c19190611669565b60405180910390f35b6103e460048036038101906103df91906111e6565b610df9565b005b6103ee610fb8565b6006602a80602002604051908101604052809291906000905b82821015610456578382600202016040518060400160405290816000820160009054906101000a900460ff1660ff1660ff16815260200160018201548152505081526020019060010190610407565b50505050905090565b600080826006811061047457610473611684565b5b0160000160009054906101000a900460ff169050919050565b60008082600681106104a2576104a1611684565b5b0160000160019054906101000a900460ff169050919050565b605a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461051557600080fd5b60005b60068160ff16101561071157600460008260ff166006811061053d5761053c611684565b5b0160000160006101000a81548160ff021916908360ff16021790555060008160ff16141561059f57600560008260ff166006811061057e5761057d611684565b5b0160000160016101000a81548160ff021916908360ff1602179055506106fe565b60018160ff1614156105e557600260008260ff16600681106105c4576105c3611684565b5b0160000160016101000a81548160ff021916908360ff1602179055506106fd565b60028160ff16141561062b57600560008260ff166006811061060a57610609611684565b5b0160000160016101000a81548160ff021916908360ff1602179055506106fc565b60038160ff16141561067157600360008260ff16600681106106505761064f611684565b5b0160000160016101000a81548160ff021916908360ff1602179055506106fb565b60048160ff1614156106b757600760008260ff166006811061069657610695611684565b5b0160000160016101000a81548160ff021916908360ff1602179055506106fa565b60058160ff1614156106f957600260008260ff16600681106106dc576106db611684565b5b0160000160016101000a81548160ff021916908360ff1602179055505b5b5b5b5b5b8080610709906116e2565b915050610518565b50565b600681602a811061072457600080fd5b600202016000915090508060000160009054906101000a900460ff16908060010154905082565b6000600682602a811061076157610760611684565b5b6002020160000160009054906101000a900460ff169050919050565b605a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107d757600080fd5b600660006107e59190610fe6565b565b605a60149054906101000a900460ff1681565b605a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461085457600080fd5b610862600060096000610e87565b6108706009600d6001610e87565b61087e600d60146002610e87565b61088c6014601a6003610e87565b61089a601a60266004610e87565b6108a86026602a6005610e87565b565b605a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461090457600080fd5b80600683602a811061091957610918611684565b5b6002020160000160006101000a81548160ff021916908360ff1602179055506001600683602a811061094e5761094d611684565b5b60020201600101819055505050565b6000816006811061096d57600080fd5b016000915090508060000160009054906101000a900460ff16908060000160019054906101000a900460ff16905082565b6060605a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146109fa57600080fd5b605b8281548110610a0e57610a0d611684565b5b90600052602060002001805480602002602001604051908101604052809291908181526020018280548015610a8857602002820191906000526020600020906000905b82829054906101000a900460ff1660ff1681526020019060010190602082600001049283019260010382029150808411610a515790505b50505050509050919050565b610a9c610ffc565b600682602a8110610ab057610aaf611684565b5b600202016040518060400160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016001820154815250509050919050565b610af5611019565b6000600680602002604051908101604052809291906000905b82821015610b6d578382016040518060400160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900460ff1660ff1660ff168152505081526020019060010190610b0e565b50505050905090565b605a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610bd057600080fd5b600681602a8110610be457610be3611684565b5b6002020160010160008154610bf89061170c565b9190508190555050565b600180811115610c1557610c14611275565b5b605a60149054906101000a900460ff166001811115610c3757610c36611275565b5b14610c4157600080fd5b8073ffffffffffffffffffffffffffffffffffffffff167ff489abb24c0b02d87da58652d32937ca705601f4d9b20bf80d471f2a74d2c5a560405160405180910390a280605a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000605a60146101000a81548160ff02191690836001811115610ceb57610cea611275565b5b021790555050565b605a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d4d57600080fd5b80600683602a8110610d6257610d61611684565b5b6002020160000160006101000a81548160ff021916908360ff1602179055505050565b605b8281548110610d9557600080fd5b906000526020600020018181548110610dad57600080fd5b9060005260206000209060209182820401919006915091509054906101000a900460ff1681565b6000600682602a8110610dea57610de9611684565b5b60020201600101549050919050565b605a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e5357600080fd5b600681602a8110610e6757610e66611684565b5b600202016001016000815480929190610e7f90611755565b919050555050565b60008060008590505b84811015610fb057600681602a8110610eac57610eab611684565b5b6002020160000160009054906101000a900460ff169250848114158015610ed957508160ff168360ff1614155b15610f1857600460008560ff1660068110610ef757610ef6611684565b5b0160000160006101000a81548160ff021916908360ff160217905550610fb0565b600185610f25919061177f565b81148015610f3857508160ff168360ff16145b15610f72578260008560ff1660068110610f5557610f54611684565b5b0160000160006101000a81548160ff021916908360ff1602179055505b600681602a8110610f8657610f85611684565b5b6002020160000160009054906101000a900460ff1691508080610fa89061170c565b915050610e90565b505050505050565b604051806105400160405280602a905b610fd0610ffc565b815260200190600190039081610fc85790505090565b5080602a6002020190610ff99190611046565b50565b6040518060400160405280600060ff168152602001600081525090565b6040518060c001604052806006905b611030611079565b8152602001906001900390816110285790505090565b5b8082111561107557600080820160006101000a81549060ff0219169055600182016000905550600201611047565b5090565b6040518060400160405280600060ff168152602001600060ff1681525090565b6000602a9050919050565b600081905092915050565b6000819050919050565b600060ff82169050919050565b6110cf816110b9565b82525050565b6000819050919050565b6110e8816110d5565b82525050565b60408201600082015161110460008501826110c6565b50602082015161111760208501826110df565b50505050565b600061112983836110ee565b60408301905092915050565b6000602082019050919050565b61114b81611099565b61115581846110a4565b9250611160826110af565b8060005b83811015611191578151611178878261111d565b965061118383611135565b925050600181019050611164565b505050505050565b6000610a80820190506111af6000830184611142565b92915050565b600080fd5b6111c3816110d5565b81146111ce57600080fd5b50565b6000813590506111e0816111ba565b92915050565b6000602082840312156111fc576111fb6111b5565b5b600061120a848285016111d1565b91505092915050565b61121c816110b9565b82525050565b60006020820190506112376000830184611213565b92915050565b611246816110d5565b82525050565b60006040820190506112616000830185611213565b61126e602083018461123d565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600281106112b5576112b4611275565b5b50565b60008190506112c6826112a4565b919050565b60006112d6826112b8565b9050919050565b6112e6816112cb565b82525050565b600060208201905061130160008301846112dd565b92915050565b611310816110b9565b811461131b57600080fd5b50565b60008135905061132d81611307565b92915050565b6000806040838503121561134a576113496111b5565b5b6000611358858286016111d1565b92505060206113698582860161131e565b9150509250929050565b60006040820190506113886000830185611213565b6113956020830184611213565b9392505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006113d483836110c6565b60208301905092915050565b6000602082019050919050565b60006113f88261139c565b61140281856113a7565b935061140d836113b8565b8060005b8381101561143e57815161142588826113c8565b9750611430836113e0565b925050600181019050611411565b5085935050505092915050565b6000602082019050818103600083015261146581846113ed565b905092915050565b60408201600082015161148360008501826110c6565b50602082015161149660208501826110df565b50505050565b60006040820190506114b1600083018461146d565b92915050565b600060069050919050565b600081905092915050565b6000819050919050565b6040820160008201516114ed60008501826110c6565b50602082015161150060208501826110c6565b50505050565b600061151283836114d7565b60408301905092915050565b6000602082019050919050565b611534816114b7565b61153e81846114c2565b9250611549826114cd565b8060005b8381101561157a5781516115618782611506565b965061156c8361151e565b92505060018101905061154d565b505050505050565b600061018082019050611598600083018461152b565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006115c98261159e565b9050919050565b6115d9816115be565b81146115e457600080fd5b50565b6000813590506115f6816115d0565b92915050565b600060208284031215611612576116116111b5565b5b6000611620848285016115e7565b91505092915050565b600080604083850312156116405761163f6111b5565b5b600061164e858286016111d1565b925050602061165f858286016111d1565b9150509250929050565b600060208201905061167e600083018461123d565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006116ed826110b9565b915060ff821415611701576117006116b3565b5b600182019050919050565b6000611717826110d5565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561174a576117496116b3565b5b600182019050919050565b6000611760826110d5565b91506000821415611774576117736116b3565b5b600182039050919050565b600061178a826110d5565b9150611795836110d5565b9250828210156117a8576117a76116b3565b5b82820390509291505056fea2646970667358221220ebe2236d08c57e9330c7031edef0da7c06a31be8eccefea8121b42b0c56aad4d64736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1809,
        "contract": "contracts/Data.sol:Data",
        "label": "s_continents",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_struct(Continent_Info)1796_storage)6_storage"
      },
      {
        "astId": 1814,
        "contract": "contracts/Data.sol:Data",
        "label": "s_territories",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_struct(Territory_Info)1801_storage)42_storage"
      },
      {
        "astId": 1816,
        "contract": "contracts/Data.sol:Data",
        "label": "controls_address",
        "offset": 0,
        "slot": "90",
        "type": "t_address"
      },
      {
        "astId": 1819,
        "contract": "contracts/Data.sol:Data",
        "label": "s_controlsSet",
        "offset": 20,
        "slot": "90",
        "type": "t_enum(controlsAddressSent)1804"
      },
      {
        "astId": 2118,
        "contract": "contracts/Data.sol:Data",
        "label": "s_neighbours",
        "offset": 0,
        "slot": "91",
        "type": "t_array(t_array(t_uint8)dyn_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_array(t_uint8)dyn_storage)dyn_storage": {
        "base": "t_array(t_uint8)dyn_storage",
        "encoding": "dynamic_array",
        "label": "uint8[][]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Continent_Info)1796_storage)6_storage": {
        "base": "t_struct(Continent_Info)1796_storage",
        "encoding": "inplace",
        "label": "struct Data.Continent_Info[6]",
        "numberOfBytes": "192"
      },
      "t_array(t_struct(Territory_Info)1801_storage)42_storage": {
        "base": "t_struct(Territory_Info)1801_storage",
        "encoding": "inplace",
        "label": "struct Data.Territory_Info[42]",
        "numberOfBytes": "2688"
      },
      "t_array(t_uint8)dyn_storage": {
        "base": "t_uint8",
        "encoding": "dynamic_array",
        "label": "uint8[]",
        "numberOfBytes": "32"
      },
      "t_enum(controlsAddressSent)1804": {
        "encoding": "inplace",
        "label": "enum Data.controlsAddressSent",
        "numberOfBytes": "1"
      },
      "t_struct(Continent_Info)1796_storage": {
        "encoding": "inplace",
        "label": "struct Data.Continent_Info",
        "members": [
          {
            "astId": 1793,
            "contract": "contracts/Data.sol:Data",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 1795,
            "contract": "contracts/Data.sol:Data",
            "label": "troopBonus",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Territory_Info)1801_storage": {
        "encoding": "inplace",
        "label": "struct Data.Territory_Info",
        "members": [
          {
            "astId": 1798,
            "contract": "contracts/Data.sol:Data",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 1800,
            "contract": "contracts/Data.sol:Data",
            "label": "troops",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}