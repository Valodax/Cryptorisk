{
  "address": "0xBA6BfBa894B5cAF04c3462A5C8556fFBa4de6782",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "GameStarting",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "PlayerJoinedLobby",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "ReceivedRandomWords",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedRandomness",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "callRequestRandomness",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterLobby",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCallbackGasLimit",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLobbyState",
      "outputs": [
        {
          "internalType": "enum Setup.LobbyState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRandomWordsArray",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "territoryId",
          "type": "uint256"
        }
      ],
      "name": "getTerritories",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "owner",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "troops",
              "type": "uint256"
            }
          ],
          "internalType": "struct Setup.Territory_Info",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTerritoryState",
      "outputs": [
        {
          "internalType": "enum Setup.TerritoryState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "testTerritoryAssignment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb06f66399586e20592f608e69b72995d52c2eafc4f7bd23b2f243d9182d683c3",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xBA6BfBa894B5cAF04c3462A5C8556fFBa4de6782",
    "transactionIndex": 0,
    "gasUsed": "1207118",
    "logsBloom": "0x
    "blockHash": "0xf0e6e35abcdde49cd821912841a20f26921f6d8191f9bd837c48e37e416f45eb",
    "transactionHash": "0xb06f66399586e20592f608e69b72995d52c2eafc4f7bd23b2f243d9182d683c3",
    "logs": [],
    "blockNumber": 1011,
    "cumulativeGasUsed": "1207118",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xF978b011bcf604b201996FEb3E53eD3D52F0A90F",
    "1",
    "0x79d3d8832d904592c0bf9818b621522c988bb8b0c05cdc3b15aea1b6e8db0c15",
    "100000000000000000",
    "2000000"
  ],
  "numDeployments": 20,
  "solcInputHash": "2ab3a0ff893c180d295457e63886dae0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"GameStarting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"PlayerJoinedLobby\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ReceivedRandomWords\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRandomness\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"callRequestRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterLobby\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCallbackGasLimit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLobbyState\",\"outputs\":[{\"internalType\":\"enum Setup.LobbyState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRandomWordsArray\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"territoryId\",\"type\":\"uint256\"}],\"name\":\"getTerritories\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"owner\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"troops\",\"type\":\"uint256\"}],\"internalType\":\"struct Setup.Territory_Info\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTerritoryState\",\"outputs\":[{\"internalType\":\"enum Setup.TerritoryState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testTerritoryAssignment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Mitchell Spencer\",\"details\":\"Implements the Chainlink VRF V2\",\"kind\":\"dev\",\"methods\":{},\"title\":\"A sample Raffle Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getRandomWordsArray(uint256)\":{\"notice\":\"Getter Functions \"},\"testTerritoryAssignment()\":{\"notice\":\"Tester Functions \"}},\"notice\":\"Cryptorisk setup contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Setup.sol\":\"Setup\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"contracts/Setup.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\n\\n/* Errors */\\nerror Raffle__UpkeepNotNeeded(\\n    uint256 currentBalance,\\n    uint256 numPlayers,\\n    uint256 gameState\\n);\\nerror Lobby__TransferFailed();\\n\\n/**@title A sample Raffle Contract\\n * @author Mitchell Spencer\\n * @notice Cryptorisk setup contract.\\n * @dev Implements the Chainlink VRF V2\\n */\\n\\ncontract Setup is VRFConsumerBaseV2 {\\n    /* Type declarations */\\n    enum LobbyState {\\n        OPEN,\\n        CLOSED\\n    }\\n    enum TerritoryState {\\n        INCOMPLETE,\\n        COMPLETE\\n    }\\n    enum SetupState {\\n        INCOMPLETE,\\n        COMPLETE\\n    }\\n\\n    // enum Territory {\\n    //     Alaska,\\n    //     NorthwestTerritory,\\n    //     Greenland,\\n    //     Quebec,\\n    //     Ontario,\\n    //     Alberta,\\n    //     WesternUS,\\n    //     EasternUS,\\n    //     CentralAmerica,\\n    //     Venezuela,\\n    //     Peru,\\n    //     Argentina,\\n    //     Brazil,\\n    //     Iceland,\\n    //     GreatBritain,\\n    //     WesternEurope,\\n    //     SouthernEurope,\\n    //     NorthernEurope,\\n    //     Scandinavia,\\n    //     Ukraine,\\n    //     NorthAfrica,\\n    //     Egypt,\\n    //     EastAfrica,\\n    //     Congo,\\n    //     SouthAfrica,\\n    //     Madagascar,\\n    //     MiddleEast,\\n    //     Afghanistan,\\n    //     Ural,\\n    //     Siberia,\\n    //     Yakutsk,\\n    //     Kamchatka,\\n    //     Irkutsk,\\n    //     Mongolia,\\n    //     Japan,\\n    //     China,\\n    //     India,\\n    //     Siam,\\n    //     Indonesia,\\n    //     NewGuinea,\\n    //     WesternAustralia,\\n    //     EasternAustralia\\n    // }\\n    /* State variables */\\n    // Chainlink VRF Variables\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    uint64 private immutable i_subscriptionId;\\n    bytes32 private immutable i_gasLane;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n\\n    // Setup Variables\\n    uint256[] s_randomWordsArray;\\n    uint256 private immutable i_entranceFee;\\n    uint256 private s_lastTimeStamp;\\n    address private s_recentWinner;\\n    address payable[] private s_players;\\n    LobbyState private s_lobbyState;\\n    TerritoryState private s_territoryState;\\n    SetupState private s_setupState;\\n    Territory_Info[] private s_territories;\\n    uint8[4] private territoriesAssigned = [0, 0, 0, 0]; // Used to track if player receives enough territory.\\n\\n    struct Territory_Info {\\n        uint owner;\\n        uint256 troops;\\n    }\\n\\n    /* Events */\\n    event RequestedRandomness(uint256 indexed requestId);\\n    event PlayerJoinedLobby(address indexed player);\\n    event WinnerPicked(address indexed player);\\n    event GameStarting();\\n    event ReceivedRandomWords();\\n\\n    /* Functions */\\n    constructor(\\n        address vrfCoordinatorV2,\\n        uint64 subscriptionId,\\n        bytes32 gasLane, // keyHash\\n        uint256 entranceFee,\\n        uint32 callbackGasLimit\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_gasLane = gasLane;\\n        i_subscriptionId = subscriptionId;\\n        i_entranceFee = entranceFee;\\n        s_lobbyState = LobbyState.OPEN;\\n        s_lastTimeStamp = block.timestamp;\\n        i_callbackGasLimit = callbackGasLimit;\\n    }\\n\\n    function enterLobby() public payable {\\n        require(msg.value >= i_entranceFee, \\\"Send More to Enter Lobby\\\");\\n        require(s_lobbyState == LobbyState.OPEN, \\\"Lobby is full\\\"); // require or if statement?\\n        // Emit an event when we update an array\\n        s_players.push(payable(msg.sender));\\n        emit PlayerJoinedLobby(msg.sender);\\n        if (s_players.length == 4) {\\n            s_lobbyState = LobbyState.CLOSED;\\n            emit GameStarting();\\n            // requestRandomness(42);\\n        }\\n    }\\n\\n    function requestRandomness(uint32 num_words) private {\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            num_words\\n        );\\n        emit RequestedRandomness(requestId);\\n    }\\n\\n    function callRequestRandomness() external {\\n        uint32 num_words = 35;\\n        requestRandomness(num_words);\\n    }\\n\\n    /**\\n     * @dev This is the function that Chainlink VRF node\\n     * calls to send the money to the random winner.\\n     */\\n\\n    function fulfillRandomWords(\\n        uint256, /* requestId */\\n        uint256[] memory randomWords\\n    ) internal override {\\n        s_randomWordsArray = randomWords;\\n        emit ReceivedRandomWords();\\n        // if (s_territoryState == TerritoryState.INCOMPLETE) {\\n        //     assignTerritory(randomWords);\\n        // }\\n        // assignTroops(randomWords);\\n    }\\n\\n    /**\\n     * Function receives array of 42 random words which are then used to assign each territory (0-41) an owner (0-3).\\n     * Mutates a globally declared array s_territories.\\n     */\\n    function assignTerritory(uint256[] memory randomWords) private {\\n        uint8[4] memory playerSelection = [0, 1, 2, 3]; // Eligible players to be assigned territory, each is popped until no players left to receive.\\n        uint8 territoryCap = 10; // Initial cap is 10, moves up to 11 after two players assigned 10.\\n        uint8 remainingPlayers = 4; // Ticks down as players hit their territory cap\\n        uint256 indexAssignedTerritory; // Index of playerSelection that contains a list of eligible players to receive territory.\\n        uint8 playerAwarded; // Stores the player to be awarded territory, for pushing into the s_territories array.\\n        for (uint i = 0; i < randomWords.length; i++) {\\n            indexAssignedTerritory = randomWords[i] % remainingPlayers; // Calculates which index from playerSelection will receive the territory\\n            playerAwarded = playerSelection[indexAssignedTerritory]; // Player to be awarded territory\\n            s_territories.push(Territory_Info(playerAwarded, 1));\\n            territoriesAssigned[playerAwarded]++;\\n            if (territoriesAssigned[playerAwarded] == territoryCap) {\\n                delete playerSelection[playerAwarded]; // Removes awarded player from the array upon hitting territory cap.\\n                remainingPlayers--;\\n                if (remainingPlayers == 2) {\\n                    territoryCap = 11; // Moves up instead of down, to remove situation where the cap goes down and we have players already on the cap then receiving too much territory.\\n                }\\n            }\\n        }\\n        s_territoryState = TerritoryState.COMPLETE;\\n        //requestRandomness(78);\\n    }\\n\\n    function assignTroops(uint256[] memory randomWords) private {\\n        uint randomWordsIndex = 0;\\n        // s_territories.length == 42\\n        // playerTerritoryIndexes.length == 10 or 11\\n        for (uint i = 0; i < 4; i++) {\\n            uint[] memory playerTerritoryIndexes = new uint[](\\n                territoriesAssigned[i]\\n            ); // Initializes array of indexes for territories owned by player i\\n            uint index = 0;\\n            for (uint j = 0; j < s_territories.length; i++) {\\n                if (s_territories[j].owner == i) {\\n                    playerTerritoryIndexes[index++] = j;\\n                }\\n            }\\n            for (uint j = 0; j < 30 - territoriesAssigned[i]; j++) {\\n                uint territoryAssignedTroop = randomWords[randomWordsIndex++] %\\n                    territoriesAssigned[i];\\n                s_territories[playerTerritoryIndexes[territoryAssignedTroop]]\\n                    .troops++;\\n            }\\n        }\\n    }\\n\\n    /** Tester Functions */\\n    function testTerritoryAssignment() external {\\n        assignTerritory(s_randomWordsArray);\\n    }\\n\\n    /** Getter Functions */\\n\\n    function getRandomWordsArray(uint index) public view returns (uint256) {\\n        return s_randomWordsArray[index];\\n    }\\n\\n    function getCallbackGasLimit() public view returns (uint32) {\\n        return i_callbackGasLimit;\\n    }\\n\\n    function getLobbyState() public view returns (LobbyState) {\\n        return s_lobbyState;\\n    }\\n\\n    function getTerritoryState() public view returns (TerritoryState) {\\n        return s_territoryState;\\n    }\\n\\n    function getRequestConfirmations() public pure returns (uint256) {\\n        return REQUEST_CONFIRMATIONS;\\n    }\\n\\n    function getRecentWinner() public view returns (address) {\\n        return s_recentWinner;\\n    }\\n\\n    function getPlayer(uint256 index) public view returns (address) {\\n        return s_players[index];\\n    }\\n\\n    function getLastTimeStamp() public view returns (uint256) {\\n        return s_lastTimeStamp;\\n    }\\n\\n    function getEntranceFee() public view returns (uint256) {\\n        return i_entranceFee;\\n    }\\n\\n    function getNumberOfPlayers() public view returns (uint256) {\\n        return s_players.length;\\n    }\\n\\n    function getTerritories(uint territoryId)\\n        public\\n        view\\n        returns (Territory_Info memory)\\n    {\\n        return s_territories[territoryId];\\n    }\\n}\\n\",\"keccak256\":\"0x0023134a2fe91e24ada86fe614fcb806a6f2d505a9f222645f478ea205c014a2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101406040526040518060800160405280600060ff168152602001600060ff168152602001600060ff168152602001600060ff1681525060069060046200004892919062000174565b503480156200005657600080fd5b50604051620018b1380380620018b183398181016040528101906200007c91906200039a565b848073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508473ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508260e081815250508367ffffffffffffffff1660c08167ffffffffffffffff1660c01b815250508161012081815250506000600460006101000a81548160ff0219169083600181111562000145576200014462000422565b5b0217905550426001819055508063ffffffff166101008163ffffffff1660e01b81525050505050505062000451565b826004601f01602090048101928215620002025791602002820160005b83821115620001d157835183826101000a81548160ff021916908360ff160217905550926020019260010160208160000104928301926001030262000191565b8015620002005782816101000a81549060ff0219169055600101602081600001049283019260010302620001d1565b505b50905062000211919062000215565b5090565b5b808211156200023057600081600090555060010162000216565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002668262000239565b9050919050565b620002788162000259565b81146200028457600080fd5b50565b60008151905062000298816200026d565b92915050565b600067ffffffffffffffff82169050919050565b620002bd816200029e565b8114620002c957600080fd5b50565b600081519050620002dd81620002b2565b92915050565b6000819050919050565b620002f881620002e3565b81146200030457600080fd5b50565b6000815190506200031881620002ed565b92915050565b6000819050919050565b62000333816200031e565b81146200033f57600080fd5b50565b600081519050620003538162000328565b92915050565b600063ffffffff82169050919050565b620003748162000359565b81146200038057600080fd5b50565b600081519050620003948162000369565b92915050565b600080600080600060a08688031215620003b957620003b862000234565b5b6000620003c98882890162000287565b9550506020620003dc88828901620002cc565b9450506040620003ef8882890162000307565b9350506060620004028882890162000342565b9250506080620004158882890162000383565b9150509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160601c60a05160601c60c05160c01c60e0516101005160e01c610120516113ef620004c260003960008181610361015261057301526000818161075c0152610ace01526000610a8a01526000610aab01526000610a4e0152600081816103f9015261044d01526113ef6000f3fe6080604052600436106100e85760003560e01c8063790b86c71161008a578063de8be8e711610059578063de8be8e71461028d578063e55ae4e8146102b8578063fd6673f5146102f5578063feaf534814610320576100e8565b8063790b86c7146102045780638d0688841461021b578063c1c244e814610258578063d9eb8a4414610283576100e8565b80631fe543e3116100c65780631fe543e31461015a578063473f1ddc146101835780635ad964ae146101ae5780635f1b0fd8146101d9576100e8565b806309bc33a7146100ed57806309d69e6d146101185780630fb081df1461012f575b600080fd5b3480156100f957600080fd5b5061010261035d565b60405161010f9190610c30565b60405180910390f35b34801561012457600080fd5b5061012d610385565b005b34801561013b57600080fd5b506101446103e0565b6040516101519190610cc2565b60405180910390f35b34801561016657600080fd5b50610181600480360381019061017c9190610e76565b6103f7565b005b34801561018f57600080fd5b506101986104b7565b6040516101a59190610f13565b60405180910390f35b3480156101ba57600080fd5b506101c36104e1565b6040516101d09190610f76565b60405180910390f35b3480156101e557600080fd5b506101ee6104f8565b6040516101fb9190610c30565b60405180910390f35b34801561021057600080fd5b50610219610505565b005b34801561022757600080fd5b50610242600480360381019061023d9190610f91565b610517565b60405161024f9190610ffc565b60405180910390f35b34801561026457600080fd5b5061026d610567565b60405161027a9190610c30565b60405180910390f35b61028b610571565b005b34801561029957600080fd5b506102a2610758565b6040516102af9190611036565b60405180910390f35b3480156102c457600080fd5b506102df60048036038101906102da9190610f91565b610780565b6040516102ec9190610f13565b60405180910390f35b34801561030157600080fd5b5061030a6107c8565b6040516103179190610c30565b60405180910390f35b34801561032c57600080fd5b5061034760048036038101906103429190610f91565b6107d5565b6040516103549190610c30565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6103de60008054806020026020016040519081016040528092919081815260200182805480156103d457602002820191906000526020600020905b8154815260200190600101908083116103c0575b50505050506107fc565b565b6000600460009054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104a957337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016104a0929190611051565b60405180910390fd5b6104b38282610a03565b5050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600460019054906101000a900460ff16905090565b6000600361ffff16905090565b60006023905061051481610a4a565b50565b61051f610b93565b600582815481106105335761053261107a565b5b9060005260206000209060020201604051806040016040529081600082015481526020016001820154815250509050919050565b6000600154905090565b7f00000000000000000000000000000000000000000000000000000000000000003410156105d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105cb90611106565b60405180910390fd5b600060018111156105e8576105e7610c4b565b5b600460009054906101000a900460ff16600181111561060a57610609610c4b565b5b1461064a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064190611172565b60405180910390fd5b6003339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167fa0df676a3a1d8a4dc693c144ac79c01945b4464a07bccdbf66c068127c32cfd760405160405180910390a260046003805490501415610756576001600460006101000a81548160ff0219169083600181111561072457610723610c4b565b5b02179055507f095744e432dd463fbf0fa4a256e21ddb462dbc9cc4e27248ebd5a28d759cc9e560405160405180910390a15b565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600382815481106107965761079561107a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600380549050905090565b60008082815481106107ea576107e961107a565b5b90600052602060002001549050919050565b60006040518060800160405280600060ff168152602001600160ff168152602001600260ff168152602001600360ff1681525090506000600a905060006004905060008060005b86518110156109cf578360ff168782815181106108635761086261107a565b5b602002602001015161087591906111c1565b925085836004811061088a5761088961107a565b5b60200201519150600560405180604001604052808460ff168152602001600181525090806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010155505060068260ff16600481106109025761090161107a565b5b6020918282040191900681819054906101000a900460ff16809291906109279061122e565b91906101000a81548160ff021916908360ff160217905550508460ff1660068360ff166004811061095b5761095a61107a565b5b602091828204019190069054906101000a900460ff1660ff1614156109bc57858260ff16600481106109905761098f61107a565b5b60200201600060ff1681525083806109a790611258565b94505060028460ff1614156109bb57600b94505b5b80806109c790611282565b915050610843565b506001600460016101000a81548160ff021916908360018111156109f6576109f5610c4b565b5b0217905550505050505050565b8060009080519060200190610a19929190610bad565b507f1d8f6997ec77a160b10f1131c09af88a6a895ea5f542c5fbca36ce69a9f5424860405160405180910390a15050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f0000000000000000000000000000000000000000000000000000000000000000876040518663ffffffff1660e01b8152600401610b0e959493929190611324565b602060405180830381600087803b158015610b2857600080fd5b505af1158015610b3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b60919061138c565b9050807f5d7d0431c4991fcc9f63f03ad0ead4128b866a8ed115a818b6d87a3afedb726460405160405180910390a25050565b604051806040016040528060008152602001600081525090565b828054828255906000526020600020908101928215610be9579160200282015b82811115610be8578251825591602001919060010190610bcd565b5b509050610bf69190610bfa565b5090565b5b80821115610c13576000816000905550600101610bfb565b5090565b6000819050919050565b610c2a81610c17565b82525050565b6000602082019050610c456000830184610c21565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610c8b57610c8a610c4b565b5b50565b6000819050610c9c82610c7a565b919050565b6000610cac82610c8e565b9050919050565b610cbc81610ca1565b82525050565b6000602082019050610cd76000830184610cb3565b92915050565b6000604051905090565b600080fd5b600080fd5b610cfa81610c17565b8114610d0557600080fd5b50565b600081359050610d1781610cf1565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610d6b82610d22565b810181811067ffffffffffffffff82111715610d8a57610d89610d33565b5b80604052505050565b6000610d9d610cdd565b9050610da98282610d62565b919050565b600067ffffffffffffffff821115610dc957610dc8610d33565b5b602082029050602081019050919050565b600080fd5b6000610df2610ded84610dae565b610d93565b90508083825260208201905060208402830185811115610e1557610e14610dda565b5b835b81811015610e3e5780610e2a8882610d08565b845260208401935050602081019050610e17565b5050509392505050565b600082601f830112610e5d57610e5c610d1d565b5b8135610e6d848260208601610ddf565b91505092915050565b60008060408385031215610e8d57610e8c610ce7565b5b6000610e9b85828601610d08565b925050602083013567ffffffffffffffff811115610ebc57610ebb610cec565b5b610ec885828601610e48565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610efd82610ed2565b9050919050565b610f0d81610ef2565b82525050565b6000602082019050610f286000830184610f04565b92915050565b60028110610f3f57610f3e610c4b565b5b50565b6000819050610f5082610f2e565b919050565b6000610f6082610f42565b9050919050565b610f7081610f55565b82525050565b6000602082019050610f8b6000830184610f67565b92915050565b600060208284031215610fa757610fa6610ce7565b5b6000610fb584828501610d08565b91505092915050565b610fc781610c17565b82525050565b604082016000820151610fe36000850182610fbe565b506020820151610ff66020850182610fbe565b50505050565b60006040820190506110116000830184610fcd565b92915050565b600063ffffffff82169050919050565b61103081611017565b82525050565b600060208201905061104b6000830184611027565b92915050565b60006040820190506110666000830185610f04565b6110736020830184610f04565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082825260208201905092915050565b7f53656e64204d6f726520746f20456e746572204c6f6262790000000000000000600082015250565b60006110f06018836110a9565b91506110fb826110ba565b602082019050919050565b6000602082019050818103600083015261111f816110e3565b9050919050565b7f4c6f6262792069732066756c6c00000000000000000000000000000000000000600082015250565b600061115c600d836110a9565b915061116782611126565b602082019050919050565b6000602082019050818103600083015261118b8161114f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006111cc82610c17565b91506111d783610c17565b9250826111e7576111e6611192565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060ff82169050919050565b600061123982611221565b915060ff82141561124d5761124c6111f2565b5b600182019050919050565b600061126382611221565b91506000821415611277576112766111f2565b5b600182039050919050565b600061128d82610c17565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156112c0576112bf6111f2565b5b600182019050919050565b6000819050919050565b6112de816112cb565b82525050565b600067ffffffffffffffff82169050919050565b611301816112e4565b82525050565b600061ffff82169050919050565b61131e81611307565b82525050565b600060a08201905061133960008301886112d5565b61134660208301876112f8565b6113536040830186611315565b6113606060830185611027565b61136d6080830184611027565b9695505050505050565b60008151905061138681610cf1565b92915050565b6000602082840312156113a2576113a1610ce7565b5b60006113b084828501611377565b9150509291505056fea2646970667358221220a3bcccb77aa164743a4a3bc2df3d4dc57cfe304599d696ebbfc0155fc9f011aa64736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100e85760003560e01c8063790b86c71161008a578063de8be8e711610059578063de8be8e71461028d578063e55ae4e8146102b8578063fd6673f5146102f5578063feaf534814610320576100e8565b8063790b86c7146102045780638d0688841461021b578063c1c244e814610258578063d9eb8a4414610283576100e8565b80631fe543e3116100c65780631fe543e31461015a578063473f1ddc146101835780635ad964ae146101ae5780635f1b0fd8146101d9576100e8565b806309bc33a7146100ed57806309d69e6d146101185780630fb081df1461012f575b600080fd5b3480156100f957600080fd5b5061010261035d565b60405161010f9190610c30565b60405180910390f35b34801561012457600080fd5b5061012d610385565b005b34801561013b57600080fd5b506101446103e0565b6040516101519190610cc2565b60405180910390f35b34801561016657600080fd5b50610181600480360381019061017c9190610e76565b6103f7565b005b34801561018f57600080fd5b506101986104b7565b6040516101a59190610f13565b60405180910390f35b3480156101ba57600080fd5b506101c36104e1565b6040516101d09190610f76565b60405180910390f35b3480156101e557600080fd5b506101ee6104f8565b6040516101fb9190610c30565b60405180910390f35b34801561021057600080fd5b50610219610505565b005b34801561022757600080fd5b50610242600480360381019061023d9190610f91565b610517565b60405161024f9190610ffc565b60405180910390f35b34801561026457600080fd5b5061026d610567565b60405161027a9190610c30565b60405180910390f35b61028b610571565b005b34801561029957600080fd5b506102a2610758565b6040516102af9190611036565b60405180910390f35b3480156102c457600080fd5b506102df60048036038101906102da9190610f91565b610780565b6040516102ec9190610f13565b60405180910390f35b34801561030157600080fd5b5061030a6107c8565b6040516103179190610c30565b60405180910390f35b34801561032c57600080fd5b5061034760048036038101906103429190610f91565b6107d5565b6040516103549190610c30565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6103de60008054806020026020016040519081016040528092919081815260200182805480156103d457602002820191906000526020600020905b8154815260200190600101908083116103c0575b50505050506107fc565b565b6000600460009054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104a957337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016104a0929190611051565b60405180910390fd5b6104b38282610a03565b5050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600460019054906101000a900460ff16905090565b6000600361ffff16905090565b60006023905061051481610a4a565b50565b61051f610b93565b600582815481106105335761053261107a565b5b9060005260206000209060020201604051806040016040529081600082015481526020016001820154815250509050919050565b6000600154905090565b7f00000000000000000000000000000000000000000000000000000000000000003410156105d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105cb90611106565b60405180910390fd5b600060018111156105e8576105e7610c4b565b5b600460009054906101000a900460ff16600181111561060a57610609610c4b565b5b1461064a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064190611172565b60405180910390fd5b6003339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167fa0df676a3a1d8a4dc693c144ac79c01945b4464a07bccdbf66c068127c32cfd760405160405180910390a260046003805490501415610756576001600460006101000a81548160ff0219169083600181111561072457610723610c4b565b5b02179055507f095744e432dd463fbf0fa4a256e21ddb462dbc9cc4e27248ebd5a28d759cc9e560405160405180910390a15b565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600382815481106107965761079561107a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600380549050905090565b60008082815481106107ea576107e961107a565b5b90600052602060002001549050919050565b60006040518060800160405280600060ff168152602001600160ff168152602001600260ff168152602001600360ff1681525090506000600a905060006004905060008060005b86518110156109cf578360ff168782815181106108635761086261107a565b5b602002602001015161087591906111c1565b925085836004811061088a5761088961107a565b5b60200201519150600560405180604001604052808460ff168152602001600181525090806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010155505060068260ff16600481106109025761090161107a565b5b6020918282040191900681819054906101000a900460ff16809291906109279061122e565b91906101000a81548160ff021916908360ff160217905550508460ff1660068360ff166004811061095b5761095a61107a565b5b602091828204019190069054906101000a900460ff1660ff1614156109bc57858260ff16600481106109905761098f61107a565b5b60200201600060ff1681525083806109a790611258565b94505060028460ff1614156109bb57600b94505b5b80806109c790611282565b915050610843565b506001600460016101000a81548160ff021916908360018111156109f6576109f5610c4b565b5b0217905550505050505050565b8060009080519060200190610a19929190610bad565b507f1d8f6997ec77a160b10f1131c09af88a6a895ea5f542c5fbca36ce69a9f5424860405160405180910390a15050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f0000000000000000000000000000000000000000000000000000000000000000876040518663ffffffff1660e01b8152600401610b0e959493929190611324565b602060405180830381600087803b158015610b2857600080fd5b505af1158015610b3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b60919061138c565b9050807f5d7d0431c4991fcc9f63f03ad0ead4128b866a8ed115a818b6d87a3afedb726460405160405180910390a25050565b604051806040016040528060008152602001600081525090565b828054828255906000526020600020908101928215610be9579160200282015b82811115610be8578251825591602001919060010190610bcd565b5b509050610bf69190610bfa565b5090565b5b80821115610c13576000816000905550600101610bfb565b5090565b6000819050919050565b610c2a81610c17565b82525050565b6000602082019050610c456000830184610c21565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610c8b57610c8a610c4b565b5b50565b6000819050610c9c82610c7a565b919050565b6000610cac82610c8e565b9050919050565b610cbc81610ca1565b82525050565b6000602082019050610cd76000830184610cb3565b92915050565b6000604051905090565b600080fd5b600080fd5b610cfa81610c17565b8114610d0557600080fd5b50565b600081359050610d1781610cf1565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610d6b82610d22565b810181811067ffffffffffffffff82111715610d8a57610d89610d33565b5b80604052505050565b6000610d9d610cdd565b9050610da98282610d62565b919050565b600067ffffffffffffffff821115610dc957610dc8610d33565b5b602082029050602081019050919050565b600080fd5b6000610df2610ded84610dae565b610d93565b90508083825260208201905060208402830185811115610e1557610e14610dda565b5b835b81811015610e3e5780610e2a8882610d08565b845260208401935050602081019050610e17565b5050509392505050565b600082601f830112610e5d57610e5c610d1d565b5b8135610e6d848260208601610ddf565b91505092915050565b60008060408385031215610e8d57610e8c610ce7565b5b6000610e9b85828601610d08565b925050602083013567ffffffffffffffff811115610ebc57610ebb610cec565b5b610ec885828601610e48565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610efd82610ed2565b9050919050565b610f0d81610ef2565b82525050565b6000602082019050610f286000830184610f04565b92915050565b60028110610f3f57610f3e610c4b565b5b50565b6000819050610f5082610f2e565b919050565b6000610f6082610f42565b9050919050565b610f7081610f55565b82525050565b6000602082019050610f8b6000830184610f67565b92915050565b600060208284031215610fa757610fa6610ce7565b5b6000610fb584828501610d08565b91505092915050565b610fc781610c17565b82525050565b604082016000820151610fe36000850182610fbe565b506020820151610ff66020850182610fbe565b50505050565b60006040820190506110116000830184610fcd565b92915050565b600063ffffffff82169050919050565b61103081611017565b82525050565b600060208201905061104b6000830184611027565b92915050565b60006040820190506110666000830185610f04565b6110736020830184610f04565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082825260208201905092915050565b7f53656e64204d6f726520746f20456e746572204c6f6262790000000000000000600082015250565b60006110f06018836110a9565b91506110fb826110ba565b602082019050919050565b6000602082019050818103600083015261111f816110e3565b9050919050565b7f4c6f6262792069732066756c6c00000000000000000000000000000000000000600082015250565b600061115c600d836110a9565b915061116782611126565b602082019050919050565b6000602082019050818103600083015261118b8161114f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006111cc82610c17565b91506111d783610c17565b9250826111e7576111e6611192565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060ff82169050919050565b600061123982611221565b915060ff82141561124d5761124c6111f2565b5b600182019050919050565b600061126382611221565b91506000821415611277576112766111f2565b5b600182039050919050565b600061128d82610c17565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156112c0576112bf6111f2565b5b600182019050919050565b6000819050919050565b6112de816112cb565b82525050565b600067ffffffffffffffff82169050919050565b611301816112e4565b82525050565b600061ffff82169050919050565b61131e81611307565b82525050565b600060a08201905061133960008301886112d5565b61134660208301876112f8565b6113536040830186611315565b6113606060830185611027565b61136d6080830184611027565b9695505050505050565b60008151905061138681610cf1565b92915050565b6000602082840312156113a2576113a1610ce7565b5b60006113b084828501611377565b9150509291505056fea2646970667358221220a3bcccb77aa164743a4a3bc2df3d4dc57cfe304599d696ebbfc0155fc9f011aa64736f6c63430008080033",
  "devdoc": {
    "author": "Mitchell Spencer",
    "details": "Implements the Chainlink VRF V2",
    "kind": "dev",
    "methods": {},
    "title": "A sample Raffle Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getRandomWordsArray(uint256)": {
        "notice": "Getter Functions "
      },
      "testTerritoryAssignment()": {
        "notice": "Tester Functions "
      }
    },
    "notice": "Cryptorisk setup contract.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 187,
        "contract": "contracts/Setup.sol:Setup",
        "label": "s_randomWordsArray",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 191,
        "contract": "contracts/Setup.sol:Setup",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 193,
        "contract": "contracts/Setup.sol:Setup",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 196,
        "contract": "contracts/Setup.sol:Setup",
        "label": "s_players",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 199,
        "contract": "contracts/Setup.sol:Setup",
        "label": "s_lobbyState",
        "offset": 0,
        "slot": "4",
        "type": "t_enum(LobbyState)166"
      },
      {
        "astId": 202,
        "contract": "contracts/Setup.sol:Setup",
        "label": "s_territoryState",
        "offset": 1,
        "slot": "4",
        "type": "t_enum(TerritoryState)169"
      },
      {
        "astId": 205,
        "contract": "contracts/Setup.sol:Setup",
        "label": "s_setupState",
        "offset": 2,
        "slot": "4",
        "type": "t_enum(SetupState)172"
      },
      {
        "astId": 209,
        "contract": "contracts/Setup.sol:Setup",
        "label": "s_territories",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_struct(Territory_Info)223_storage)dyn_storage"
      },
      {
        "astId": 218,
        "contract": "contracts/Setup.sol:Setup",
        "label": "territoriesAssigned",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_uint8)4_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Territory_Info)223_storage)dyn_storage": {
        "base": "t_struct(Territory_Info)223_storage",
        "encoding": "dynamic_array",
        "label": "struct Setup.Territory_Info[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint8)4_storage": {
        "base": "t_uint8",
        "encoding": "inplace",
        "label": "uint8[4]",
        "numberOfBytes": "32"
      },
      "t_enum(LobbyState)166": {
        "encoding": "inplace",
        "label": "enum Setup.LobbyState",
        "numberOfBytes": "1"
      },
      "t_enum(SetupState)172": {
        "encoding": "inplace",
        "label": "enum Setup.SetupState",
        "numberOfBytes": "1"
      },
      "t_enum(TerritoryState)169": {
        "encoding": "inplace",
        "label": "enum Setup.TerritoryState",
        "numberOfBytes": "1"
      },
      "t_struct(Territory_Info)223_storage": {
        "encoding": "inplace",
        "label": "struct Setup.Territory_Info",
        "members": [
          {
            "astId": 220,
            "contract": "contracts/Setup.sol:Setup",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 222,
            "contract": "contracts/Setup.sol:Setup",
            "label": "troops",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}