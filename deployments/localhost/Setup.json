{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Lobby_LobbyNotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lobby__SendMoreToEnterLobby",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "GameStarting",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "PlayerJoinedLobby",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "ReceivedRandomWords",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedRandomness",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "enterLobby",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGameState",
      "outputs": [
        {
          "internalType": "enum Setup.LobbyState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x562f99f1c5d1da0ce777f9dea9b5a628408c5386f2a30b53c9569ba7b605b62e",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "927242",
    "logsBloom": "0x
    "blockHash": "0x8b57662ef2e0e2a391d267bc6354139fdaf0cc84d12f76a7f9e3709b834962df",
    "transactionHash": "0x562f99f1c5d1da0ce777f9dea9b5a628408c5386f2a30b53c9569ba7b605b62e",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "927242",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "100000000000000000",
    "0xd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc",
    "1",
    "500000",
    "30"
  ],
  "numDeployments": 1,
  "solcInputHash": "4513897be97bd3cc8bbe4b3e982bb0d2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Lobby_LobbyNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lobby__SendMoreToEnterLobby\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"GameStarting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"PlayerJoinedLobby\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ReceivedRandomWords\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRandomness\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"enterLobby\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGameState\",\"outputs\":[{\"internalType\":\"enum Setup.LobbyState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Mitchell Spencer\",\"details\":\"Implements the Chainlink VRF V2\",\"kind\":\"dev\",\"methods\":{},\"title\":\"A sample Raffle Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getGameState()\":{\"notice\":\"Getter Functions \"}},\"notice\":\"Cryptorisk setup contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Setup.sol\":\"Setup\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * @notice This is a deprecated interface. Please use AutomationCompatibleInterface directly.\\n */\\npragma solidity ^0.8.0;\\nimport {AutomationCompatibleInterface as KeeperCompatibleInterface} from \\\"./AutomationCompatibleInterface.sol\\\";\\n\",\"keccak256\":\"0xac76a31c20c6d66196247376d113a0f19229569ab8c123989649d50be3333e0a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/Setup.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\n\\n/* Errors */\\nerror Raffle__UpkeepNotNeeded(\\n    uint256 currentBalance,\\n    uint256 numPlayers,\\n    uint256 gameState\\n);\\nerror Lobby__TransferFailed();\\nerror Lobby__SendMoreToEnterLobby();\\nerror Lobby_LobbyNotOpen();\\n\\n/**@title A sample Raffle Contract\\n * @author Mitchell Spencer\\n * @notice Cryptorisk setup contract.\\n * @dev Implements the Chainlink VRF V2\\n */\\n\\ncontract Setup is VRFConsumerBaseV2 {\\n    /* Type declarations */\\n    enum LobbyState {\\n        OPEN,\\n        CLOSED\\n    }\\n\\n    /* State variables */\\n    // Chainlink VRF Variables\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    uint64 private immutable i_subscriptionId;\\n    bytes32 private immutable i_gasLane;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private constant NUM_WORDS = 1;\\n\\n    // Setup Variables\\n    uint256 private immutable i_interval;\\n    uint256 private immutable i_entranceFee;\\n    uint256 private s_lastTimeStamp;\\n    address private s_recentWinner;\\n    address payable[] private s_players;\\n    LobbyState private s_lobbyState;\\n\\n    /* Events */\\n    event RequestedRandomness(uint256 indexed requestId);\\n    event PlayerJoinedLobby(address indexed player);\\n    event WinnerPicked(address indexed player);\\n    event GameStarting();\\n    event ReceivedRandomWords();\\n\\n    /* Functions */\\n    constructor(\\n        address vrfCoordinatorV2,\\n        uint64 subscriptionId,\\n        bytes32 gasLane, // keyHash\\n        uint256 interval,\\n        uint256 entranceFee,\\n        uint32 callbackGasLimit\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_gasLane = gasLane;\\n        i_interval = interval;\\n        i_subscriptionId = subscriptionId;\\n        i_entranceFee = entranceFee;\\n        s_lobbyState = LobbyState.OPEN;\\n        s_lastTimeStamp = block.timestamp;\\n        i_callbackGasLimit = callbackGasLimit;\\n    }\\n\\n    function enterLobby() public payable {\\n        require(msg.value >= i_entranceFee, \\\"Not enough value sent\\\");\\n        require(s_lobbyState == LobbyState.OPEN, \\\"Lobby is full\\\");\\n        if (msg.value < i_entranceFee) {\\n            revert Lobby__SendMoreToEnterLobby();\\n        }\\n        if (s_lobbyState != LobbyState.OPEN) {\\n            revert Lobby_LobbyNotOpen();\\n        }\\n        // Emit an event when we update an array\\n        s_players.push(payable(msg.sender));\\n        emit PlayerJoinedLobby(msg.sender);\\n        // If players is 4: start game setup\\n        if (s_players.length == 4) {\\n            s_lobbyState = LobbyState.CLOSED;\\n            emit GameStarting();\\n            requestRandomness();\\n        }\\n    }\\n\\n    function requestRandomness() private {\\n        require(\\n            s_lobbyState == LobbyState.CLOSED,\\n            \\\"Lobby is not full (this should be impossible)\\\"\\n        );\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n        emit RequestedRandomness(requestId);\\n    }\\n\\n    /**\\n     * @dev This is the function that Chainlink VRF node\\n     * calls to send the money to the random winner.\\n     */\\n\\n    function fulfillRandomWords(\\n        uint256, /* requestId */\\n        uint256[] memory randomWords\\n    ) internal override {\\n        emit ReceivedRandomWords();\\n        //uint256 indexOfWinner = randomWords[0] % s_players.length;\\n        //address payable recentWinner = s_players[indexOfWinner];\\n        //s_recentWinner = recentWinner;\\n        //s_players = new address payable[](0);\\n        //s_lobbyState = LobbyState.OPEN;\\n        //s_lastTimeStamp = block.timestamp;\\n        //(bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\n        // require(success, \\\"Transfer failed\\\");\\n        //if (!success) {\\n        //    revert Lobby__TransferFailed();\\n        //}\\n        //emit WinnerPicked(recentWinner);\\n    }\\n\\n    /** Getter Functions */\\n\\n    function getGameState() public view returns (LobbyState) {\\n        return s_lobbyState;\\n    }\\n\\n    function getNumWords() public pure returns (uint256) {\\n        return NUM_WORDS;\\n    }\\n\\n    function getRequestConfirmations() public pure returns (uint256) {\\n        return REQUEST_CONFIRMATIONS;\\n    }\\n\\n    function getRecentWinner() public view returns (address) {\\n        return s_recentWinner;\\n    }\\n\\n    function getPlayer(uint256 index) public view returns (address) {\\n        return s_players[index];\\n    }\\n\\n    function getLastTimeStamp() public view returns (uint256) {\\n        return s_lastTimeStamp;\\n    }\\n\\n    function getInterval() public view returns (uint256) {\\n        return i_interval;\\n    }\\n\\n    function getEntranceFee() public view returns (uint256) {\\n        return i_entranceFee;\\n    }\\n\\n    function getNumberOfPlayers() public view returns (uint256) {\\n        return s_players.length;\\n    }\\n}\\n\",\"keccak256\":\"0xa0e4fbe13a5faeb039c3011efaf5d0fecc6c9d4d7792cae9dcb62e7d0cc96bea\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b5060405162001319380380620013198339818101604052810190620000389190620002a0565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508573ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508360e081815250508261012081815250508467ffffffffffffffff1660c08167ffffffffffffffff1660c01b815250508161014081815250506000600360006101000a81548160ff021916908360018111156200010a57620001096200033c565b5b0217905550426000819055508063ffffffff166101008163ffffffff1660e01b815250505050505050506200036b565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200016c826200013f565b9050919050565b6200017e816200015f565b81146200018a57600080fd5b50565b6000815190506200019e8162000173565b92915050565b600067ffffffffffffffff82169050919050565b620001c381620001a4565b8114620001cf57600080fd5b50565b600081519050620001e381620001b8565b92915050565b6000819050919050565b620001fe81620001e9565b81146200020a57600080fd5b50565b6000815190506200021e81620001f3565b92915050565b6000819050919050565b620002398162000224565b81146200024557600080fd5b50565b60008151905062000259816200022e565b92915050565b600063ffffffff82169050919050565b6200027a816200025f565b81146200028657600080fd5b50565b6000815190506200029a816200026f565b92915050565b60008060008060008060c08789031215620002c057620002bf6200013a565b5b6000620002d089828a016200018d565b9650506020620002e389828a01620001d2565b9550506040620002f689828a016200020d565b94505060606200030989828a0162000248565b93505060806200031c89828a0162000248565b92505060a06200032f89828a0162000289565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160601c60a05160601c60c05160c01c60e0516101005160e01c6101205161014051610f32620003e76000396000818161026d015281816103e101526104ba0152600061039b01526000610813015260006107cf015260006107f00152600061079301526000818161029301526102e70152610f326000f3fe60806040526004361061009c5760003560e01c806391ad27b41161006457806391ad27b414610176578063b7d0628b146101a1578063c1c244e8146101cc578063d9eb8a44146101f7578063e55ae4e814610201578063fd6673f51461023e5761009c565b806309bc33a7146100a15780631fe543e3146100cc578063473f1ddc146100f557806353a2c19a146101205780635f1b0fd81461014b575b600080fd5b3480156100ad57600080fd5b506100b6610269565b6040516100c391906108f1565b60405180910390f35b3480156100d857600080fd5b506100f360048036038101906100ee9190610aa5565b610291565b005b34801561010157600080fd5b5061010a610351565b6040516101179190610b42565b60405180910390f35b34801561012c57600080fd5b5061013561037b565b60405161014291906108f1565b60405180910390f35b34801561015757600080fd5b5061016061038a565b60405161016d91906108f1565b60405180910390f35b34801561018257600080fd5b5061018b610397565b60405161019891906108f1565b60405180910390f35b3480156101ad57600080fd5b506101b66103bf565b6040516101c39190610bd4565b60405180910390f35b3480156101d857600080fd5b506101e16103d6565b6040516101ee91906108f1565b60405180910390f35b6101ff6103df565b005b34801561020d57600080fd5b5061022860048036038101906102239190610bef565b610695565b6040516102359190610b42565b60405180910390f35b34801561024a57600080fd5b506102536106dd565b60405161026091906108f1565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461034357337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161033a929190610c1c565b60405180910390fd5b61034d82826106ea565b5050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600360009054906101000a900460ff16905090565b60008054905090565b7f0000000000000000000000000000000000000000000000000000000000000000341015610442576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043990610ca2565b60405180910390fd5b6000600181111561045657610455610b5d565b5b600360009054906101000a900460ff16600181111561047857610477610b5d565b5b146104b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104af90610d0e565b60405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000341015610512576040517fc4221be500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561052657610525610b5d565b5b600360009054906101000a900460ff16600181111561054857610547610b5d565b5b1461057f576040517fc56c42a200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167fa0df676a3a1d8a4dc693c144ac79c01945b4464a07bccdbf66c068127c32cfd760405160405180910390a260046002805490501415610693576001600360006101000a81548160ff0219169083600181111561065957610658610b5d565b5b02179055507f095744e432dd463fbf0fa4a256e21ddb462dbc9cc4e27248ebd5a28d759cc9e560405160405180910390a161069261071a565b5b565b6000600282815481106106ab576106aa610d2e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600280549050905090565b7f1d8f6997ec77a160b10f1131c09af88a6a895ea5f542c5fbca36ce69a9f5424860405160405180910390a15050565b60018081111561072d5761072c610b5d565b5b600360009054906101000a900460ff16600181111561074f5761074e610b5d565b5b1461078f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078690610dcf565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610854959493929190610e67565b602060405180830381600087803b15801561086e57600080fd5b505af1158015610882573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a69190610ecf565b9050807f5d7d0431c4991fcc9f63f03ad0ead4128b866a8ed115a818b6d87a3afedb726460405160405180910390a250565b6000819050919050565b6108eb816108d8565b82525050565b600060208201905061090660008301846108e2565b92915050565b6000604051905090565b600080fd5b600080fd5b610929816108d8565b811461093457600080fd5b50565b60008135905061094681610920565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61099a82610951565b810181811067ffffffffffffffff821117156109b9576109b8610962565b5b80604052505050565b60006109cc61090c565b90506109d88282610991565b919050565b600067ffffffffffffffff8211156109f8576109f7610962565b5b602082029050602081019050919050565b600080fd5b6000610a21610a1c846109dd565b6109c2565b90508083825260208201905060208402830185811115610a4457610a43610a09565b5b835b81811015610a6d5780610a598882610937565b845260208401935050602081019050610a46565b5050509392505050565b600082601f830112610a8c57610a8b61094c565b5b8135610a9c848260208601610a0e565b91505092915050565b60008060408385031215610abc57610abb610916565b5b6000610aca85828601610937565b925050602083013567ffffffffffffffff811115610aeb57610aea61091b565b5b610af785828601610a77565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b2c82610b01565b9050919050565b610b3c81610b21565b82525050565b6000602082019050610b576000830184610b33565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610b9d57610b9c610b5d565b5b50565b6000819050610bae82610b8c565b919050565b6000610bbe82610ba0565b9050919050565b610bce81610bb3565b82525050565b6000602082019050610be96000830184610bc5565b92915050565b600060208284031215610c0557610c04610916565b5b6000610c1384828501610937565b91505092915050565b6000604082019050610c316000830185610b33565b610c3e6020830184610b33565b9392505050565b600082825260208201905092915050565b7f4e6f7420656e6f7567682076616c75652073656e740000000000000000000000600082015250565b6000610c8c601583610c45565b9150610c9782610c56565b602082019050919050565b60006020820190508181036000830152610cbb81610c7f565b9050919050565b7f4c6f6262792069732066756c6c00000000000000000000000000000000000000600082015250565b6000610cf8600d83610c45565b9150610d0382610cc2565b602082019050919050565b60006020820190508181036000830152610d2781610ceb565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4c6f626279206973206e6f742066756c6c2028746869732073686f756c64206260008201527f6520696d706f737369626c652900000000000000000000000000000000000000602082015250565b6000610db9602d83610c45565b9150610dc482610d5d565b604082019050919050565b60006020820190508181036000830152610de881610dac565b9050919050565b6000819050919050565b610e0281610def565b82525050565b600067ffffffffffffffff82169050919050565b610e2581610e08565b82525050565b600061ffff82169050919050565b610e4281610e2b565b82525050565b600063ffffffff82169050919050565b610e6181610e48565b82525050565b600060a082019050610e7c6000830188610df9565b610e896020830187610e1c565b610e966040830186610e39565b610ea36060830185610e58565b610eb06080830184610e58565b9695505050505050565b600081519050610ec981610920565b92915050565b600060208284031215610ee557610ee4610916565b5b6000610ef384828501610eba565b9150509291505056fea26469706673582212208f593ac5a0a2cb2a4f548ea1758c7605ecba1d6317886010ab7b73f71fa0920064736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061009c5760003560e01c806391ad27b41161006457806391ad27b414610176578063b7d0628b146101a1578063c1c244e8146101cc578063d9eb8a44146101f7578063e55ae4e814610201578063fd6673f51461023e5761009c565b806309bc33a7146100a15780631fe543e3146100cc578063473f1ddc146100f557806353a2c19a146101205780635f1b0fd81461014b575b600080fd5b3480156100ad57600080fd5b506100b6610269565b6040516100c391906108f1565b60405180910390f35b3480156100d857600080fd5b506100f360048036038101906100ee9190610aa5565b610291565b005b34801561010157600080fd5b5061010a610351565b6040516101179190610b42565b60405180910390f35b34801561012c57600080fd5b5061013561037b565b60405161014291906108f1565b60405180910390f35b34801561015757600080fd5b5061016061038a565b60405161016d91906108f1565b60405180910390f35b34801561018257600080fd5b5061018b610397565b60405161019891906108f1565b60405180910390f35b3480156101ad57600080fd5b506101b66103bf565b6040516101c39190610bd4565b60405180910390f35b3480156101d857600080fd5b506101e16103d6565b6040516101ee91906108f1565b60405180910390f35b6101ff6103df565b005b34801561020d57600080fd5b5061022860048036038101906102239190610bef565b610695565b6040516102359190610b42565b60405180910390f35b34801561024a57600080fd5b506102536106dd565b60405161026091906108f1565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461034357337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161033a929190610c1c565b60405180910390fd5b61034d82826106ea565b5050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600360009054906101000a900460ff16905090565b60008054905090565b7f0000000000000000000000000000000000000000000000000000000000000000341015610442576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043990610ca2565b60405180910390fd5b6000600181111561045657610455610b5d565b5b600360009054906101000a900460ff16600181111561047857610477610b5d565b5b146104b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104af90610d0e565b60405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000341015610512576040517fc4221be500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561052657610525610b5d565b5b600360009054906101000a900460ff16600181111561054857610547610b5d565b5b1461057f576040517fc56c42a200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167fa0df676a3a1d8a4dc693c144ac79c01945b4464a07bccdbf66c068127c32cfd760405160405180910390a260046002805490501415610693576001600360006101000a81548160ff0219169083600181111561065957610658610b5d565b5b02179055507f095744e432dd463fbf0fa4a256e21ddb462dbc9cc4e27248ebd5a28d759cc9e560405160405180910390a161069261071a565b5b565b6000600282815481106106ab576106aa610d2e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600280549050905090565b7f1d8f6997ec77a160b10f1131c09af88a6a895ea5f542c5fbca36ce69a9f5424860405160405180910390a15050565b60018081111561072d5761072c610b5d565b5b600360009054906101000a900460ff16600181111561074f5761074e610b5d565b5b1461078f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078690610dcf565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610854959493929190610e67565b602060405180830381600087803b15801561086e57600080fd5b505af1158015610882573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a69190610ecf565b9050807f5d7d0431c4991fcc9f63f03ad0ead4128b866a8ed115a818b6d87a3afedb726460405160405180910390a250565b6000819050919050565b6108eb816108d8565b82525050565b600060208201905061090660008301846108e2565b92915050565b6000604051905090565b600080fd5b600080fd5b610929816108d8565b811461093457600080fd5b50565b60008135905061094681610920565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61099a82610951565b810181811067ffffffffffffffff821117156109b9576109b8610962565b5b80604052505050565b60006109cc61090c565b90506109d88282610991565b919050565b600067ffffffffffffffff8211156109f8576109f7610962565b5b602082029050602081019050919050565b600080fd5b6000610a21610a1c846109dd565b6109c2565b90508083825260208201905060208402830185811115610a4457610a43610a09565b5b835b81811015610a6d5780610a598882610937565b845260208401935050602081019050610a46565b5050509392505050565b600082601f830112610a8c57610a8b61094c565b5b8135610a9c848260208601610a0e565b91505092915050565b60008060408385031215610abc57610abb610916565b5b6000610aca85828601610937565b925050602083013567ffffffffffffffff811115610aeb57610aea61091b565b5b610af785828601610a77565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b2c82610b01565b9050919050565b610b3c81610b21565b82525050565b6000602082019050610b576000830184610b33565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610b9d57610b9c610b5d565b5b50565b6000819050610bae82610b8c565b919050565b6000610bbe82610ba0565b9050919050565b610bce81610bb3565b82525050565b6000602082019050610be96000830184610bc5565b92915050565b600060208284031215610c0557610c04610916565b5b6000610c1384828501610937565b91505092915050565b6000604082019050610c316000830185610b33565b610c3e6020830184610b33565b9392505050565b600082825260208201905092915050565b7f4e6f7420656e6f7567682076616c75652073656e740000000000000000000000600082015250565b6000610c8c601583610c45565b9150610c9782610c56565b602082019050919050565b60006020820190508181036000830152610cbb81610c7f565b9050919050565b7f4c6f6262792069732066756c6c00000000000000000000000000000000000000600082015250565b6000610cf8600d83610c45565b9150610d0382610cc2565b602082019050919050565b60006020820190508181036000830152610d2781610ceb565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4c6f626279206973206e6f742066756c6c2028746869732073686f756c64206260008201527f6520696d706f737369626c652900000000000000000000000000000000000000602082015250565b6000610db9602d83610c45565b9150610dc482610d5d565b604082019050919050565b60006020820190508181036000830152610de881610dac565b9050919050565b6000819050919050565b610e0281610def565b82525050565b600067ffffffffffffffff82169050919050565b610e2581610e08565b82525050565b600061ffff82169050919050565b610e4281610e2b565b82525050565b600063ffffffff82169050919050565b610e6181610e48565b82525050565b600060a082019050610e7c6000830188610df9565b610e896020830187610e1c565b610e966040830186610e39565b610ea36060830185610e58565b610eb06080830184610e58565b9695505050505050565b600081519050610ec981610920565b92915050565b600060208284031215610ee557610ee4610916565b5b6000610ef384828501610eba565b9150509291505056fea26469706673582212208f593ac5a0a2cb2a4f548ea1758c7605ecba1d6317886010ab7b73f71fa0920064736f6c63430008080033",
  "devdoc": {
    "author": "Mitchell Spencer",
    "details": "Implements the Chainlink VRF V2",
    "kind": "dev",
    "methods": {},
    "title": "A sample Raffle Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getGameState()": {
        "notice": "Getter Functions "
      }
    },
    "notice": "Cryptorisk setup contract.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1180,
        "contract": "contracts/Setup.sol:Setup",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1182,
        "contract": "contracts/Setup.sol:Setup",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1185,
        "contract": "contracts/Setup.sol:Setup",
        "label": "s_players",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 1188,
        "contract": "contracts/Setup.sol:Setup",
        "label": "s_lobbyState",
        "offset": 0,
        "slot": "3",
        "type": "t_enum(LobbyState)1159"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(LobbyState)1159": {
        "encoding": "inplace",
        "label": "enum Setup.LobbyState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}