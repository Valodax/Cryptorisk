{
  "address": "0x011269054D297BCc6817d72ac82B0389ACD845f5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "GameStarting",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "PlayerJoinedLobby",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "ReceivedRandomWords",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedRandomness",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "enterLobby",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLobbyState",
      "outputs": [
        {
          "internalType": "enum Setup.LobbyState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "territoryId",
          "type": "uint256"
        }
      ],
      "name": "getTerritories",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "owner",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "troops",
              "type": "uint256"
            }
          ],
          "internalType": "struct Setup.Territory_Info",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTerritoryState",
      "outputs": [
        {
          "internalType": "enum Setup.TerritoryState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd63de72b90dd406a79c8daa09cdfd10695c7e5b815c3e7320e8ef08d7d993fba",
  "receipt": {
    "to": null,
    "from": "0xDA3EC3FcaC20c11CCCc69E1067c1FC4adBb4a481",
    "contractAddress": "0x011269054D297BCc6817d72ac82B0389ACD845f5",
    "transactionIndex": 6,
    "gasUsed": "1237209",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xcdde6329cf81d43f307fde49074a6f708a457b4ffded7f0b20fea4109ec54649",
    "transactionHash": "0xd63de72b90dd406a79c8daa09cdfd10695c7e5b815c3e7320e8ef08d7d993fba",
    "logs": [],
    "blockNumber": 7888938,
    "cumulativeGasUsed": "3333255",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2Ca8E0C643bDe4C2E08ab1fA0da3401AdAD7734D",
    "100000000000000000",
    "0x79d3d8832d904592c0bf9818b621522c988bb8b0c05cdc3b15aea1b6e8db0c15",
    "6052",
    "500000"
  ],
  "numDeployments": 1,
  "solcInputHash": "95baa44af338531283e761864e6b400d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"GameStarting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"PlayerJoinedLobby\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ReceivedRandomWords\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRandomness\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"enterLobby\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLobbyState\",\"outputs\":[{\"internalType\":\"enum Setup.LobbyState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"territoryId\",\"type\":\"uint256\"}],\"name\":\"getTerritories\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"owner\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"troops\",\"type\":\"uint256\"}],\"internalType\":\"struct Setup.Territory_Info\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTerritoryState\",\"outputs\":[{\"internalType\":\"enum Setup.TerritoryState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Mitchell Spencer\",\"details\":\"Implements the Chainlink VRF V2\",\"kind\":\"dev\",\"methods\":{},\"title\":\"A sample Raffle Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getLobbyState()\":{\"notice\":\"Getter Functions \"}},\"notice\":\"Cryptorisk setup contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Setup.sol\":\"Setup\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/Setup.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\n\\n/* Errors */\\nerror Raffle__UpkeepNotNeeded(\\n    uint256 currentBalance,\\n    uint256 numPlayers,\\n    uint256 gameState\\n);\\nerror Lobby__TransferFailed();\\n\\n/**@title A sample Raffle Contract\\n * @author Mitchell Spencer\\n * @notice Cryptorisk setup contract.\\n * @dev Implements the Chainlink VRF V2\\n */\\n\\ncontract Setup is VRFConsumerBaseV2 {\\n    /* Type declarations */\\n    enum LobbyState {\\n        OPEN,\\n        CLOSED\\n    }\\n    enum TerritoryState {\\n        INCOMPLETE,\\n        COMPLETE\\n    }\\n    enum SetupState {\\n        INCOMPLETE,\\n        COMPLETE\\n    }\\n\\n    enum Territory {\\n        Alaska,\\n        NorthwestTerritory,\\n        Greenland,\\n        Quebec,\\n        Ontario,\\n        Alberta,\\n        WesternUS,\\n        EasternUS,\\n        CentralAmerica,\\n        Venezuela,\\n        Peru,\\n        Argentina,\\n        Brazil,\\n        Iceland,\\n        GreatBritain,\\n        WesternEurope,\\n        SouthernEurope,\\n        NorthernEurope,\\n        Scandinavia,\\n        Ukraine,\\n        NorthAfrica,\\n        Egypt,\\n        EastAfrica,\\n        Congo,\\n        SouthAfrica,\\n        Madagascar,\\n        MiddleEast,\\n        Afghanistan,\\n        Ural,\\n        Siberia,\\n        Yakutsk,\\n        Kamchatka,\\n        Irkutsk,\\n        Mongolia,\\n        Japan,\\n        China,\\n        India,\\n        Siam,\\n        Indonesia,\\n        NewGuinea,\\n        WesternAustralia,\\n        EasternAustralia\\n    }\\n    /* State variables */\\n    // Chainlink VRF Variables\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    uint64 private immutable i_subscriptionId;\\n    bytes32 private immutable i_gasLane;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n\\n    // Setup Variables\\n    uint256 private immutable i_entranceFee;\\n    uint256 private s_lastTimeStamp;\\n    address private s_recentWinner;\\n    address payable[] private s_players;\\n    LobbyState private s_lobbyState;\\n    TerritoryState private s_territoryState;\\n    SetupState private s_setupState;\\n    Territory_Info[] private s_territories;\\n    uint8[4] private territoriesAssigned = [0, 0, 0, 0]; // Used to track if player receives enough territory.\\n\\n    struct Territory_Info {\\n        uint owner;\\n        uint256 troops;\\n    }\\n\\n    /* Events */\\n    event RequestedRandomness(uint256 indexed requestId);\\n    event PlayerJoinedLobby(address indexed player);\\n    event WinnerPicked(address indexed player);\\n    event GameStarting();\\n    event ReceivedRandomWords();\\n\\n    /* Functions */\\n    constructor(\\n        address vrfCoordinatorV2,\\n        uint64 subscriptionId,\\n        bytes32 gasLane, // keyHash\\n        uint256 entranceFee,\\n        uint32 callbackGasLimit\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_gasLane = gasLane;\\n        i_subscriptionId = subscriptionId;\\n        i_entranceFee = entranceFee;\\n        s_lobbyState = LobbyState.OPEN;\\n        s_lastTimeStamp = block.timestamp;\\n        i_callbackGasLimit = callbackGasLimit;\\n    }\\n\\n    function enterLobby() public payable {\\n        require(msg.value >= i_entranceFee, \\\"Send More to Enter Lobby\\\");\\n        require(s_lobbyState == LobbyState.OPEN, \\\"Lobby is full\\\"); // require or if statement?\\n        // Emit an event when we update an array\\n        s_players.push(payable(msg.sender));\\n        emit PlayerJoinedLobby(msg.sender);\\n        if (s_players.length == 4) {\\n            s_lobbyState = LobbyState.CLOSED;\\n            emit GameStarting();\\n            requestRandomness(42);\\n        }\\n    }\\n\\n    function requestRandomness(uint32 num_words) private {\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            num_words\\n        );\\n        emit RequestedRandomness(requestId);\\n    }\\n\\n    /**\\n     * @dev This is the function that Chainlink VRF node\\n     * calls to send the money to the random winner.\\n     */\\n\\n    function fulfillRandomWords(\\n        uint256, /* requestId */\\n        uint256[] memory randomWords\\n    ) internal override {\\n        emit ReceivedRandomWords();\\n        if (s_territoryState == TerritoryState.INCOMPLETE) {\\n            assignTerritory(randomWords);\\n        }\\n        assignTroops(randomWords);\\n\\n        //uint256 indexOfWinner = randomWords[0] % s_players.length;\\n        //address payable recentWinner = s_players[indexOfWinner];\\n        //s_recentWinner = recentWinner;\\n        //s_players = new address payable[](0);\\n        //s_lobbyState = LobbyState.OPEN;\\n        //s_lastTimeStamp = block.timestamp;\\n        //(bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\n        // require(success, \\\"Transfer failed\\\");\\n        //if (!success) {\\n        //    revert Lobby__TransferFailed();\\n        //}\\n        //emit WinnerPicked(recentWinner);\\n    }\\n\\n    /**\\n     * Function receives array of 42 random words which are then used to assign each territory (0-41) an owner (0-3).\\n     * Mutates a globally declared array s_territories.\\n     */\\n    function assignTerritory(uint256[] memory randomWords) private {\\n        uint8[4] memory playerSelection = [0, 1, 2, 3]; // Eligible players to be assigned territory, each is popped until no players left to receive.\\n        uint8 territoryCap = 10; // Initial cap is 10, moves up to 11 after two players assigned 10.\\n        uint8 remainingPlayers = 4; // Ticks down as players hit their territory cap\\n        uint256 indexAssignedTerritory; // Index of playerSelection that contains a list of eligible players to receive territory.\\n        uint8 playerAwarded; // Stores the player to be awarded territory, for pushing into the s_territories array.\\n        for (uint i = 0; i < randomWords.length; i++) {\\n            indexAssignedTerritory = randomWords[i] % remainingPlayers; // Calculates which index from playerSelection will receive the territory\\n            playerAwarded = playerSelection[indexAssignedTerritory]; // Player to be awarded territory\\n            s_territories.push(Territory_Info(playerAwarded, 1));\\n            territoriesAssigned[playerAwarded]++;\\n            if (territoriesAssigned[playerAwarded] == territoryCap) {\\n                delete playerSelection[playerAwarded]; // Removes awarded player from the array upon hitting territory cap.\\n                remainingPlayers--;\\n                if (remainingPlayers == 2) {\\n                    territoryCap = 11; // Moves up instead of down, to remove situation where the cap goes down and we have players already on the cap then receiving too much territory.\\n                }\\n            }\\n        }\\n        s_territoryState = TerritoryState.COMPLETE;\\n        requestRandomness(78);\\n    }\\n\\n    function assignTroops(uint256[] memory randomWords) private {\\n        uint randomWordsIndex = 0;\\n        // s_territories.length == 42\\n        // playerTerritoryIndexes.length == 10 or 11\\n        for (uint i = 0; i < 4; i++) {\\n            uint[] memory playerTerritoryIndexes = new uint[](\\n                territoriesAssigned[i]\\n            ); // Initializes array of indexes for territories owned by player i\\n            uint index = 0;\\n            for (uint j = 0; j < s_territories.length; i++) {\\n                if (s_territories[j].owner == i) {\\n                    playerTerritoryIndexes[index++] = j;\\n                }\\n            }\\n            for (uint j = 0; j < 30 - territoriesAssigned[i]; j++) {\\n                uint territoryAssignedTroop = randomWords[randomWordsIndex++] %\\n                    territoriesAssigned[i];\\n                s_territories[playerTerritoryIndexes[territoryAssignedTroop]]\\n                    .troops++;\\n            }\\n        }\\n    }\\n\\n    /** Getter Functions */\\n\\n    function getLobbyState() public view returns (LobbyState) {\\n        return s_lobbyState;\\n    }\\n\\n    function getTerritoryState() public view returns (TerritoryState) {\\n        return s_territoryState;\\n    }\\n\\n    function getRequestConfirmations() public pure returns (uint256) {\\n        return REQUEST_CONFIRMATIONS;\\n    }\\n\\n    function getRecentWinner() public view returns (address) {\\n        return s_recentWinner;\\n    }\\n\\n    function getPlayer(uint256 index) public view returns (address) {\\n        return s_players[index];\\n    }\\n\\n    function getLastTimeStamp() public view returns (uint256) {\\n        return s_lastTimeStamp;\\n    }\\n\\n    function getEntranceFee() public view returns (uint256) {\\n        return i_entranceFee;\\n    }\\n\\n    function getNumberOfPlayers() public view returns (uint256) {\\n        return s_players.length;\\n    }\\n\\n    function getTerritories(uint territoryId)\\n        public\\n        view\\n        returns (Territory_Info memory)\\n    {\\n        return s_territories[territoryId];\\n    }\\n}\\n\",\"keccak256\":\"0x04919768c7a0150e297f94c5e16c8c68e27351b4738ad4df45e941f8ed49db90\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101406040526040518060800160405280600060ff168152602001600060ff168152602001600060ff168152602001600060ff1681525060059060046200004892919062000174565b503480156200005657600080fd5b50604051620019343803806200193483398181016040528101906200007c91906200039a565b848073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508473ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508260e081815250508367ffffffffffffffff1660c08167ffffffffffffffff1660c01b815250508161012081815250506000600360006101000a81548160ff0219169083600181111562000145576200014462000422565b5b0217905550426000819055508063ffffffff166101008163ffffffff1660e01b81525050505050505062000451565b826004601f01602090048101928215620002025791602002820160005b83821115620001d157835183826101000a81548160ff021916908360ff160217905550926020019260010160208160000104928301926001030262000191565b8015620002005782816101000a81549060ff0219169055600101602081600001049283019260010302620001d1565b505b50905062000211919062000215565b5090565b5b808211156200023057600081600090555060010162000216565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002668262000239565b9050919050565b620002788162000259565b81146200028457600080fd5b50565b60008151905062000298816200026d565b92915050565b600067ffffffffffffffff82169050919050565b620002bd816200029e565b8114620002c957600080fd5b50565b600081519050620002dd81620002b2565b92915050565b6000819050919050565b620002f881620002e3565b81146200030457600080fd5b50565b6000815190506200031881620002ed565b92915050565b6000819050919050565b62000333816200031e565b81146200033f57600080fd5b50565b600081519050620003538162000328565b92915050565b600063ffffffff82169050919050565b620003748162000359565b81146200038057600080fd5b50565b600081519050620003948162000369565b92915050565b600080600080600060a08688031215620003b957620003b862000234565b5b6000620003c98882890162000287565b9550506020620003dc88828901620002cc565b9450506040620003ef8882890162000307565b9350506060620004028882890162000342565b9250506080620004158882890162000383565b9150509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160601c60a05160601c60c05160c01c60e0516101005160e01c61012051611479620004bb6000396000818161027f01526104230152600061076a0152600061072601526000610747015260006106ea0152600081816102bc015261031001526114796000f3fe60806040526004361061009c5760003560e01c80635f1b0fd8116100645780635f1b0fd8146101765780638d068884146101a1578063c1c244e8146101de578063d9eb8a4414610209578063e55ae4e814610213578063fd6673f5146102505761009c565b806309bc33a7146100a15780630fb081df146100cc5780631fe543e3146100f7578063473f1ddc146101205780635ad964ae1461014b575b600080fd5b3480156100ad57600080fd5b506100b661027b565b6040516100c39190610ca1565b60405180910390f35b3480156100d857600080fd5b506100e16102a3565b6040516100ee9190610d33565b60405180910390f35b34801561010357600080fd5b5061011e60048036038101906101199190610ee7565b6102ba565b005b34801561012c57600080fd5b5061013561037a565b6040516101429190610f84565b60405180910390f35b34801561015757600080fd5b506101606103a4565b60405161016d9190610fe7565b60405180910390f35b34801561018257600080fd5b5061018b6103bb565b6040516101989190610ca1565b60405180910390f35b3480156101ad57600080fd5b506101c860048036038101906101c39190611002565b6103c8565b6040516101d5919061106d565b60405180910390f35b3480156101ea57600080fd5b506101f3610418565b6040516102009190610ca1565b60405180910390f35b610211610421565b005b34801561021f57600080fd5b5061023a60048036038101906102359190611002565b610612565b6040516102479190610f84565b60405180910390f35b34801561025c57600080fd5b5061026561065a565b6040516102729190610ca1565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600360009054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461036c57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610363929190611088565b60405180910390fd5b6103768282610667565b5050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600360019054906101000a900460ff16905090565b6000600361ffff16905090565b6103d0610c6e565b600482815481106103e4576103e36110b1565b5b9060005260206000209060020201604051806040016040529081600082015481526020016001820154815250509050919050565b60008054905090565b7f0000000000000000000000000000000000000000000000000000000000000000341015610484576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047b9061113d565b60405180910390fd5b6000600181111561049857610497610cbc565b5b600360009054906101000a900460ff1660018111156104ba576104b9610cbc565b5b146104fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f1906111a9565b60405180910390fd5b6002339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167fa0df676a3a1d8a4dc693c144ac79c01945b4464a07bccdbf66c068127c32cfd760405160405180910390a260046002805490501415610610576001600360006101000a81548160ff021916908360018111156105d4576105d3610cbc565b5b02179055507f095744e432dd463fbf0fa4a256e21ddb462dbc9cc4e27248ebd5a28d759cc9e560405160405180910390a161060f602a6106e6565b5b565b600060028281548110610628576106276110b1565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600280549050905090565b7f1d8f6997ec77a160b10f1131c09af88a6a895ea5f542c5fbca36ce69a9f5424860405160405180910390a1600060018111156106a7576106a6610cbc565b5b600360019054906101000a900460ff1660018111156106c9576106c8610cbc565b5b14156106d9576106d88161082f565b5b6106e281610a40565b5050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f0000000000000000000000000000000000000000000000000000000000000000876040518663ffffffff1660e01b81526004016107aa959493929190611241565b602060405180830381600087803b1580156107c457600080fd5b505af11580156107d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107fc91906112a9565b9050807f5d7d0431c4991fcc9f63f03ad0ead4128b866a8ed115a818b6d87a3afedb726460405160405180910390a25050565b60006040518060800160405280600060ff168152602001600160ff168152602001600260ff168152602001600360ff1681525090506000600a905060006004905060008060005b8651811015610a02578360ff16878281518110610896576108956110b1565b5b60200260200101516108a89190611305565b92508583600481106108bd576108bc6110b1565b5b60200201519150600460405180604001604052808460ff168152602001600181525090806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010155505060058260ff1660048110610935576109346110b1565b5b6020918282040191900681819054906101000a900460ff168092919061095a90611372565b91906101000a81548160ff021916908360ff160217905550508460ff1660058360ff166004811061098e5761098d6110b1565b5b602091828204019190069054906101000a900460ff1660ff1614156109ef57858260ff16600481106109c3576109c26110b1565b5b60200201600060ff1681525083806109da9061139c565b94505060028460ff1614156109ee57600b94505b5b80806109fa906113c6565b915050610876565b506001600360016101000a81548160ff02191690836001811115610a2957610a28610cbc565b5b0217905550610a38604e6106e6565b505050505050565b6000805b6004811015610c6957600060058260048110610a6357610a626110b1565b5b602091828204019190069054906101000a900460ff1660ff1667ffffffffffffffff811115610a9557610a94610da4565b5b604051908082528060200260200182016040528015610ac35781602001602082028036833780820191505090505b5090506000805b600480549050811015610b44578360048281548110610aec57610aeb6110b1565b5b9060005260206000209060020201600001541415610b315780838380610b11906113c6565b945081518110610b2457610b236110b1565b5b6020026020010181815250505b8380610b3c906113c6565b945050610aca565b5060005b60058460048110610b5c57610b5b6110b1565b5b602091828204019190069054906101000a900460ff16601e610b7e919061140f565b60ff16811015610c5357600060058560048110610b9e57610b9d6110b1565b5b602091828204019190069054906101000a900460ff1660ff16878780610bc3906113c6565b985081518110610bd657610bd56110b1565b5b6020026020010151610be89190611305565b90506004848281518110610bff57610bfe6110b1565b5b602002602001015181548110610c1857610c176110b1565b5b90600052602060002090600202016001016000815480929190610c3a906113c6565b9190505550508080610c4b906113c6565b915050610b48565b5050508080610c61906113c6565b915050610a44565b505050565b604051806040016040528060008152602001600081525090565b6000819050919050565b610c9b81610c88565b82525050565b6000602082019050610cb66000830184610c92565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610cfc57610cfb610cbc565b5b50565b6000819050610d0d82610ceb565b919050565b6000610d1d82610cff565b9050919050565b610d2d81610d12565b82525050565b6000602082019050610d486000830184610d24565b92915050565b6000604051905090565b600080fd5b600080fd5b610d6b81610c88565b8114610d7657600080fd5b50565b600081359050610d8881610d62565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610ddc82610d93565b810181811067ffffffffffffffff82111715610dfb57610dfa610da4565b5b80604052505050565b6000610e0e610d4e565b9050610e1a8282610dd3565b919050565b600067ffffffffffffffff821115610e3a57610e39610da4565b5b602082029050602081019050919050565b600080fd5b6000610e63610e5e84610e1f565b610e04565b90508083825260208201905060208402830185811115610e8657610e85610e4b565b5b835b81811015610eaf5780610e9b8882610d79565b845260208401935050602081019050610e88565b5050509392505050565b600082601f830112610ece57610ecd610d8e565b5b8135610ede848260208601610e50565b91505092915050565b60008060408385031215610efe57610efd610d58565b5b6000610f0c85828601610d79565b925050602083013567ffffffffffffffff811115610f2d57610f2c610d5d565b5b610f3985828601610eb9565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f6e82610f43565b9050919050565b610f7e81610f63565b82525050565b6000602082019050610f996000830184610f75565b92915050565b60028110610fb057610faf610cbc565b5b50565b6000819050610fc182610f9f565b919050565b6000610fd182610fb3565b9050919050565b610fe181610fc6565b82525050565b6000602082019050610ffc6000830184610fd8565b92915050565b60006020828403121561101857611017610d58565b5b600061102684828501610d79565b91505092915050565b61103881610c88565b82525050565b604082016000820151611054600085018261102f565b506020820151611067602085018261102f565b50505050565b6000604082019050611082600083018461103e565b92915050565b600060408201905061109d6000830185610f75565b6110aa6020830184610f75565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082825260208201905092915050565b7f53656e64204d6f726520746f20456e746572204c6f6262790000000000000000600082015250565b60006111276018836110e0565b9150611132826110f1565b602082019050919050565b600060208201905081810360008301526111568161111a565b9050919050565b7f4c6f6262792069732066756c6c00000000000000000000000000000000000000600082015250565b6000611193600d836110e0565b915061119e8261115d565b602082019050919050565b600060208201905081810360008301526111c281611186565b9050919050565b6000819050919050565b6111dc816111c9565b82525050565b600067ffffffffffffffff82169050919050565b6111ff816111e2565b82525050565b600061ffff82169050919050565b61121c81611205565b82525050565b600063ffffffff82169050919050565b61123b81611222565b82525050565b600060a08201905061125660008301886111d3565b61126360208301876111f6565b6112706040830186611213565b61127d6060830185611232565b61128a6080830184611232565b9695505050505050565b6000815190506112a381610d62565b92915050565b6000602082840312156112bf576112be610d58565b5b60006112cd84828501611294565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061131082610c88565b915061131b83610c88565b92508261132b5761132a6112d6565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060ff82169050919050565b600061137d82611365565b915060ff82141561139157611390611336565b5b600182019050919050565b60006113a782611365565b915060008214156113bb576113ba611336565b5b600182039050919050565b60006113d182610c88565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561140457611403611336565b5b600182019050919050565b600061141a82611365565b915061142583611365565b92508282101561143857611437611336565b5b82820390509291505056fea26469706673582212202564d68b9c31206239896b67150de7099da67a480b9a8a5769f5f5c378f240fc64736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061009c5760003560e01c80635f1b0fd8116100645780635f1b0fd8146101765780638d068884146101a1578063c1c244e8146101de578063d9eb8a4414610209578063e55ae4e814610213578063fd6673f5146102505761009c565b806309bc33a7146100a15780630fb081df146100cc5780631fe543e3146100f7578063473f1ddc146101205780635ad964ae1461014b575b600080fd5b3480156100ad57600080fd5b506100b661027b565b6040516100c39190610ca1565b60405180910390f35b3480156100d857600080fd5b506100e16102a3565b6040516100ee9190610d33565b60405180910390f35b34801561010357600080fd5b5061011e60048036038101906101199190610ee7565b6102ba565b005b34801561012c57600080fd5b5061013561037a565b6040516101429190610f84565b60405180910390f35b34801561015757600080fd5b506101606103a4565b60405161016d9190610fe7565b60405180910390f35b34801561018257600080fd5b5061018b6103bb565b6040516101989190610ca1565b60405180910390f35b3480156101ad57600080fd5b506101c860048036038101906101c39190611002565b6103c8565b6040516101d5919061106d565b60405180910390f35b3480156101ea57600080fd5b506101f3610418565b6040516102009190610ca1565b60405180910390f35b610211610421565b005b34801561021f57600080fd5b5061023a60048036038101906102359190611002565b610612565b6040516102479190610f84565b60405180910390f35b34801561025c57600080fd5b5061026561065a565b6040516102729190610ca1565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600360009054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461036c57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610363929190611088565b60405180910390fd5b6103768282610667565b5050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600360019054906101000a900460ff16905090565b6000600361ffff16905090565b6103d0610c6e565b600482815481106103e4576103e36110b1565b5b9060005260206000209060020201604051806040016040529081600082015481526020016001820154815250509050919050565b60008054905090565b7f0000000000000000000000000000000000000000000000000000000000000000341015610484576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047b9061113d565b60405180910390fd5b6000600181111561049857610497610cbc565b5b600360009054906101000a900460ff1660018111156104ba576104b9610cbc565b5b146104fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f1906111a9565b60405180910390fd5b6002339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167fa0df676a3a1d8a4dc693c144ac79c01945b4464a07bccdbf66c068127c32cfd760405160405180910390a260046002805490501415610610576001600360006101000a81548160ff021916908360018111156105d4576105d3610cbc565b5b02179055507f095744e432dd463fbf0fa4a256e21ddb462dbc9cc4e27248ebd5a28d759cc9e560405160405180910390a161060f602a6106e6565b5b565b600060028281548110610628576106276110b1565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600280549050905090565b7f1d8f6997ec77a160b10f1131c09af88a6a895ea5f542c5fbca36ce69a9f5424860405160405180910390a1600060018111156106a7576106a6610cbc565b5b600360019054906101000a900460ff1660018111156106c9576106c8610cbc565b5b14156106d9576106d88161082f565b5b6106e281610a40565b5050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f0000000000000000000000000000000000000000000000000000000000000000876040518663ffffffff1660e01b81526004016107aa959493929190611241565b602060405180830381600087803b1580156107c457600080fd5b505af11580156107d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107fc91906112a9565b9050807f5d7d0431c4991fcc9f63f03ad0ead4128b866a8ed115a818b6d87a3afedb726460405160405180910390a25050565b60006040518060800160405280600060ff168152602001600160ff168152602001600260ff168152602001600360ff1681525090506000600a905060006004905060008060005b8651811015610a02578360ff16878281518110610896576108956110b1565b5b60200260200101516108a89190611305565b92508583600481106108bd576108bc6110b1565b5b60200201519150600460405180604001604052808460ff168152602001600181525090806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010155505060058260ff1660048110610935576109346110b1565b5b6020918282040191900681819054906101000a900460ff168092919061095a90611372565b91906101000a81548160ff021916908360ff160217905550508460ff1660058360ff166004811061098e5761098d6110b1565b5b602091828204019190069054906101000a900460ff1660ff1614156109ef57858260ff16600481106109c3576109c26110b1565b5b60200201600060ff1681525083806109da9061139c565b94505060028460ff1614156109ee57600b94505b5b80806109fa906113c6565b915050610876565b506001600360016101000a81548160ff02191690836001811115610a2957610a28610cbc565b5b0217905550610a38604e6106e6565b505050505050565b6000805b6004811015610c6957600060058260048110610a6357610a626110b1565b5b602091828204019190069054906101000a900460ff1660ff1667ffffffffffffffff811115610a9557610a94610da4565b5b604051908082528060200260200182016040528015610ac35781602001602082028036833780820191505090505b5090506000805b600480549050811015610b44578360048281548110610aec57610aeb6110b1565b5b9060005260206000209060020201600001541415610b315780838380610b11906113c6565b945081518110610b2457610b236110b1565b5b6020026020010181815250505b8380610b3c906113c6565b945050610aca565b5060005b60058460048110610b5c57610b5b6110b1565b5b602091828204019190069054906101000a900460ff16601e610b7e919061140f565b60ff16811015610c5357600060058560048110610b9e57610b9d6110b1565b5b602091828204019190069054906101000a900460ff1660ff16878780610bc3906113c6565b985081518110610bd657610bd56110b1565b5b6020026020010151610be89190611305565b90506004848281518110610bff57610bfe6110b1565b5b602002602001015181548110610c1857610c176110b1565b5b90600052602060002090600202016001016000815480929190610c3a906113c6565b9190505550508080610c4b906113c6565b915050610b48565b5050508080610c61906113c6565b915050610a44565b505050565b604051806040016040528060008152602001600081525090565b6000819050919050565b610c9b81610c88565b82525050565b6000602082019050610cb66000830184610c92565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610cfc57610cfb610cbc565b5b50565b6000819050610d0d82610ceb565b919050565b6000610d1d82610cff565b9050919050565b610d2d81610d12565b82525050565b6000602082019050610d486000830184610d24565b92915050565b6000604051905090565b600080fd5b600080fd5b610d6b81610c88565b8114610d7657600080fd5b50565b600081359050610d8881610d62565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610ddc82610d93565b810181811067ffffffffffffffff82111715610dfb57610dfa610da4565b5b80604052505050565b6000610e0e610d4e565b9050610e1a8282610dd3565b919050565b600067ffffffffffffffff821115610e3a57610e39610da4565b5b602082029050602081019050919050565b600080fd5b6000610e63610e5e84610e1f565b610e04565b90508083825260208201905060208402830185811115610e8657610e85610e4b565b5b835b81811015610eaf5780610e9b8882610d79565b845260208401935050602081019050610e88565b5050509392505050565b600082601f830112610ece57610ecd610d8e565b5b8135610ede848260208601610e50565b91505092915050565b60008060408385031215610efe57610efd610d58565b5b6000610f0c85828601610d79565b925050602083013567ffffffffffffffff811115610f2d57610f2c610d5d565b5b610f3985828601610eb9565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f6e82610f43565b9050919050565b610f7e81610f63565b82525050565b6000602082019050610f996000830184610f75565b92915050565b60028110610fb057610faf610cbc565b5b50565b6000819050610fc182610f9f565b919050565b6000610fd182610fb3565b9050919050565b610fe181610fc6565b82525050565b6000602082019050610ffc6000830184610fd8565b92915050565b60006020828403121561101857611017610d58565b5b600061102684828501610d79565b91505092915050565b61103881610c88565b82525050565b604082016000820151611054600085018261102f565b506020820151611067602085018261102f565b50505050565b6000604082019050611082600083018461103e565b92915050565b600060408201905061109d6000830185610f75565b6110aa6020830184610f75565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082825260208201905092915050565b7f53656e64204d6f726520746f20456e746572204c6f6262790000000000000000600082015250565b60006111276018836110e0565b9150611132826110f1565b602082019050919050565b600060208201905081810360008301526111568161111a565b9050919050565b7f4c6f6262792069732066756c6c00000000000000000000000000000000000000600082015250565b6000611193600d836110e0565b915061119e8261115d565b602082019050919050565b600060208201905081810360008301526111c281611186565b9050919050565b6000819050919050565b6111dc816111c9565b82525050565b600067ffffffffffffffff82169050919050565b6111ff816111e2565b82525050565b600061ffff82169050919050565b61121c81611205565b82525050565b600063ffffffff82169050919050565b61123b81611222565b82525050565b600060a08201905061125660008301886111d3565b61126360208301876111f6565b6112706040830186611213565b61127d6060830185611232565b61128a6080830184611232565b9695505050505050565b6000815190506112a381610d62565b92915050565b6000602082840312156112bf576112be610d58565b5b60006112cd84828501611294565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061131082610c88565b915061131b83610c88565b92508261132b5761132a6112d6565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060ff82169050919050565b600061137d82611365565b915060ff82141561139157611390611336565b5b600182019050919050565b60006113a782611365565b915060008214156113bb576113ba611336565b5b600182039050919050565b60006113d182610c88565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561140457611403611336565b5b600182019050919050565b600061141a82611365565b915061142583611365565b92508282101561143857611437611336565b5b82820390509291505056fea26469706673582212202564d68b9c31206239896b67150de7099da67a480b9a8a5769f5f5c378f240fc64736f6c63430008080033",
  "devdoc": {
    "author": "Mitchell Spencer",
    "details": "Implements the Chainlink VRF V2",
    "kind": "dev",
    "methods": {},
    "title": "A sample Raffle Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getLobbyState()": {
        "notice": "Getter Functions "
      }
    },
    "notice": "Cryptorisk setup contract.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 238,
        "contract": "contracts/Setup.sol:Setup",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 240,
        "contract": "contracts/Setup.sol:Setup",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 243,
        "contract": "contracts/Setup.sol:Setup",
        "label": "s_players",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 246,
        "contract": "contracts/Setup.sol:Setup",
        "label": "s_lobbyState",
        "offset": 0,
        "slot": "3",
        "type": "t_enum(LobbyState)173"
      },
      {
        "astId": 249,
        "contract": "contracts/Setup.sol:Setup",
        "label": "s_territoryState",
        "offset": 1,
        "slot": "3",
        "type": "t_enum(TerritoryState)176"
      },
      {
        "astId": 252,
        "contract": "contracts/Setup.sol:Setup",
        "label": "s_setupState",
        "offset": 2,
        "slot": "3",
        "type": "t_enum(SetupState)179"
      },
      {
        "astId": 256,
        "contract": "contracts/Setup.sol:Setup",
        "label": "s_territories",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_struct(Territory_Info)270_storage)dyn_storage"
      },
      {
        "astId": 265,
        "contract": "contracts/Setup.sol:Setup",
        "label": "territoriesAssigned",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_uint8)4_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Territory_Info)270_storage)dyn_storage": {
        "base": "t_struct(Territory_Info)270_storage",
        "encoding": "dynamic_array",
        "label": "struct Setup.Territory_Info[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint8)4_storage": {
        "base": "t_uint8",
        "encoding": "inplace",
        "label": "uint8[4]",
        "numberOfBytes": "32"
      },
      "t_enum(LobbyState)173": {
        "encoding": "inplace",
        "label": "enum Setup.LobbyState",
        "numberOfBytes": "1"
      },
      "t_enum(SetupState)179": {
        "encoding": "inplace",
        "label": "enum Setup.SetupState",
        "numberOfBytes": "1"
      },
      "t_enum(TerritoryState)176": {
        "encoding": "inplace",
        "label": "enum Setup.TerritoryState",
        "numberOfBytes": "1"
      },
      "t_struct(Territory_Info)270_storage": {
        "encoding": "inplace",
        "label": "struct Setup.Territory_Info",
        "members": [
          {
            "astId": 267,
            "contract": "contracts/Setup.sol:Setup",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 269,
            "contract": "contracts/Setup.sol:Setup",
            "label": "troops",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}